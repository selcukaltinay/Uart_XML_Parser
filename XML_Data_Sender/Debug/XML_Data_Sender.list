
XML_Data_Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c0c  08008c0c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c14  08008c14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c14  08008c14  00018c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c18  08008c18  00018c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004328  20000074  08008c90  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000439c  08008c90  0002439c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf1d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b69  00000000  00000000  0003bfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  000411d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002790e  00000000  00000000  00042720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a553  00000000  00000000  0006a02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1fc8  00000000  00000000  00084581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e0  00000000  00000000  0017659c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800897c 	.word	0x0800897c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800897c 	.word	0x0800897c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b96e 	b.w	8000dd0 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468c      	mov	ip, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f040 8083 	bne.w	8000c22 <__udivmoddi4+0x116>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4617      	mov	r7, r2
 8000b20:	d947      	bls.n	8000bb2 <__udivmoddi4+0xa6>
 8000b22:	fab2 f282 	clz	r2, r2
 8000b26:	b142      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b28:	f1c2 0020 	rsb	r0, r2, #32
 8000b2c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b30:	4091      	lsls	r1, r2
 8000b32:	4097      	lsls	r7, r2
 8000b34:	ea40 0c01 	orr.w	ip, r0, r1
 8000b38:	4094      	lsls	r4, r2
 8000b3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fbbc f6f8 	udiv	r6, ip, r8
 8000b44:	fa1f fe87 	uxth.w	lr, r7
 8000b48:	fb08 c116 	mls	r1, r8, r6, ip
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f10e 	mul.w	r1, r6, lr
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x60>
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b5e:	f080 8119 	bcs.w	8000d94 <__udivmoddi4+0x288>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 8116 	bls.w	8000d94 <__udivmoddi4+0x288>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	443b      	add	r3, r7
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3310 	mls	r3, r8, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b80:	45a6      	cmp	lr, r4
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x8c>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8a:	f080 8105 	bcs.w	8000d98 <__udivmoddi4+0x28c>
 8000b8e:	45a6      	cmp	lr, r4
 8000b90:	f240 8102 	bls.w	8000d98 <__udivmoddi4+0x28c>
 8000b94:	3802      	subs	r0, #2
 8000b96:	443c      	add	r4, r7
 8000b98:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	b11d      	cbz	r5, 8000bac <__udivmoddi4+0xa0>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bac:	4631      	mov	r1, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	b902      	cbnz	r2, 8000bb6 <__udivmoddi4+0xaa>
 8000bb4:	deff      	udf	#255	; 0xff
 8000bb6:	fab2 f282 	clz	r2, r2
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d150      	bne.n	8000c60 <__udivmoddi4+0x154>
 8000bbe:	1bcb      	subs	r3, r1, r7
 8000bc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc4:	fa1f f887 	uxth.w	r8, r7
 8000bc8:	2601      	movs	r6, #1
 8000bca:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bce:	0c21      	lsrs	r1, r4, #16
 8000bd0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0xe4>
 8000be0:	1879      	adds	r1, r7, r1
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0xe2>
 8000be8:	428b      	cmp	r3, r1
 8000bea:	f200 80e9 	bhi.w	8000dc0 <__udivmoddi4+0x2b4>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1ac9      	subs	r1, r1, r3
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bfc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x10c>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x10a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80d9 	bhi.w	8000dc8 <__udivmoddi4+0x2bc>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e7bf      	b.n	8000ba2 <__udivmoddi4+0x96>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x12e>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	f000 80b1 	beq.w	8000d8e <__udivmoddi4+0x282>
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c32:	4630      	mov	r0, r6
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f683 	clz	r6, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d14a      	bne.n	8000cd8 <__udivmoddi4+0x1cc>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0x140>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80b8 	bhi.w	8000dbc <__udivmoddi4+0x2b0>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	468c      	mov	ip, r1
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0a8      	beq.n	8000bac <__udivmoddi4+0xa0>
 8000c5a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0xa0>
 8000c60:	f1c2 0320 	rsb	r3, r2, #32
 8000c64:	fa20 f603 	lsr.w	r6, r0, r3
 8000c68:	4097      	lsls	r7, r2
 8000c6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c6e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c72:	40d9      	lsrs	r1, r3
 8000c74:	4330      	orrs	r0, r6
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c7c:	fa1f f887 	uxth.w	r8, r7
 8000c80:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c88:	fb06 f108 	mul.w	r1, r6, r8
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x19c>
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c9a:	f080 808d 	bcs.w	8000db8 <__udivmoddi4+0x2ac>
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	f240 808a 	bls.w	8000db8 <__udivmoddi4+0x2ac>
 8000ca4:	3e02      	subs	r6, #2
 8000ca6:	443b      	add	r3, r7
 8000ca8:	1a5b      	subs	r3, r3, r1
 8000caa:	b281      	uxth	r1, r0
 8000cac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb00 f308 	mul.w	r3, r0, r8
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x1c4>
 8000cc0:	1879      	adds	r1, r7, r1
 8000cc2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cc6:	d273      	bcs.n	8000db0 <__udivmoddi4+0x2a4>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d971      	bls.n	8000db0 <__udivmoddi4+0x2a4>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4439      	add	r1, r7
 8000cd0:	1acb      	subs	r3, r1, r3
 8000cd2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cd6:	e778      	b.n	8000bca <__udivmoddi4+0xbe>
 8000cd8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cdc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce4:	431c      	orrs	r4, r3
 8000ce6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cea:	fa01 f306 	lsl.w	r3, r1, r6
 8000cee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	0c3b      	lsrs	r3, r7, #16
 8000cfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfe:	fa1f f884 	uxth.w	r8, r4
 8000d02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d06:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d0e:	458a      	cmp	sl, r1
 8000d10:	fa02 f206 	lsl.w	r2, r2, r6
 8000d14:	fa00 f306 	lsl.w	r3, r0, r6
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x220>
 8000d1a:	1861      	adds	r1, r4, r1
 8000d1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d20:	d248      	bcs.n	8000db4 <__udivmoddi4+0x2a8>
 8000d22:	458a      	cmp	sl, r1
 8000d24:	d946      	bls.n	8000db4 <__udivmoddi4+0x2a8>
 8000d26:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2a:	4421      	add	r1, r4
 8000d2c:	eba1 010a 	sub.w	r1, r1, sl
 8000d30:	b2bf      	uxth	r7, r7
 8000d32:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d36:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d3e:	fb00 f808 	mul.w	r8, r0, r8
 8000d42:	45b8      	cmp	r8, r7
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x24a>
 8000d46:	19e7      	adds	r7, r4, r7
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d22e      	bcs.n	8000dac <__udivmoddi4+0x2a0>
 8000d4e:	45b8      	cmp	r8, r7
 8000d50:	d92c      	bls.n	8000dac <__udivmoddi4+0x2a0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	4427      	add	r7, r4
 8000d56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5a:	eba7 0708 	sub.w	r7, r7, r8
 8000d5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d62:	454f      	cmp	r7, r9
 8000d64:	46c6      	mov	lr, r8
 8000d66:	4649      	mov	r1, r9
 8000d68:	d31a      	bcc.n	8000da0 <__udivmoddi4+0x294>
 8000d6a:	d017      	beq.n	8000d9c <__udivmoddi4+0x290>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x27a>
 8000d6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d72:	eb67 0701 	sbc.w	r7, r7, r1
 8000d76:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7a:	40f2      	lsrs	r2, r6
 8000d7c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d80:	40f7      	lsrs	r7, r6
 8000d82:	e9c5 2700 	strd	r2, r7, [r5]
 8000d86:	2600      	movs	r6, #0
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e70b      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0x60>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6fd      	b.n	8000b98 <__udivmoddi4+0x8c>
 8000d9c:	4543      	cmp	r3, r8
 8000d9e:	d2e5      	bcs.n	8000d6c <__udivmoddi4+0x260>
 8000da0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da4:	eb69 0104 	sbc.w	r1, r9, r4
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7df      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dac:	4608      	mov	r0, r1
 8000dae:	e7d2      	b.n	8000d56 <__udivmoddi4+0x24a>
 8000db0:	4660      	mov	r0, ip
 8000db2:	e78d      	b.n	8000cd0 <__udivmoddi4+0x1c4>
 8000db4:	4681      	mov	r9, r0
 8000db6:	e7b9      	b.n	8000d2c <__udivmoddi4+0x220>
 8000db8:	4666      	mov	r6, ip
 8000dba:	e775      	b.n	8000ca8 <__udivmoddi4+0x19c>
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	e74a      	b.n	8000c56 <__udivmoddi4+0x14a>
 8000dc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc4:	4439      	add	r1, r7
 8000dc6:	e713      	b.n	8000bf0 <__udivmoddi4+0xe4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	443c      	add	r4, r7
 8000dcc:	e724      	b.n	8000c18 <__udivmoddi4+0x10c>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <BMP180_Init>:
#include "BMP180.h"



void BMP180_Init()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, BMP180_WRITE_ADD, 1, HAL_MAX_DELAY) == HAL_OK){
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	2201      	movs	r2, #1
 8000dde:	21ee      	movs	r1, #238	; 0xee
 8000de0:	4815      	ldr	r0, [pc, #84]	; (8000e38 <BMP180_Init+0x64>)
 8000de2:	f002 fe31 	bl	8003a48 <HAL_I2C_IsDeviceReady>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d122      	bne.n	8000e32 <BMP180_Init+0x5e>
		AC1=1; // 8 bit msb 8 bit lsb
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <BMP180_Init+0x68>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	801a      	strh	r2, [r3, #0]
		AC2=1;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <BMP180_Init+0x6c>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	801a      	strh	r2, [r3, #0]
		AC3=1;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <BMP180_Init+0x70>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	801a      	strh	r2, [r3, #0]
		AC4=1;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <BMP180_Init+0x74>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	801a      	strh	r2, [r3, #0]
		AC5=1;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <BMP180_Init+0x78>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	801a      	strh	r2, [r3, #0]
		AC6=1;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <BMP180_Init+0x7c>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	801a      	strh	r2, [r3, #0]
		B1=1;
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <BMP180_Init+0x80>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	801a      	strh	r2, [r3, #0]
		B2=1;
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <BMP180_Init+0x84>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	801a      	strh	r2, [r3, #0]
		MB=1;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <BMP180_Init+0x88>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	801a      	strh	r2, [r3, #0]
		MC=1;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <BMP180_Init+0x8c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	801a      	strh	r2, [r3, #0]
		MD=1;
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <BMP180_Init+0x90>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	801a      	strh	r2, [r3, #0]
		BMP180_GetCalibrationValue();
 8000e2e:	f000 f81b 	bl	8000e68 <BMP180_GetCalibrationValue>

	}
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200041e4 	.word	0x200041e4
 8000e3c:	20004190 	.word	0x20004190
 8000e40:	200041be 	.word	0x200041be
 8000e44:	200041c0 	.word	0x200041c0
 8000e48:	200041ae 	.word	0x200041ae
 8000e4c:	200041a4 	.word	0x200041a4
 8000e50:	20004192 	.word	0x20004192
 8000e54:	200041d0 	.word	0x200041d0
 8000e58:	200041c2 	.word	0x200041c2
 8000e5c:	200041bc 	.word	0x200041bc
 8000e60:	200041d2 	.word	0x200041d2
 8000e64:	2000418e 	.word	0x2000418e

08000e68 <BMP180_GetCalibrationValue>:

void BMP180_GetCalibrationValue()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af04      	add	r7, sp, #16
	 uint8_t counterCalibration = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]

	 uint8_t bmp180Buffer[COUNT_OF_CAL_VAL];
	 HAL_I2C_Mem_Read(&hi2c2, BMP180_READ_ADD, 0xAA, 1, bmp180Buffer, COUNT_OF_CAL_VAL, HAL_MAX_DELAY);
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	2316      	movs	r3, #22
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	22aa      	movs	r2, #170	; 0xaa
 8000e84:	21ef      	movs	r1, #239	; 0xef
 8000e86:	48aa      	ldr	r0, [pc, #680]	; (8001130 <BMP180_GetCalibrationValue+0x2c8>)
 8000e88:	f002 fbb8 	bl	80035fc <HAL_I2C_Mem_Read>
	 HAL_Delay(15);
 8000e8c:	200f      	movs	r0, #15
 8000e8e:	f001 f969 	bl	8002164 <HAL_Delay>
	 AC1 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
 8000e94:	f107 0218 	add.w	r2, r7, #24
 8000e98:	4413      	add	r3, r2
 8000e9a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	f107 0118 	add.w	r1, r7, #24
 8000eaa:	440b      	add	r3, r1
 8000eac:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b9f      	ldr	r3, [pc, #636]	; (8001134 <BMP180_GetCalibrationValue+0x2cc>)
 8000eb8:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	75fb      	strb	r3, [r7, #23]
	 AC2 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	f107 0218 	add.w	r2, r7, #24
 8000ec6:	4413      	add	r3, r2
 8000ec8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f107 0118 	add.w	r1, r7, #24
 8000ed8:	440b      	add	r3, r1
 8000eda:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	4b94      	ldr	r3, [pc, #592]	; (8001138 <BMP180_GetCalibrationValue+0x2d0>)
 8000ee6:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	3302      	adds	r3, #2
 8000eec:	75fb      	strb	r3, [r7, #23]
	 AC3 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	f107 0218 	add.w	r2, r7, #24
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	3301      	adds	r3, #1
 8000f02:	f107 0118 	add.w	r1, r7, #24
 8000f06:	440b      	add	r3, r1
 8000f08:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	4b8a      	ldr	r3, [pc, #552]	; (800113c <BMP180_GetCalibrationValue+0x2d4>)
 8000f14:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	3302      	adds	r3, #2
 8000f1a:	75fb      	strb	r3, [r7, #23]
	 AC4 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	f107 0218 	add.w	r2, r7, #24
 8000f22:	4413      	add	r3, r2
 8000f24:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f107 0118 	add.w	r1, r7, #24
 8000f34:	440b      	add	r3, r1
 8000f36:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	4b7f      	ldr	r3, [pc, #508]	; (8001140 <BMP180_GetCalibrationValue+0x2d8>)
 8000f42:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	3302      	adds	r3, #2
 8000f48:	75fb      	strb	r3, [r7, #23]
	 AC5 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	f107 0218 	add.w	r2, r7, #24
 8000f50:	4413      	add	r3, r2
 8000f52:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	f107 0118 	add.w	r1, r7, #24
 8000f62:	440b      	add	r3, r1
 8000f64:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	4b75      	ldr	r3, [pc, #468]	; (8001144 <BMP180_GetCalibrationValue+0x2dc>)
 8000f70:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	3302      	adds	r3, #2
 8000f76:	75fb      	strb	r3, [r7, #23]
	 AC6 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	f107 0218 	add.w	r2, r7, #24
 8000f7e:	4413      	add	r3, r2
 8000f80:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	f107 0118 	add.w	r1, r7, #24
 8000f90:	440b      	add	r3, r1
 8000f92:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <BMP180_GetCalibrationValue+0x2e0>)
 8000f9e:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	75fb      	strb	r3, [r7, #23]
	 B1 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	f107 0218 	add.w	r2, r7, #24
 8000fac:	4413      	add	r3, r2
 8000fae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f107 0118 	add.w	r1, r7, #24
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	4b60      	ldr	r3, [pc, #384]	; (800114c <BMP180_GetCalibrationValue+0x2e4>)
 8000fcc:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	75fb      	strb	r3, [r7, #23]
	 B2 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	f107 0218 	add.w	r2, r7, #24
 8000fda:	4413      	add	r3, r2
 8000fdc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f107 0118 	add.w	r1, r7, #24
 8000fec:	440b      	add	r3, r1
 8000fee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b55      	ldr	r3, [pc, #340]	; (8001150 <BMP180_GetCalibrationValue+0x2e8>)
 8000ffa:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	3302      	adds	r3, #2
 8001000:	75fb      	strb	r3, [r7, #23]
	 MB = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	f107 0218 	add.w	r2, r7, #24
 8001008:	4413      	add	r3, r2
 800100a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	3301      	adds	r3, #1
 8001016:	f107 0118 	add.w	r1, r7, #24
 800101a:	440b      	add	r3, r1
 800101c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21a      	sxth	r2, r3
 8001026:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <BMP180_GetCalibrationValue+0x2ec>)
 8001028:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	3302      	adds	r3, #2
 800102e:	75fb      	strb	r3, [r7, #23]
	 MC = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	f107 0218 	add.w	r2, r7, #24
 8001036:	4413      	add	r3, r2
 8001038:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	3301      	adds	r3, #1
 8001044:	f107 0118 	add.w	r1, r7, #24
 8001048:	440b      	add	r3, r1
 800104a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <BMP180_GetCalibrationValue+0x2f0>)
 8001056:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	3302      	adds	r3, #2
 800105c:	75fb      	strb	r3, [r7, #23]
	 MD = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	f107 0218 	add.w	r2, r7, #24
 8001064:	4413      	add	r3, r2
 8001066:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	3301      	adds	r3, #1
 8001072:	f107 0118 	add.w	r1, r7, #24
 8001076:	440b      	add	r3, r1
 8001078:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b36      	ldr	r3, [pc, #216]	; (800115c <BMP180_GetCalibrationValue+0x2f4>)
 8001084:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	3302      	adds	r3, #2
 800108a:	75fb      	strb	r3, [r7, #23]

	 if(AC1 == 0x00 || AC1 == 0xFFFF)
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <BMP180_GetCalibrationValue+0x2cc>)
 800108e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <BMP180_GetCalibrationValue+0x232>
	 {
		 BMP180_GetCalibrationValue();
 8001096:	f7ff fee7 	bl	8000e68 <BMP180_GetCalibrationValue>
	 }
	 if(AC2 == 0x00 || AC2 == 0xFFFF)
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <BMP180_GetCalibrationValue+0x2d0>)
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <BMP180_GetCalibrationValue+0x240>
	 {
	 	 BMP180_GetCalibrationValue();
 80010a4:	f7ff fee0 	bl	8000e68 <BMP180_GetCalibrationValue>
	 }
	 if(AC3 == 0x00 || AC3 == 0xFFFF)
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <BMP180_GetCalibrationValue+0x2d4>)
 80010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <BMP180_GetCalibrationValue+0x24e>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010b2:	f7ff fed9 	bl	8000e68 <BMP180_GetCalibrationValue>
	 	 }
	 if(AC4 == 0x00 || AC4 == 0xFFFF)
 80010b6:	4b22      	ldr	r3, [pc, #136]	; (8001140 <BMP180_GetCalibrationValue+0x2d8>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <BMP180_GetCalibrationValue+0x25c>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010c0:	f7ff fed2 	bl	8000e68 <BMP180_GetCalibrationValue>
	 	 }
	 if(AC5 == 0x00 || AC5 == 0xFFFF)
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <BMP180_GetCalibrationValue+0x2dc>)
 80010c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <BMP180_GetCalibrationValue+0x26a>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010ce:	f7ff fecb 	bl	8000e68 <BMP180_GetCalibrationValue>
	 	 }
	 if(AC6 == 0x00 || AC6 == 0xFFFF)
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <BMP180_GetCalibrationValue+0x2e0>)
 80010d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <BMP180_GetCalibrationValue+0x278>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010dc:	f7ff fec4 	bl	8000e68 <BMP180_GetCalibrationValue>
	 	 }
	 if(B1 == 0x00 || B1 == 0xFFFF)
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <BMP180_GetCalibrationValue+0x2e4>)
 80010e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <BMP180_GetCalibrationValue+0x286>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010ea:	f7ff febd 	bl	8000e68 <BMP180_GetCalibrationValue>
	 	 }
	 if(B2 == 0x00 || B2 == 0xFFFF)
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <BMP180_GetCalibrationValue+0x2e8>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <BMP180_GetCalibrationValue+0x294>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010f8:	f7ff feb6 	bl	8000e68 <BMP180_GetCalibrationValue>
	 	 }
	 if(MB == 0x00 || MB == 0xFFFF)
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <BMP180_GetCalibrationValue+0x2ec>)
 80010fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <BMP180_GetCalibrationValue+0x2a2>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 8001106:	f7ff feaf 	bl	8000e68 <BMP180_GetCalibrationValue>
	 	 }
	 if(MC == 0x00 || MC == 0xFFFF)
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <BMP180_GetCalibrationValue+0x2f0>)
 800110c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <BMP180_GetCalibrationValue+0x2b0>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 8001114:	f7ff fea8 	bl	8000e68 <BMP180_GetCalibrationValue>
	 	 }
	 if(MD == 0x00 || MD == 0xFFFF)
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <BMP180_GetCalibrationValue+0x2f4>)
 800111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <BMP180_GetCalibrationValue+0x2be>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 8001122:	f7ff fea1 	bl	8000e68 <BMP180_GetCalibrationValue>
	 	 }

}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200041e4 	.word	0x200041e4
 8001134:	20004190 	.word	0x20004190
 8001138:	200041be 	.word	0x200041be
 800113c:	200041c0 	.word	0x200041c0
 8001140:	200041ae 	.word	0x200041ae
 8001144:	200041a4 	.word	0x200041a4
 8001148:	20004192 	.word	0x20004192
 800114c:	200041d0 	.word	0x200041d0
 8001150:	200041c2 	.word	0x200041c2
 8001154:	200041bc 	.word	0x200041bc
 8001158:	200041d2 	.word	0x200041d2
 800115c:	2000418e 	.word	0x2000418e

08001160 <BMP180_GetTemperature>:

float BMP180_GetTemperature()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af04      	add	r7, sp, #16
	uint8_t wData[1];
	wData[0]=0x2E;
 8001166:	232e      	movs	r3, #46	; 0x2e
 8001168:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Mem_Write(&hi2c2, BMP180_WRITE_ADD, 0xF4, 1, wData, 1, HAL_MAX_DELAY);
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2301      	movs	r3, #1
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	22f4      	movs	r2, #244	; 0xf4
 800117c:	21ee      	movs	r1, #238	; 0xee
 800117e:	4838      	ldr	r0, [pc, #224]	; (8001260 <BMP180_GetTemperature+0x100>)
 8001180:	f002 f942 	bl	8003408 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001184:	2005      	movs	r0, #5
 8001186:	f000 ffed 	bl	8002164 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c2, BMP180_READ_ADD, 0xF6, 1, dataRead, 2, HAL_MAX_DELAY);
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2302      	movs	r3, #2
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <BMP180_GetTemperature+0x104>)
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	22f6      	movs	r2, #246	; 0xf6
 800119c:	21ef      	movs	r1, #239	; 0xef
 800119e:	4830      	ldr	r0, [pc, #192]	; (8001260 <BMP180_GetTemperature+0x100>)
 80011a0:	f002 fa2c 	bl	80035fc <HAL_I2C_Mem_Read>
	HAL_Delay(5);
 80011a4:	2005      	movs	r0, #5
 80011a6:	f000 ffdd 	bl	8002164 <HAL_Delay>

	uncTemp = ((dataRead[0] << 8) | dataRead[1]);
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <BMP180_GetTemperature+0x104>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <BMP180_GetTemperature+0x104>)
 80011b4:	785b      	ldrb	r3, [r3, #1]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <BMP180_GetTemperature+0x108>)
 80011be:	801a      	strh	r2, [r3, #0]


	tX1 = ((uncTemp - AC6)*AC5/32768);
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <BMP180_GetTemperature+0x108>)
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <BMP180_GetTemperature+0x10c>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <BMP180_GetTemperature+0x110>)
 80011d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da02      	bge.n	80011e4 <BMP180_GetTemperature+0x84>
 80011de:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80011e2:	337f      	adds	r3, #127	; 0x7f
 80011e4:	13db      	asrs	r3, r3, #15
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <BMP180_GetTemperature+0x114>)
 80011ea:	601a      	str	r2, [r3, #0]
	while(MD==0 && tX1==0)
 80011ec:	e001      	b.n	80011f2 <BMP180_GetTemperature+0x92>
	{
		BMP180_Init();
 80011ee:	f7ff fdf1 	bl	8000dd4 <BMP180_Init>
	while(MD==0 && tX1==0)
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <BMP180_GetTemperature+0x118>)
 80011f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <BMP180_GetTemperature+0xa4>
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <BMP180_GetTemperature+0x114>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f4      	beq.n	80011ee <BMP180_GetTemperature+0x8e>
	}
	tX2 = (MC*2048)/(tX1+MD);
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <BMP180_GetTemperature+0x11c>)
 8001206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120a:	02da      	lsls	r2, r3, #11
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <BMP180_GetTemperature+0x118>)
 800120e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001212:	4619      	mov	r1, r3
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <BMP180_GetTemperature+0x114>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	440b      	add	r3, r1
 800121a:	fb92 f3f3 	sdiv	r3, r2, r3
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <BMP180_GetTemperature+0x120>)
 8001220:	6013      	str	r3, [r2, #0]

	tB5 = tX1 + tX2;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <BMP180_GetTemperature+0x114>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <BMP180_GetTemperature+0x120>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a15      	ldr	r2, [pc, #84]	; (8001284 <BMP180_GetTemperature+0x124>)
 800122e:	6013      	str	r3, [r2, #0]
	comTemp = (float)(tB5 + 8) / 16;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <BMP180_GetTemperature+0x124>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3308      	adds	r3, #8
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <BMP180_GetTemperature+0x128>)
 8001248:	edc3 7a00 	vstr	s15, [r3]
	return comTemp;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <BMP180_GetTemperature+0x128>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	ee07 3a90 	vmov	s15, r3
}
 8001254:	eeb0 0a67 	vmov.f32	s0, s15
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200041e4 	.word	0x200041e4
 8001264:	20004198 	.word	0x20004198
 8001268:	2000418c 	.word	0x2000418c
 800126c:	20004192 	.word	0x20004192
 8001270:	200041a4 	.word	0x200041a4
 8001274:	200041d8 	.word	0x200041d8
 8001278:	2000418e 	.word	0x2000418e
 800127c:	200041d2 	.word	0x200041d2
 8001280:	200041b4 	.word	0x200041b4
 8001284:	200041c4 	.word	0x200041c4
 8001288:	20004188 	.word	0x20004188
 800128c:	00000000 	.word	0x00000000

08001290 <BMP180_GetPressure>:

uint16_t BMP180_GetPressure()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af04      	add	r7, sp, #16
	uint8_t rData[3]={0};
 8001296:	4bba      	ldr	r3, [pc, #744]	; (8001580 <BMP180_GetPressure+0x2f0>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	80bb      	strh	r3, [r7, #4]
 800129c:	2300      	movs	r3, #0
 800129e:	71bb      	strb	r3, [r7, #6]
	uint8_t wData[1];
	wData[0] = 0x34 | (0x03 << 6);
 80012a0:	23f4      	movs	r3, #244	; 0xf4
 80012a2:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c2, BMP180_WRITE_ADD, 0xF4, 1, wData, 1, HAL_MAX_DELAY);
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	463b      	mov	r3, r7
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	22f4      	movs	r2, #244	; 0xf4
 80012b6:	21ee      	movs	r1, #238	; 0xee
 80012b8:	48b2      	ldr	r0, [pc, #712]	; (8001584 <BMP180_GetPressure+0x2f4>)
 80012ba:	f002 f8a5 	bl	8003408 <HAL_I2C_Mem_Write>
	HAL_Delay(26);
 80012be:	201a      	movs	r0, #26
 80012c0:	f000 ff50 	bl	8002164 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c2,BMP180_READ_ADD,0xF6,1,rData,3,HAL_MAX_DELAY);
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2303      	movs	r3, #3
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	22f6      	movs	r2, #246	; 0xf6
 80012d6:	21ef      	movs	r1, #239	; 0xef
 80012d8:	48aa      	ldr	r0, [pc, #680]	; (8001584 <BMP180_GetPressure+0x2f4>)
 80012da:	f002 f98f 	bl	80035fc <HAL_I2C_Mem_Read>
	uncPressure = (rData[0] << 16 | rData[1] << 8 | rData[2]) >> (8 - (uint8_t)(0x03));
 80012de:	793b      	ldrb	r3, [r7, #4]
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	4313      	orrs	r3, r2
 80012e8:	79ba      	ldrb	r2, [r7, #6]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	115b      	asrs	r3, r3, #5
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4ba5      	ldr	r3, [pc, #660]	; (8001588 <BMP180_GetPressure+0x2f8>)
 80012f2:	801a      	strh	r2, [r3, #0]

	pB6 = tB5 - 4000;
 80012f4:	4ba5      	ldr	r3, [pc, #660]	; (800158c <BMP180_GetPressure+0x2fc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80012fc:	4aa4      	ldr	r2, [pc, #656]	; (8001590 <BMP180_GetPressure+0x300>)
 80012fe:	6013      	str	r3, [r2, #0]
	pX1 = ( B2 * (pB6*pB6/4096))/2048;
 8001300:	4ba4      	ldr	r3, [pc, #656]	; (8001594 <BMP180_GetPressure+0x304>)
 8001302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001306:	4619      	mov	r1, r3
 8001308:	4ba1      	ldr	r3, [pc, #644]	; (8001590 <BMP180_GetPressure+0x300>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4aa0      	ldr	r2, [pc, #640]	; (8001590 <BMP180_GetPressure+0x300>)
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	da01      	bge.n	800131c <BMP180_GetPressure+0x8c>
 8001318:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800131c:	131b      	asrs	r3, r3, #12
 800131e:	fb03 f301 	mul.w	r3, r3, r1
 8001322:	2b00      	cmp	r3, #0
 8001324:	da01      	bge.n	800132a <BMP180_GetPressure+0x9a>
 8001326:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800132a:	12db      	asrs	r3, r3, #11
 800132c:	461a      	mov	r2, r3
 800132e:	4b9a      	ldr	r3, [pc, #616]	; (8001598 <BMP180_GetPressure+0x308>)
 8001330:	601a      	str	r2, [r3, #0]
	pX2 = AC2 * pB6 / 2048;
 8001332:	4b9a      	ldr	r3, [pc, #616]	; (800159c <BMP180_GetPressure+0x30c>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	461a      	mov	r2, r3
 800133a:	4b95      	ldr	r3, [pc, #596]	; (8001590 <BMP180_GetPressure+0x300>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	fb03 f302 	mul.w	r3, r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	da01      	bge.n	800134a <BMP180_GetPressure+0xba>
 8001346:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800134a:	12db      	asrs	r3, r3, #11
 800134c:	461a      	mov	r2, r3
 800134e:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <BMP180_GetPressure+0x310>)
 8001350:	601a      	str	r2, [r3, #0]
	pX3 = pX1 + pX2;
 8001352:	4b91      	ldr	r3, [pc, #580]	; (8001598 <BMP180_GetPressure+0x308>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b92      	ldr	r3, [pc, #584]	; (80015a0 <BMP180_GetPressure+0x310>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a91      	ldr	r2, [pc, #580]	; (80015a4 <BMP180_GetPressure+0x314>)
 800135e:	6013      	str	r3, [r2, #0]
	pB3 = (((AC1*4 + pX3) << 0x03)+2)/4;
 8001360:	4b91      	ldr	r3, [pc, #580]	; (80015a8 <BMP180_GetPressure+0x318>)
 8001362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001366:	009a      	lsls	r2, r3, #2
 8001368:	4b8e      	ldr	r3, [pc, #568]	; (80015a4 <BMP180_GetPressure+0x314>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	3302      	adds	r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	da00      	bge.n	8001378 <BMP180_GetPressure+0xe8>
 8001376:	3303      	adds	r3, #3
 8001378:	109b      	asrs	r3, r3, #2
 800137a:	461a      	mov	r2, r3
 800137c:	4b8b      	ldr	r3, [pc, #556]	; (80015ac <BMP180_GetPressure+0x31c>)
 800137e:	601a      	str	r2, [r3, #0]
	pX1 = AC3 * pB6 / 8192;
 8001380:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <BMP180_GetPressure+0x320>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	461a      	mov	r2, r3
 8001388:	4b81      	ldr	r3, [pc, #516]	; (8001590 <BMP180_GetPressure+0x300>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fb03 f302 	mul.w	r3, r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	da02      	bge.n	800139a <BMP180_GetPressure+0x10a>
 8001394:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001398:	331f      	adds	r3, #31
 800139a:	135b      	asrs	r3, r3, #13
 800139c:	461a      	mov	r2, r3
 800139e:	4b7e      	ldr	r3, [pc, #504]	; (8001598 <BMP180_GetPressure+0x308>)
 80013a0:	601a      	str	r2, [r3, #0]
	pX2 = (B1 * (pB6*pB6/4096))/65536;
 80013a2:	4b84      	ldr	r3, [pc, #528]	; (80015b4 <BMP180_GetPressure+0x324>)
 80013a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <BMP180_GetPressure+0x300>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a78      	ldr	r2, [pc, #480]	; (8001590 <BMP180_GetPressure+0x300>)
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da01      	bge.n	80013be <BMP180_GetPressure+0x12e>
 80013ba:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013be:	131b      	asrs	r3, r3, #12
 80013c0:	fb03 f301 	mul.w	r3, r3, r1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	da02      	bge.n	80013ce <BMP180_GetPressure+0x13e>
 80013c8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013cc:	33ff      	adds	r3, #255	; 0xff
 80013ce:	141b      	asrs	r3, r3, #16
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <BMP180_GetPressure+0x310>)
 80013d4:	601a      	str	r2, [r3, #0]
	pX3 = ((pX1 + pX2)+2)/4;
 80013d6:	4b70      	ldr	r3, [pc, #448]	; (8001598 <BMP180_GetPressure+0x308>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b71      	ldr	r3, [pc, #452]	; (80015a0 <BMP180_GetPressure+0x310>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	3302      	adds	r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da00      	bge.n	80013e8 <BMP180_GetPressure+0x158>
 80013e6:	3303      	adds	r3, #3
 80013e8:	109b      	asrs	r3, r3, #2
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b6d      	ldr	r3, [pc, #436]	; (80015a4 <BMP180_GetPressure+0x314>)
 80013ee:	601a      	str	r2, [r3, #0]
	pB4 = AC4 * (signed long)(pX3+32768)/32768;
 80013f0:	4b71      	ldr	r3, [pc, #452]	; (80015b8 <BMP180_GetPressure+0x328>)
 80013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <BMP180_GetPressure+0x314>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001400:	fb03 f302 	mul.w	r3, r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	da02      	bge.n	800140e <BMP180_GetPressure+0x17e>
 8001408:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800140c:	337f      	adds	r3, #127	; 0x7f
 800140e:	13db      	asrs	r3, r3, #15
 8001410:	461a      	mov	r2, r3
 8001412:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <BMP180_GetPressure+0x32c>)
 8001414:	601a      	str	r2, [r3, #0]
	pB7 = ((signed long)uncPressure - pB3) * (50000>>0x03);
 8001416:	4b5c      	ldr	r3, [pc, #368]	; (8001588 <BMP180_GetPressure+0x2f8>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	461a      	mov	r2, r3
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <BMP180_GetPressure+0x31c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f641 026a 	movw	r2, #6250	; 0x186a
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a64      	ldr	r2, [pc, #400]	; (80015c0 <BMP180_GetPressure+0x330>)
 800142e:	6013      	str	r3, [r2, #0]
	if(pB7 < 0x80000000 && pB4 != 0)
 8001430:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <BMP180_GetPressure+0x330>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db12      	blt.n	800145e <BMP180_GetPressure+0x1ce>
 8001438:	4b60      	ldr	r3, [pc, #384]	; (80015bc <BMP180_GetPressure+0x32c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00e      	beq.n	800145e <BMP180_GetPressure+0x1ce>
	{
		comPressure = (pB7 * 2) / pB4;
 8001440:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <BMP180_GetPressure+0x330>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	005a      	lsls	r2, r3, #1
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <BMP180_GetPressure+0x32c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fb92 f3f3 	sdiv	r3, r2, r3
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <BMP180_GetPressure+0x334>)
 8001458:	edc3 7a00 	vstr	s15, [r3]
 800145c:	e00d      	b.n	800147a <BMP180_GetPressure+0x1ea>
	}
	else{
		comPressure = (pB7/pB4)*2;
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <BMP180_GetPressure+0x330>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b56      	ldr	r3, [pc, #344]	; (80015bc <BMP180_GetPressure+0x32c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	fb92 f3f3 	sdiv	r3, r2, r3
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <BMP180_GetPressure+0x334>)
 8001476:	edc3 7a00 	vstr	s15, [r3]
	}

	pX1 = (comPressure/256)*(comPressure/256);
 800147a:	4b52      	ldr	r3, [pc, #328]	; (80015c4 <BMP180_GetPressure+0x334>)
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	eddf 6a51 	vldr	s13, [pc, #324]	; 80015c8 <BMP180_GetPressure+0x338>
 8001484:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001488:	4b4e      	ldr	r3, [pc, #312]	; (80015c4 <BMP180_GetPressure+0x334>)
 800148a:	edd3 6a00 	vldr	s13, [r3]
 800148e:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80015c8 <BMP180_GetPressure+0x338>
 8001492:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149e:	ee17 2a90 	vmov	r2, s15
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <BMP180_GetPressure+0x308>)
 80014a4:	601a      	str	r2, [r3, #0]
	pX1 = (pX1*3038)/65536;
 80014a6:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <BMP180_GetPressure+0x308>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f640 32de 	movw	r2, #3038	; 0xbde
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da02      	bge.n	80014bc <BMP180_GetPressure+0x22c>
 80014b6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014ba:	33ff      	adds	r3, #255	; 0xff
 80014bc:	141b      	asrs	r3, r3, #16
 80014be:	461a      	mov	r2, r3
 80014c0:	4b35      	ldr	r3, [pc, #212]	; (8001598 <BMP180_GetPressure+0x308>)
 80014c2:	601a      	str	r2, [r3, #0]
	pX2 = (-7357 * comPressure)/65536;
 80014c4:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <BMP180_GetPressure+0x334>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80015cc <BMP180_GetPressure+0x33c>
 80014ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d2:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80015d0 <BMP180_GetPressure+0x340>
 80014d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014de:	ee17 2a90 	vmov	r2, s15
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <BMP180_GetPressure+0x310>)
 80014e4:	601a      	str	r2, [r3, #0]
	comPressure = (comPressure + (pX1 + pX2 +3791)/16)/21.879;//hectopascal
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <BMP180_GetPressure+0x308>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <BMP180_GetPressure+0x310>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da00      	bge.n	80014fa <BMP180_GetPressure+0x26a>
 80014f8:	330f      	adds	r3, #15
 80014fa:	111b      	asrs	r3, r3, #4
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <BMP180_GetPressure+0x334>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	ee17 0a90 	vmov	r0, s15
 8001512:	f7ff f829 	bl	8000568 <__aeabi_f2d>
 8001516:	a316      	add	r3, pc, #88	; (adr r3, 8001570 <BMP180_GetPressure+0x2e0>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f9a6 	bl	800086c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fa88 	bl	8000a3c <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <BMP180_GetPressure+0x334>)
 8001530:	6013      	str	r3, [r2, #0]
	comPressure = comPressure/1013.2501;//atm
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <BMP180_GetPressure+0x334>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f816 	bl	8000568 <__aeabi_f2d>
 800153c:	a30e      	add	r3, pc, #56	; (adr r3, 8001578 <BMP180_GetPressure+0x2e8>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f993 	bl	800086c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fa75 	bl	8000a3c <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <BMP180_GetPressure+0x334>)
 8001556:	6013      	str	r3, [r2, #0]
	return comPressure;
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <BMP180_GetPressure+0x334>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001562:	ee17 3a90 	vmov	r3, s15
 8001566:	b29b      	uxth	r3, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	24dd2f1b 	.word	0x24dd2f1b
 8001574:	4035e106 	.word	0x4035e106
 8001578:	346dc5d6 	.word	0x346dc5d6
 800157c:	408faa00 	.word	0x408faa00
 8001580:	08008994 	.word	0x08008994
 8001584:	200041e4 	.word	0x200041e4
 8001588:	200041ac 	.word	0x200041ac
 800158c:	200041c4 	.word	0x200041c4
 8001590:	200041cc 	.word	0x200041cc
 8001594:	200041c2 	.word	0x200041c2
 8001598:	200041b0 	.word	0x200041b0
 800159c:	200041be 	.word	0x200041be
 80015a0:	200041a0 	.word	0x200041a0
 80015a4:	200041b8 	.word	0x200041b8
 80015a8:	20004190 	.word	0x20004190
 80015ac:	20004194 	.word	0x20004194
 80015b0:	200041c0 	.word	0x200041c0
 80015b4:	200041d0 	.word	0x200041d0
 80015b8:	200041ae 	.word	0x200041ae
 80015bc:	200041d4 	.word	0x200041d4
 80015c0:	200041c8 	.word	0x200041c8
 80015c4:	2000419c 	.word	0x2000419c
 80015c8:	43800000 	.word	0x43800000
 80015cc:	c5e5e800 	.word	0xc5e5e800
 80015d0:	47800000 	.word	0x47800000

080015d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <vApplicationGetIdleTaskMemory+0x2c>)
 80015e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <vApplicationGetIdleTaskMemory+0x30>)
 80015ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000090 	.word	0x20000090
 8001604:	200000e4 	.word	0x200000e4

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b098      	sub	sp, #96	; 0x60
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160e:	f000 fd67 	bl	80020e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001612:	f000 f85f 	bl	80016d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001616:	f000 f9a9 	bl	800196c <MX_GPIO_Init>
  MX_DMA_Init();
 800161a:	f000 f987 	bl	800192c <MX_DMA_Init>
  MX_UART4_Init();
 800161e:	f000 f95b 	bl	80018d8 <MX_UART4_Init>
  MX_I2C2_Init();
 8001622:	f000 f919 	bl	8001858 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001626:	f000 f8c5 	bl	80017b4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of mutexUart */
  osMutexDef(mutexUart);
 800162a:	2300      	movs	r3, #0
 800162c:	65bb      	str	r3, [r7, #88]	; 0x58
 800162e:	2300      	movs	r3, #0
 8001630:	65fb      	str	r3, [r7, #92]	; 0x5c
  mutexUartHandle = osMutexCreate(osMutex(mutexUart));
 8001632:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001636:	4618      	mov	r0, r3
 8001638:	f004 fa05 	bl	8005a46 <osMutexCreate>
 800163c:	4603      	mov	r3, r0
 800163e:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <main+0xb0>)
 8001640:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <main+0xb4>)
 8001644:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001648:	461d      	mov	r5, r3
 800164a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001656:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f004 f992 	bl	8005986 <osThreadCreate>
 8001662:	4603      	mov	r3, r0
 8001664:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <main+0xb8>)
 8001666:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskAnalog */
  osThreadDef(taskAnalog, taskFuncAnalog, osPriorityNormal, 0, 512);
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <main+0xbc>)
 800166a:	f107 0420 	add.w	r4, r7, #32
 800166e:	461d      	mov	r5, r3
 8001670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskAnalogHandle = osThreadCreate(osThread(taskAnalog), NULL);
 800167c:	f107 0320 	add.w	r3, r7, #32
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f004 f97f 	bl	8005986 <osThreadCreate>
 8001688:	4603      	mov	r3, r0
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <main+0xc0>)
 800168c:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskBMP */
  osThreadDef(taskBMP, taskFuncBMP, osPriorityNormal, 0, 512);
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <main+0xc4>)
 8001690:	1d3c      	adds	r4, r7, #4
 8001692:	461d      	mov	r5, r3
 8001694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800169c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskBMPHandle = osThreadCreate(osThread(taskBMP), NULL);
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 f96e 	bl	8005986 <osThreadCreate>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <main+0xc8>)
 80016ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016b0:	f004 f962 	bl	8005978 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <main+0xac>
 80016b6:	bf00      	nop
 80016b8:	200042f0 	.word	0x200042f0
 80016bc:	080089b8 	.word	0x080089b8
 80016c0:	200041dc 	.word	0x200041dc
 80016c4:	080089d4 	.word	0x080089d4
 80016c8:	2000423c 	.word	0x2000423c
 80016cc:	080089f0 	.word	0x080089f0
 80016d0:	200042ec 	.word	0x200042ec

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	; 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f006 fd22 	bl	800812c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <SystemClock_Config+0xd8>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a2a      	ldr	r2, [pc, #168]	; (80017ac <SystemClock_Config+0xd8>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <SystemClock_Config+0xd8>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <SystemClock_Config+0xdc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <SystemClock_Config+0xdc>)
 800171e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <SystemClock_Config+0xdc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001730:	2302      	movs	r3, #2
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001734:	2301      	movs	r3, #1
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001738:	2310      	movs	r3, #16
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173c:	2302      	movs	r3, #2
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001740:	2300      	movs	r3, #0
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001744:	2308      	movs	r3, #8
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001748:	23b4      	movs	r3, #180	; 0xb4
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fec9 	bl	80044f0 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001764:	f000 fa8c 	bl	8001c80 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001768:	f002 fe72 	bl	8004450 <HAL_PWREx_EnableOverDrive>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001772:	f000 fa85 	bl	8001c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001776:	230f      	movs	r3, #15
 8001778:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177a:	2302      	movs	r3, #2
 800177c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	2105      	movs	r1, #5
 8001794:	4618      	mov	r0, r3
 8001796:	f003 f923 	bl	80049e0 <HAL_RCC_ClockConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80017a0:	f000 fa6e 	bl	8001c80 <Error_Handler>
  }
}
 80017a4:	bf00      	nop
 80017a6:	3750      	adds	r7, #80	; 0x50
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000

080017b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ba:	463b      	mov	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_ADC1_Init+0x98>)
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <MX_ADC1_Init+0x9c>)
 80017ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_ADC1_Init+0x98>)
 80017ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_ADC1_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_ADC1_Init+0x98>)
 80017dc:	2201      	movs	r2, #1
 80017de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_ADC1_Init+0x98>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_ADC1_Init+0x98>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_ADC1_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_ADC1_Init+0x98>)
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <MX_ADC1_Init+0xa0>)
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_ADC1_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_ADC1_Init+0x98>)
 8001802:	2201      	movs	r2, #1
 8001804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_ADC1_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_ADC1_Init+0x98>)
 8001810:	2201      	movs	r2, #1
 8001812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_ADC1_Init+0x98>)
 8001816:	f000 fcc9 	bl	80021ac <HAL_ADC_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001820:	f000 fa2e 	bl	8001c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001824:	2306      	movs	r3, #6
 8001826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001828:	2301      	movs	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_ADC1_Init+0x98>)
 8001836:	f000 fcfd 	bl	8002234 <HAL_ADC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001840:	f000 fa1e 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20004244 	.word	0x20004244
 8001850:	40012000 	.word	0x40012000
 8001854:	0f000001 	.word	0x0f000001

08001858 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_I2C2_Init+0x74>)
 800185e:	4a1c      	ldr	r2, [pc, #112]	; (80018d0 <MX_I2C2_Init+0x78>)
 8001860:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_I2C2_Init+0x74>)
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <MX_I2C2_Init+0x7c>)
 8001866:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_I2C2_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_I2C2_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_I2C2_Init+0x74>)
 8001876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_I2C2_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_I2C2_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_I2C2_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_I2C2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_I2C2_Init+0x74>)
 8001896:	f001 fc73 	bl	8003180 <HAL_I2C_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018a0:	f000 f9ee 	bl	8001c80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a4:	2100      	movs	r1, #0
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <MX_I2C2_Init+0x74>)
 80018a8:	f002 fd57 	bl	800435a <HAL_I2CEx_ConfigAnalogFilter>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80018b2:	f000 f9e5 	bl	8001c80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_I2C2_Init+0x74>)
 80018ba:	f002 fd8a 	bl	80043d2 <HAL_I2CEx_ConfigDigitalFilter>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80018c4:	f000 f9dc 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200041e4 	.word	0x200041e4
 80018d0:	40005800 	.word	0x40005800
 80018d4:	000186a0 	.word	0x000186a0

080018d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_UART4_Init+0x4c>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_UART4_Init+0x50>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_UART4_Init+0x4c>)
 80018e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_UART4_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_UART4_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_UART4_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_UART4_Init+0x4c>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_UART4_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_UART4_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_UART4_Init+0x4c>)
 8001910:	f003 fd16 	bl	8005340 <HAL_UART_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800191a:	f000 f9b1 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200042f4 	.word	0x200042f4
 8001928:	40004c00 	.word	0x40004c00

0800192c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_DMA_Init+0x3c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <MX_DMA_Init+0x3c>)
 800193c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_DMA_Init+0x3c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2105      	movs	r1, #5
 8001952:	2038      	movs	r0, #56	; 0x38
 8001954:	f000 ff54 	bl	8002800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001958:	2038      	movs	r0, #56	; 0x38
 800195a:	f000 ff6d 	bl	8002838 <HAL_NVIC_EnableIRQ>

}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <MX_GPIO_Init+0x68>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <MX_GPIO_Init+0x68>)
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_GPIO_Init+0x68>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_GPIO_Init+0x68>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <MX_GPIO_Init+0x68>)
 8001998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <MX_GPIO_Init+0x68>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_GPIO_Init+0x68>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <MX_GPIO_Init+0x68>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_GPIO_Init+0x68>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]

}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <printXmlHeader>:

/* USER CODE BEGIN 4 */
void printXmlHeader()
{
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
	char header[]="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <printXmlHeader+0x3c>)
 80019e0:	463c      	mov	r4, r7
 80019e2:	461d      	mov	r5, r3
 80019e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019f0:	e884 0003 	stmia.w	r4, {r0, r1}

	HAL_UART_Transmit(&huart4, (uint8_t*)&header, strlen(header), 1000);
 80019f4:	463b      	mov	r3, r7
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fbfa 	bl	80001f0 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4639      	mov	r1, r7
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <printXmlHeader+0x40>)
 8001a08:	f003 fce7 	bl	80053da <HAL_UART_Transmit>
}
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bdb0      	pop	{r4, r5, r7, pc}
 8001a14:	08008a0c 	.word	0x08008a0c
 8001a18:	200042f4 	.word	0x200042f4

08001a1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*osMutexWait(mutexUartHandle, osWaitForever);
	HAL_UART_Transmit(&huart4, (uint8_t*)&dataStart, strlen(dataStart), 1000);
	osMutexRelease(mutexUartHandle);*/
    osDelay(50);
 8001a24:	2032      	movs	r0, #50	; 0x32
 8001a26:	f003 fffa 	bl	8005a1e <osDelay>
 8001a2a:	e7fb      	b.n	8001a24 <StartDefaultTask+0x8>

08001a2c <taskFuncAnalog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskFuncAnalog */
void taskFuncAnalog(void const * argument)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  //osSemaphoreRelease(semaphoreXmlHandle);
  /* Infinite loop */
  for(;;)
  {

	osMutexWait(mutexUartHandle, osWaitForever);
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <taskFuncAnalog+0xa0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 f81b 	bl	8005a78 <osMutexWait>
	if(semaphorePrimitive==0)
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <taskFuncAnalog+0xa4>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d137      	bne.n	8001aba <taskFuncAnalog+0x8e>
	{
		if(xmlHeader=0)
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <taskFuncAnalog+0xa8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <taskFuncAnalog+0xa8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d015      	beq.n	8001a84 <taskFuncAnalog+0x58>
		{
			printXmlHeader();
 8001a58:	f7ff ffbe 	bl	80019d8 <printXmlHeader>
			++xmlHeader;
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <taskFuncAnalog+0xa8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <taskFuncAnalog+0xa8>)
 8001a64:	6013      	str	r3, [r2, #0]
			sprintf(uartMsg, "<uartXmlData>\n");
 8001a66:	491c      	ldr	r1, [pc, #112]	; (8001ad8 <taskFuncAnalog+0xac>)
 8001a68:	481c      	ldr	r0, [pc, #112]	; (8001adc <taskFuncAnalog+0xb0>)
 8001a6a:	f006 fb67 	bl	800813c <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*)&uartMsg, strlen(uartMsg), HAL_MAX_DELAY);
 8001a6e:	481b      	ldr	r0, [pc, #108]	; (8001adc <taskFuncAnalog+0xb0>)
 8001a70:	f7fe fbbe 	bl	80001f0 <strlen>
 8001a74:	4603      	mov	r3, r0
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	4917      	ldr	r1, [pc, #92]	; (8001adc <taskFuncAnalog+0xb0>)
 8001a7e:	4818      	ldr	r0, [pc, #96]	; (8001ae0 <taskFuncAnalog+0xb4>)
 8001a80:	f003 fcab 	bl	80053da <HAL_UART_Transmit>
		}
		sprintf(uartMsg, "<context id=\"Analog\">\n<sensorName>AnalogPin</sensorName>\n<value>%d</value>\n<sampleNumber>%d</sampleNumber>\n</context>\n", analogData, analogSample);
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <taskFuncAnalog+0xb8>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <taskFuncAnalog+0xbc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4917      	ldr	r1, [pc, #92]	; (8001aec <taskFuncAnalog+0xc0>)
 8001a8e:	4813      	ldr	r0, [pc, #76]	; (8001adc <taskFuncAnalog+0xb0>)
 8001a90:	f006 fb54 	bl	800813c <siprintf>
		++analogSample;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <taskFuncAnalog+0xbc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <taskFuncAnalog+0xbc>)
 8001a9c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart4, (uint8_t*)&uartMsg, strlen(uartMsg), HAL_MAX_DELAY);
 8001a9e:	480f      	ldr	r0, [pc, #60]	; (8001adc <taskFuncAnalog+0xb0>)
 8001aa0:	f7fe fba6 	bl	80001f0 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	490b      	ldr	r1, [pc, #44]	; (8001adc <taskFuncAnalog+0xb0>)
 8001aae:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <taskFuncAnalog+0xb4>)
 8001ab0:	f003 fc93 	bl	80053da <HAL_UART_Transmit>
		semaphorePrimitive=1;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <taskFuncAnalog+0xa4>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
	}
	osMutexRelease(mutexUartHandle);
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <taskFuncAnalog+0xa0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 f828 	bl	8005b14 <osMutexRelease>

    osDelay(50);
 8001ac4:	2032      	movs	r0, #50	; 0x32
 8001ac6:	f003 ffaa 	bl	8005a1e <osDelay>
	osMutexWait(mutexUartHandle, osWaitForever);
 8001aca:	e7b3      	b.n	8001a34 <taskFuncAnalog+0x8>
 8001acc:	200042f0 	.word	0x200042f0
 8001ad0:	200002e4 	.word	0x200002e4
 8001ad4:	200002e8 	.word	0x200002e8
 8001ad8:	08008a34 	.word	0x08008a34
 8001adc:	200002ec 	.word	0x200002ec
 8001ae0:	200042f4 	.word	0x200042f4
 8001ae4:	20000384 	.word	0x20000384
 8001ae8:	20000388 	.word	0x20000388
 8001aec:	08008a44 	.word	0x08008a44

08001af0 <taskFuncBMP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskFuncBMP */
void taskFuncBMP(void const * argument)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskFuncBMP */
  static char uartMsg[150];
  BMP180_Init();
 8001af8:	f7ff f96c 	bl	8000dd4 <BMP180_Init>
  static int sampleCounter=0;
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(mutexUartHandle, osWaitForever);
 8001afc:	4b48      	ldr	r3, [pc, #288]	; (8001c20 <taskFuncBMP+0x130>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 ffb7 	bl	8005a78 <osMutexWait>
	  BMP180_GetTemperature();
 8001b0a:	f7ff fb29 	bl	8001160 <BMP180_GetTemperature>
	  BMP180_GetPressure();
 8001b0e:	f7ff fbbf 	bl	8001290 <BMP180_GetPressure>
	  temperature=comTemp*0.1;
 8001b12:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <taskFuncBMP+0x134>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd26 	bl	8000568 <__aeabi_f2d>
 8001b1c:	a33e      	add	r3, pc, #248	; (adr r3, 8001c18 <taskFuncBMP+0x128>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd79 	bl	8000618 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7fe ff85 	bl	8000a3c <__aeabi_d2f>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a3c      	ldr	r2, [pc, #240]	; (8001c28 <taskFuncBMP+0x138>)
 8001b36:	6013      	str	r3, [r2, #0]
	  tempInt1 = temperature;
 8001b38:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <taskFuncBMP+0x138>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b42:	ee17 2a90 	vmov	r2, s15
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <taskFuncBMP+0x13c>)
 8001b48:	601a      	str	r2, [r3, #0]
	  tempFrac = temperature-tempInt1;
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <taskFuncBMP+0x138>)
 8001b4c:	ed93 7a00 	vldr	s14, [r3]
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <taskFuncBMP+0x13c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b60:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <taskFuncBMP+0x140>)
 8001b62:	edc3 7a00 	vstr	s15, [r3]
	  tempInt2 = tempFrac*10000;
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <taskFuncBMP+0x140>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001c34 <taskFuncBMP+0x144>
 8001b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b78:	ee17 2a90 	vmov	r2, s15
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <taskFuncBMP+0x148>)
 8001b7e:	601a      	str	r2, [r3, #0]
	  if(semaphorePrimitive==1)
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <taskFuncBMP+0x14c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d13e      	bne.n	8001c06 <taskFuncBMP+0x116>
	  {
		  sprintf(uartMsg, "<context id=\"Temperature\">\n<sensorName>BMP180</sensorName>\n<value>%d.%d</value>\n<sampleNumber>%d</sampleNumber>\n</context>\n",tempInt1,tempInt2,sampleCounter);
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <taskFuncBMP+0x13c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <taskFuncBMP+0x148>)
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <taskFuncBMP+0x150>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	460b      	mov	r3, r1
 8001b98:	492a      	ldr	r1, [pc, #168]	; (8001c44 <taskFuncBMP+0x154>)
 8001b9a:	482b      	ldr	r0, [pc, #172]	; (8001c48 <taskFuncBMP+0x158>)
 8001b9c:	f006 face 	bl	800813c <siprintf>
		  HAL_UART_Transmit(&huart4,(uint8_t*)&uartMsg, strlen(uartMsg),HAL_MAX_DELAY);
 8001ba0:	4829      	ldr	r0, [pc, #164]	; (8001c48 <taskFuncBMP+0x158>)
 8001ba2:	f7fe fb25 	bl	80001f0 <strlen>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	4926      	ldr	r1, [pc, #152]	; (8001c48 <taskFuncBMP+0x158>)
 8001bb0:	4826      	ldr	r0, [pc, #152]	; (8001c4c <taskFuncBMP+0x15c>)
 8001bb2:	f003 fc12 	bl	80053da <HAL_UART_Transmit>
		  presInt=10000*comPressure;
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <taskFuncBMP+0x160>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001c34 <taskFuncBMP+0x144>
 8001bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	ee17 2a90 	vmov	r2, s15
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <taskFuncBMP+0x164>)
 8001bce:	601a      	str	r2, [r3, #0]
		  sprintf(uartMsg, "<context id=\"Pressure\">\n<sensorName>BMP180</sensorName>\n<value>%d</value>\n<sampleNumber>%d</sampleNumber>\n</context>\r\n",presInt,sampleCounter);
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <taskFuncBMP+0x164>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <taskFuncBMP+0x150>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	491f      	ldr	r1, [pc, #124]	; (8001c58 <taskFuncBMP+0x168>)
 8001bda:	481b      	ldr	r0, [pc, #108]	; (8001c48 <taskFuncBMP+0x158>)
 8001bdc:	f006 faae 	bl	800813c <siprintf>
		  HAL_UART_Transmit(&huart4,(uint8_t*)&uartMsg,strlen(uartMsg),HAL_MAX_DELAY);
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <taskFuncBMP+0x158>)
 8001be2:	f7fe fb05 	bl	80001f0 <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	4916      	ldr	r1, [pc, #88]	; (8001c48 <taskFuncBMP+0x158>)
 8001bf0:	4816      	ldr	r0, [pc, #88]	; (8001c4c <taskFuncBMP+0x15c>)
 8001bf2:	f003 fbf2 	bl	80053da <HAL_UART_Transmit>
		  semaphorePrimitive=0;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <taskFuncBMP+0x14c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
		  ++sampleCounter;
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <taskFuncBMP+0x150>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <taskFuncBMP+0x150>)
 8001c04:	6013      	str	r3, [r2, #0]
	  }
	  osMutexRelease(mutexUartHandle);
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <taskFuncBMP+0x130>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 ff82 	bl	8005b14 <osMutexRelease>

	osDelay(50);
 8001c10:	2032      	movs	r0, #50	; 0x32
 8001c12:	f003 ff04 	bl	8005a1e <osDelay>
	  osMutexWait(mutexUartHandle, osWaitForever);
 8001c16:	e771      	b.n	8001afc <taskFuncBMP+0xc>
 8001c18:	9999999a 	.word	0x9999999a
 8001c1c:	3fb99999 	.word	0x3fb99999
 8001c20:	200042f0 	.word	0x200042f0
 8001c24:	20004188 	.word	0x20004188
 8001c28:	20004238 	.word	0x20004238
 8001c2c:	20004338 	.word	0x20004338
 8001c30:	200041e0 	.word	0x200041e0
 8001c34:	461c4000 	.word	0x461c4000
 8001c38:	20004240 	.word	0x20004240
 8001c3c:	200002e4 	.word	0x200002e4
 8001c40:	2000038c 	.word	0x2000038c
 8001c44:	08008abc 	.word	0x08008abc
 8001c48:	20000390 	.word	0x20000390
 8001c4c:	200042f4 	.word	0x200042f4
 8001c50:	2000419c 	.word	0x2000419c
 8001c54:	2000433c 	.word	0x2000433c
 8001c58:	08008b38 	.word	0x08008b38

08001c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c6e:	f000 fa59 	bl	8002124 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40010000 	.word	0x40010000

08001c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c84:	b672      	cpsid	i
}
 8001c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <Error_Handler+0x8>
	...

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_MspInit+0x54>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_MspInit+0x54>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_MspInit+0x54>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_MspInit+0x54>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_MspInit+0x54>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_MspInit+0x54>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	210f      	movs	r1, #15
 8001cce:	f06f 0001 	mvn.w	r0, #1
 8001cd2:	f000 fd95 	bl	8002800 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_ADC_MspInit+0xdc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d157      	bne.n	8001db6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_ADC_MspInit+0xe0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d3e:	2340      	movs	r3, #64	; 0x40
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d42:	2303      	movs	r3, #3
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <HAL_ADC_MspInit+0xe4>)
 8001d52:	f001 f869 	bl	8002e28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_ADC_MspInit+0xec>)
 8001d5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d9a:	480c      	ldr	r0, [pc, #48]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001d9c:	f000 fd5a 	bl	8002854 <HAL_DMA_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001da6:	f7ff ff6b 	bl	8001c80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
 8001db0:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <HAL_ADC_MspInit+0xe8>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40012000 	.word	0x40012000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	2000428c 	.word	0x2000428c
 8001dd0:	40026410 	.word	0x40026410

08001dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_I2C_MspInit+0x84>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d12b      	bne.n	8001e4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e00:	f043 0320 	orr.w	r3, r3, #32
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e12:	2303      	movs	r3, #3
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e16:	2312      	movs	r3, #18
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e22:	2304      	movs	r3, #4
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <HAL_I2C_MspInit+0x8c>)
 8001e2e:	f000 fffb 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_I2C_MspInit+0x88>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40005800 	.word	0x40005800
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40021400 	.word	0x40021400

08001e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_UART_MspInit+0x84>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12b      	bne.n	8001ede <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_UART_MspInit+0x88>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <HAL_UART_MspInit+0x8c>)
 8001eda:	f000 ffa5 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40004c00 	.word	0x40004c00
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	; 0x30
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	2019      	movs	r0, #25
 8001f0a:	f000 fc79 	bl	8002800 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f0e:	2019      	movs	r0, #25
 8001f10:	f000 fc92 	bl	8002838 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <HAL_InitTick+0xa4>)
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <HAL_InitTick+0xa4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6453      	str	r3, [r2, #68]	; 0x44
 8001f24:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <HAL_InitTick+0xa4>)
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f30:	f107 0210 	add.w	r2, r7, #16
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 ff20 	bl	8004d80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f40:	f002 ff0a 	bl	8004d58 <HAL_RCC_GetPCLK2Freq>
 8001f44:	4603      	mov	r3, r0
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <HAL_InitTick+0xa8>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	3b01      	subs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_InitTick+0xac>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_InitTick+0xb0>)
 8001f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_InitTick+0xac>)
 8001f60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HAL_InitTick+0xac>)
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_InitTick+0xac>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_InitTick+0xac>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <HAL_InitTick+0xac>)
 8001f7a:	f002 ff33 	bl	8004de4 <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d104      	bne.n	8001f8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f84:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <HAL_InitTick+0xac>)
 8001f86:	f002 ff87 	bl	8004e98 <HAL_TIM_Base_Start_IT>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3730      	adds	r7, #48	; 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	431bde83 	.word	0x431bde83
 8001fa0:	20004340 	.word	0x20004340
 8001fa4:	40010000 	.word	0x40010000

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <NMI_Handler+0x4>

08001fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <BusFault_Handler+0x4>

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fda:	f002 ffcd 	bl	8004f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20004340 	.word	0x20004340

08001fe8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <DMA2_Stream0_IRQHandler+0x10>)
 8001fee:	f000 fcdf 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000428c 	.word	0x2000428c

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f006 f846 	bl	80080bc <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20030000 	.word	0x20030000
 800205c:	00000400 	.word	0x00000400
 8002060:	20000428 	.word	0x20000428
 8002064:	200043a0 	.word	0x200043a0

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <SystemInit+0x20>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <SystemInit+0x20>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800208c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002092:	490e      	ldr	r1, [pc, #56]	; (80020cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002098:	e002      	b.n	80020a0 <LoopCopyDataInit>

0800209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209e:	3304      	adds	r3, #4

080020a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a4:	d3f9      	bcc.n	800209a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a8:	4c0b      	ldr	r4, [pc, #44]	; (80020d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ac:	e001      	b.n	80020b2 <LoopFillZerobss>

080020ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b0:	3204      	adds	r2, #4

080020b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b4:	d3fb      	bcc.n	80020ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020b6:	f7ff ffd7 	bl	8002068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ba:	f006 f805 	bl	80080c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020be:	f7ff faa3 	bl	8001608 <main>
  bx  lr    
 80020c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80020d0:	08008c1c 	.word	0x08008c1c
  ldr r2, =_sbss
 80020d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80020d8:	2000439c 	.word	0x2000439c

080020dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC_IRQHandler>
	...

080020e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <HAL_Init+0x40>)
 80020ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_Init+0x40>)
 80020f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_Init+0x40>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002108:	2003      	movs	r0, #3
 800210a:	f000 fb6e 	bl	80027ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff fef0 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002114:	f7ff fdba 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023c00 	.word	0x40023c00

08002124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_IncTick+0x20>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_IncTick+0x24>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_IncTick+0x24>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000008 	.word	0x20000008
 8002148:	20004388 	.word	0x20004388

0800214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_GetTick+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20004388 	.word	0x20004388

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d005      	beq.n	800218a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_Delay+0x44>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800218a:	bf00      	nop
 800218c:	f7ff ffde 	bl	800214c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d8f7      	bhi.n	800218c <HAL_Delay+0x28>
  {
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000008 	.word	0x20000008

080021ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e033      	b.n	800222a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fd8a 	bl	8001ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	f043 0202 	orr.w	r2, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f94a 	bl	8002498 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
 800221a:	e001      	b.n	8002220 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x1c>
 800224c:	2302      	movs	r3, #2
 800224e:	e113      	b.n	8002478 <HAL_ADC_ConfigChannel+0x244>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b09      	cmp	r3, #9
 800225e:	d925      	bls.n	80022ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68d9      	ldr	r1, [r3, #12]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	3b1e      	subs	r3, #30
 8002276:	2207      	movs	r2, #7
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43da      	mvns	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	400a      	ands	r2, r1
 8002284:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68d9      	ldr	r1, [r3, #12]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	4603      	mov	r3, r0
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4403      	add	r3, r0
 800229e:	3b1e      	subs	r3, #30
 80022a0:	409a      	lsls	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	e022      	b.n	80022f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6919      	ldr	r1, [r3, #16]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	2207      	movs	r2, #7
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	400a      	ands	r2, r1
 80022ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6919      	ldr	r1, [r3, #16]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4403      	add	r3, r0
 80022e8:	409a      	lsls	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d824      	bhi.n	8002344 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b05      	subs	r3, #5
 800230c:	221f      	movs	r2, #31
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	3b05      	subs	r3, #5
 8002336:	fa00 f203 	lsl.w	r2, r0, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
 8002342:	e04c      	b.n	80023de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d824      	bhi.n	8002396 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	3b23      	subs	r3, #35	; 0x23
 800235e:	221f      	movs	r2, #31
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43da      	mvns	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	400a      	ands	r2, r1
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	4618      	mov	r0, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	3b23      	subs	r3, #35	; 0x23
 8002388:	fa00 f203 	lsl.w	r2, r0, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
 8002394:	e023      	b.n	80023de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b41      	subs	r3, #65	; 0x41
 80023a8:	221f      	movs	r2, #31
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	400a      	ands	r2, r1
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	3b41      	subs	r3, #65	; 0x41
 80023d2:	fa00 f203 	lsl.w	r2, r0, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_ADC_ConfigChannel+0x250>)
 80023e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <HAL_ADC_ConfigChannel+0x254>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d10f      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d8>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b12      	cmp	r3, #18
 80023f2:	d10b      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_ADC_ConfigChannel+0x254>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12b      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_ADC_ConfigChannel+0x258>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d003      	beq.n	8002428 <HAL_ADC_ConfigChannel+0x1f4>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b11      	cmp	r3, #17
 8002426:	d122      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a11      	ldr	r2, [pc, #68]	; (800248c <HAL_ADC_ConfigChannel+0x258>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d111      	bne.n	800246e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_ADC_ConfigChannel+0x25c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a11      	ldr	r2, [pc, #68]	; (8002494 <HAL_ADC_ConfigChannel+0x260>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	0c9a      	lsrs	r2, r3, #18
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002460:	e002      	b.n	8002468 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40012300 	.word	0x40012300
 8002488:	40012000 	.word	0x40012000
 800248c:	10000012 	.word	0x10000012
 8002490:	20000000 	.word	0x20000000
 8002494:	431bde83 	.word	0x431bde83

08002498 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a0:	4b79      	ldr	r3, [pc, #484]	; (8002688 <ADC_Init+0x1f0>)
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	021a      	lsls	r2, r3, #8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <ADC_Init+0x1f4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e00f      	b.n	8002596 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002594:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0202 	bic.w	r2, r2, #2
 80025a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6899      	ldr	r1, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e1b      	ldrb	r3, [r3, #24]
 80025b0:	005a      	lsls	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	3b01      	subs	r3, #1
 80025f0:	035a      	lsls	r2, r3, #13
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e007      	b.n	800260c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	3b01      	subs	r3, #1
 8002628:	051a      	lsls	r2, r3, #20
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800264e:	025a      	lsls	r2, r3, #9
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	029a      	lsls	r2, r3, #10
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40012300 	.word	0x40012300
 800268c:	0f000001 	.word	0x0f000001

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff4c 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002812:	f7ff ff61 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 8002816:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f7ff ffb1 	bl	8002784 <NVIC_EncodePriority>
 8002822:	4602      	mov	r2, r0
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff80 	bl	8002730 <__NVIC_SetPriority>
}
 8002830:	bf00      	nop
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff54 	bl	80026f4 <__NVIC_EnableIRQ>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff fc74 	bl	800214c <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e099      	b.n	80029a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002890:	e00f      	b.n	80028b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002892:	f7ff fc5b 	bl	800214c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b05      	cmp	r3, #5
 800289e:	d908      	bls.n	80028b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2203      	movs	r2, #3
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e078      	b.n	80029a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e8      	bne.n	8002892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4b38      	ldr	r3, [pc, #224]	; (80029ac <HAL_DMA_Init+0x158>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2b04      	cmp	r3, #4
 800290a:	d107      	bne.n	800291c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	4313      	orrs	r3, r2
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f023 0307 	bic.w	r3, r3, #7
 8002932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b04      	cmp	r3, #4
 8002944:	d117      	bne.n	8002976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00e      	beq.n	8002976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f9e9 	bl	8002d30 <DMA_CheckFifoParam>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2240      	movs	r2, #64	; 0x40
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002972:	2301      	movs	r3, #1
 8002974:	e016      	b.n	80029a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f9a0 	bl	8002cc4 <DMA_CalcBaseAndBitshift>
 8002984:	4603      	mov	r3, r0
 8002986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	223f      	movs	r2, #63	; 0x3f
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	f010803f 	.word	0xf010803f

080029b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029bc:	4b92      	ldr	r3, [pc, #584]	; (8002c08 <HAL_DMA_IRQHandler+0x258>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a92      	ldr	r2, [pc, #584]	; (8002c0c <HAL_DMA_IRQHandler+0x25c>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0a9b      	lsrs	r3, r3, #10
 80029c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	2208      	movs	r2, #8
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01a      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0204 	bic.w	r2, r2, #4
 8002a02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	2208      	movs	r2, #8
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	2201      	movs	r2, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d012      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2201      	movs	r2, #1
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	f043 0202 	orr.w	r2, r3, #2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2204      	movs	r2, #4
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2204      	movs	r2, #4
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0204 	orr.w	r2, r3, #4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d043      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03c      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2210      	movs	r2, #16
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d018      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d108      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d024      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
 8002ade:	e01f      	b.n	8002b20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
 8002af0:	e016      	b.n	8002b20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0208 	bic.w	r2, r2, #8
 8002b0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2220      	movs	r2, #32
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 808e 	beq.w	8002c4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8086 	beq.w	8002c4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2220      	movs	r2, #32
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d136      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0216 	bic.w	r2, r2, #22
 8002b68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <HAL_DMA_IRQHandler+0x1da>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0208 	bic.w	r2, r2, #8
 8002b98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	223f      	movs	r2, #63	; 0x3f
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d07d      	beq.n	8002cba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
        }
        return;
 8002bc6:	e078      	b.n	8002cba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01c      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d108      	bne.n	8002bf6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d030      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	e02b      	b.n	8002c4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d027      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
 8002c06:	e022      	b.n	8002c4e <HAL_DMA_IRQHandler+0x29e>
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0210 	bic.w	r2, r2, #16
 8002c2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d032      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d022      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2205      	movs	r2, #5
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d307      	bcc.n	8002c96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f2      	bne.n	8002c7a <HAL_DMA_IRQHandler+0x2ca>
 8002c94:	e000      	b.n	8002c98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
 8002cb8:	e000      	b.n	8002cbc <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cba:	bf00      	nop
    }
  }
}
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop

08002cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3b10      	subs	r3, #16
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <DMA_CalcBaseAndBitshift+0x64>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <DMA_CalcBaseAndBitshift+0x68>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d909      	bls.n	8002d06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	; 0x58
 8002d04:	e007      	b.n	8002d16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	aaaaaaab 	.word	0xaaaaaaab
 8002d2c:	08008bd0 	.word	0x08008bd0

08002d30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0x5a>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d856      	bhi.n	8002dfe <DMA_CheckFifoParam+0xce>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <DMA_CheckFifoParam+0x28>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d7b 	.word	0x08002d7b
 8002d60:	08002d69 	.word	0x08002d69
 8002d64:	08002dff 	.word	0x08002dff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d046      	beq.n	8002e02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d78:	e043      	b.n	8002e02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d82:	d140      	bne.n	8002e06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e03d      	b.n	8002e06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d92:	d121      	bne.n	8002dd8 <DMA_CheckFifoParam+0xa8>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d837      	bhi.n	8002e0a <DMA_CheckFifoParam+0xda>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <DMA_CheckFifoParam+0x70>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002db7 	.word	0x08002db7
 8002da8:	08002db1 	.word	0x08002db1
 8002dac:	08002dc9 	.word	0x08002dc9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      break;
 8002db4:	e030      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d025      	beq.n	8002e0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc6:	e022      	b.n	8002e0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd0:	d11f      	bne.n	8002e12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dd6:	e01c      	b.n	8002e12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d903      	bls.n	8002de6 <DMA_CheckFifoParam+0xb6>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d003      	beq.n	8002dec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de4:	e018      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dea:	e015      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	e00b      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e00a      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e02:	bf00      	nop
 8002e04:	e008      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e006      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e004      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
    }
  } 
  
  return status; 
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e177      	b.n	8003134 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e44:	2201      	movs	r2, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	f040 8166 	bne.w	800312e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d005      	beq.n	8002e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d130      	bne.n	8002edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 0201 	and.w	r2, r3, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d017      	beq.n	8002f18 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d123      	bne.n	8002f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3208      	adds	r2, #8
 8002f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	08da      	lsrs	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3208      	adds	r2, #8
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80c0 	beq.w	800312e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	4b66      	ldr	r3, [pc, #408]	; (800314c <HAL_GPIO_Init+0x324>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a65      	ldr	r2, [pc, #404]	; (800314c <HAL_GPIO_Init+0x324>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_GPIO_Init+0x324>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fca:	4a61      	ldr	r2, [pc, #388]	; (8003150 <HAL_GPIO_Init+0x328>)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a58      	ldr	r2, [pc, #352]	; (8003154 <HAL_GPIO_Init+0x32c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d037      	beq.n	8003066 <HAL_GPIO_Init+0x23e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a57      	ldr	r2, [pc, #348]	; (8003158 <HAL_GPIO_Init+0x330>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d031      	beq.n	8003062 <HAL_GPIO_Init+0x23a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a56      	ldr	r2, [pc, #344]	; (800315c <HAL_GPIO_Init+0x334>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d02b      	beq.n	800305e <HAL_GPIO_Init+0x236>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a55      	ldr	r2, [pc, #340]	; (8003160 <HAL_GPIO_Init+0x338>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d025      	beq.n	800305a <HAL_GPIO_Init+0x232>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a54      	ldr	r2, [pc, #336]	; (8003164 <HAL_GPIO_Init+0x33c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01f      	beq.n	8003056 <HAL_GPIO_Init+0x22e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a53      	ldr	r2, [pc, #332]	; (8003168 <HAL_GPIO_Init+0x340>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d019      	beq.n	8003052 <HAL_GPIO_Init+0x22a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_GPIO_Init+0x344>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0x226>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a51      	ldr	r2, [pc, #324]	; (8003170 <HAL_GPIO_Init+0x348>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00d      	beq.n	800304a <HAL_GPIO_Init+0x222>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a50      	ldr	r2, [pc, #320]	; (8003174 <HAL_GPIO_Init+0x34c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x21e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4f      	ldr	r2, [pc, #316]	; (8003178 <HAL_GPIO_Init+0x350>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_GPIO_Init+0x21a>
 800303e:	2309      	movs	r3, #9
 8003040:	e012      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003042:	230a      	movs	r3, #10
 8003044:	e010      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003046:	2308      	movs	r3, #8
 8003048:	e00e      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800304a:	2307      	movs	r3, #7
 800304c:	e00c      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800304e:	2306      	movs	r3, #6
 8003050:	e00a      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003052:	2305      	movs	r3, #5
 8003054:	e008      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003056:	2304      	movs	r3, #4
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800305a:	2303      	movs	r3, #3
 800305c:	e004      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003066:	2300      	movs	r3, #0
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f002 0203 	and.w	r2, r2, #3
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003078:	4935      	ldr	r1, [pc, #212]	; (8003150 <HAL_GPIO_Init+0x328>)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_GPIO_Init+0x354>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030aa:	4a34      	ldr	r2, [pc, #208]	; (800317c <HAL_GPIO_Init+0x354>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_GPIO_Init+0x354>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d4:	4a29      	ldr	r2, [pc, #164]	; (800317c <HAL_GPIO_Init+0x354>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030da:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_GPIO_Init+0x354>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_GPIO_Init+0x354>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_GPIO_Init+0x354>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <HAL_GPIO_Init+0x354>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	f67f ae84 	bls.w	8002e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40013800 	.word	0x40013800
 8003154:	40020000 	.word	0x40020000
 8003158:	40020400 	.word	0x40020400
 800315c:	40020800 	.word	0x40020800
 8003160:	40020c00 	.word	0x40020c00
 8003164:	40021000 	.word	0x40021000
 8003168:	40021400 	.word	0x40021400
 800316c:	40021800 	.word	0x40021800
 8003170:	40021c00 	.word	0x40021c00
 8003174:	40022000 	.word	0x40022000
 8003178:	40022400 	.word	0x40022400
 800317c:	40013c00 	.word	0x40013c00

08003180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e12b      	b.n	80033ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe fe14 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031e4:	f001 fda4 	bl	8004d30 <HAL_RCC_GetPCLK1Freq>
 80031e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4a81      	ldr	r2, [pc, #516]	; (80033f4 <HAL_I2C_Init+0x274>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d807      	bhi.n	8003204 <HAL_I2C_Init+0x84>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a80      	ldr	r2, [pc, #512]	; (80033f8 <HAL_I2C_Init+0x278>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	bf94      	ite	ls
 80031fc:	2301      	movls	r3, #1
 80031fe:	2300      	movhi	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e006      	b.n	8003212 <HAL_I2C_Init+0x92>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a7d      	ldr	r2, [pc, #500]	; (80033fc <HAL_I2C_Init+0x27c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	bf94      	ite	ls
 800320c:	2301      	movls	r3, #1
 800320e:	2300      	movhi	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0e7      	b.n	80033ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a78      	ldr	r2, [pc, #480]	; (8003400 <HAL_I2C_Init+0x280>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0c9b      	lsrs	r3, r3, #18
 8003224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a6a      	ldr	r2, [pc, #424]	; (80033f4 <HAL_I2C_Init+0x274>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d802      	bhi.n	8003254 <HAL_I2C_Init+0xd4>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3301      	adds	r3, #1
 8003252:	e009      	b.n	8003268 <HAL_I2C_Init+0xe8>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	4a69      	ldr	r2, [pc, #420]	; (8003404 <HAL_I2C_Init+0x284>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	3301      	adds	r3, #1
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	430b      	orrs	r3, r1
 800326e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800327a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	495c      	ldr	r1, [pc, #368]	; (80033f4 <HAL_I2C_Init+0x274>)
 8003284:	428b      	cmp	r3, r1
 8003286:	d819      	bhi.n	80032bc <HAL_I2C_Init+0x13c>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e59      	subs	r1, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fbb1 f3f3 	udiv	r3, r1, r3
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	f640 73fc 	movw	r3, #4092	; 0xffc
 800329c:	400b      	ands	r3, r1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_I2C_Init+0x138>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1e59      	subs	r1, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b6:	e051      	b.n	800335c <HAL_I2C_Init+0x1dc>
 80032b8:	2304      	movs	r3, #4
 80032ba:	e04f      	b.n	800335c <HAL_I2C_Init+0x1dc>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d111      	bne.n	80032e8 <HAL_I2C_Init+0x168>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e58      	subs	r0, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	440b      	add	r3, r1
 80032d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e012      	b.n	800330e <HAL_I2C_Init+0x18e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	0099      	lsls	r1, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Init+0x196>
 8003312:	2301      	movs	r3, #1
 8003314:	e022      	b.n	800335c <HAL_I2C_Init+0x1dc>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <HAL_I2C_Init+0x1bc>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1e58      	subs	r0, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	440b      	add	r3, r1
 800332c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333a:	e00f      	b.n	800335c <HAL_I2C_Init+0x1dc>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1e58      	subs	r0, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	0099      	lsls	r1, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003352:	3301      	adds	r3, #1
 8003354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	6809      	ldr	r1, [r1, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800338a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6911      	ldr	r1, [r2, #16]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	430b      	orrs	r3, r1
 800339e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	000186a0 	.word	0x000186a0
 80033f8:	001e847f 	.word	0x001e847f
 80033fc:	003d08ff 	.word	0x003d08ff
 8003400:	431bde83 	.word	0x431bde83
 8003404:	10624dd3 	.word	0x10624dd3

08003408 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003422:	f7fe fe93 	bl	800214c <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b20      	cmp	r3, #32
 8003432:	f040 80d9 	bne.w	80035e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2319      	movs	r3, #25
 800343c:	2201      	movs	r2, #1
 800343e:	496d      	ldr	r1, [pc, #436]	; (80035f4 <HAL_I2C_Mem_Write+0x1ec>)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fdad 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
 800344e:	e0cc      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_I2C_Mem_Write+0x56>
 800345a:	2302      	movs	r3, #2
 800345c:	e0c5      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d007      	beq.n	8003484 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2221      	movs	r2, #33	; 0x21
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a3a      	ldr	r2, [r7, #32]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a4d      	ldr	r2, [pc, #308]	; (80035f8 <HAL_I2C_Mem_Write+0x1f0>)
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034c6:	88f8      	ldrh	r0, [r7, #6]
 80034c8:	893a      	ldrh	r2, [r7, #8]
 80034ca:	8979      	ldrh	r1, [r7, #10]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	4603      	mov	r3, r0
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fbe4 	bl	8003ca4 <I2C_RequestMemoryWrite>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d052      	beq.n	8003588 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e081      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fe2e 	bl	800414c <I2C_WaitOnTXEFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d107      	bne.n	800350e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e06b      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_I2C_Mem_Write+0x180>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	d017      	beq.n	8003588 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1aa      	bne.n	80034e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fe1a 	bl	80041ce <I2C_WaitOnBTFFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00d      	beq.n	80035bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d107      	bne.n	80035b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e016      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	00100002 	.word	0x00100002
 80035f8:	ffff0000 	.word	0xffff0000

080035fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4603      	mov	r3, r0
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	460b      	mov	r3, r1
 8003610:	813b      	strh	r3, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003616:	f7fe fd99 	bl	800214c <HAL_GetTick>
 800361a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b20      	cmp	r3, #32
 8003626:	f040 8208 	bne.w	8003a3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2319      	movs	r3, #25
 8003630:	2201      	movs	r2, #1
 8003632:	497b      	ldr	r1, [pc, #492]	; (8003820 <HAL_I2C_Mem_Read+0x224>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fcb3 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
 8003642:	e1fb      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Mem_Read+0x56>
 800364e:	2302      	movs	r3, #2
 8003650:	e1f4      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d007      	beq.n	8003678 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2222      	movs	r2, #34	; 0x22
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a5b      	ldr	r2, [pc, #364]	; (8003824 <HAL_I2C_Mem_Read+0x228>)
 80036b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ba:	88f8      	ldrh	r0, [r7, #6]
 80036bc:	893a      	ldrh	r2, [r7, #8]
 80036be:	8979      	ldrh	r1, [r7, #10]
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fb80 	bl	8003dd0 <I2C_RequestMemoryRead>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e1b0      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d113      	bne.n	800370a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	623b      	str	r3, [r7, #32]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e184      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	2b01      	cmp	r3, #1
 8003710:	d11b      	bne.n	800374a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e164      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374e:	2b02      	cmp	r3, #2
 8003750:	d11b      	bne.n	800378a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003760:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	e144      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037a0:	e138      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	f200 80f1 	bhi.w	800398e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d123      	bne.n	80037fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fd49 	bl	8004250 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e139      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037fa:	e10b      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	2b02      	cmp	r3, #2
 8003802:	d14e      	bne.n	80038a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	2200      	movs	r2, #0
 800380c:	4906      	ldr	r1, [pc, #24]	; (8003828 <HAL_I2C_Mem_Read+0x22c>)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fbc6 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e10e      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
 800381e:	bf00      	nop
 8003820:	00100002 	.word	0x00100002
 8003824:	ffff0000 	.word	0xffff0000
 8003828:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038a0:	e0b8      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	2200      	movs	r2, #0
 80038aa:	4966      	ldr	r1, [pc, #408]	; (8003a44 <HAL_I2C_Mem_Read+0x448>)
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fb77 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0bf      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	2200      	movs	r2, #0
 8003906:	494f      	ldr	r1, [pc, #316]	; (8003a44 <HAL_I2C_Mem_Read+0x448>)
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fb49 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e091      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800398c:	e042      	b.n	8003a14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fc5c 	bl	8004250 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e04c      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d118      	bne.n	8003a14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f47f aec2 	bne.w	80037a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	00010004 	.word	0x00010004

08003a48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	460b      	mov	r3, r1
 8003a56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7fe fb78 	bl	800214c <HAL_GetTick>
 8003a5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	f040 8111 	bne.w	8003c92 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2319      	movs	r3, #25
 8003a76:	2201      	movs	r2, #1
 8003a78:	4988      	ldr	r1, [pc, #544]	; (8003c9c <HAL_I2C_IsDeviceReady+0x254>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fa90 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
 8003a88:	e104      	b.n	8003c94 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_I2C_IsDeviceReady+0x50>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e0fd      	b.n	8003c94 <HAL_I2C_IsDeviceReady+0x24c>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d007      	beq.n	8003abe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003acc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2224      	movs	r2, #36	; 0x24
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a70      	ldr	r2, [pc, #448]	; (8003ca0 <HAL_I2C_IsDeviceReady+0x258>)
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fa4e 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b18:	d103      	bne.n	8003b22 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0b6      	b.n	8003c94 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b26:	897b      	ldrh	r3, [r7, #10]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b34:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b36:	f7fe fb09 	bl	800214c <HAL_GetTick>
 8003b3a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b6a:	e025      	b.n	8003bb8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b6c:	f7fe faee 	bl	800214c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <HAL_I2C_IsDeviceReady+0x13a>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	22a0      	movs	r2, #160	; 0xa0
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2ba0      	cmp	r3, #160	; 0xa0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_I2C_IsDeviceReady+0x188>
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_I2C_IsDeviceReady+0x188>
 8003bca:	7dbb      	ldrb	r3, [r7, #22]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0cd      	beq.n	8003b6c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d129      	bne.n	8003c3a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	2319      	movs	r3, #25
 8003c12:	2201      	movs	r2, #1
 8003c14:	4921      	ldr	r1, [pc, #132]	; (8003c9c <HAL_I2C_IsDeviceReady+0x254>)
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f9c2 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e036      	b.n	8003c94 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e02c      	b.n	8003c94 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c48:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c52:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2319      	movs	r3, #25
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	490f      	ldr	r1, [pc, #60]	; (8003c9c <HAL_I2C_IsDeviceReady+0x254>)
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f99e 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e012      	b.n	8003c94 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	3301      	adds	r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	f4ff af32 	bcc.w	8003ae2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00100002 	.word	0x00100002
 8003ca0:	ffff0000 	.word	0xffff0000

08003ca4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f960 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf4:	d103      	bne.n	8003cfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e05f      	b.n	8003dc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	492d      	ldr	r1, [pc, #180]	; (8003dcc <I2C_RequestMemoryWrite+0x128>)
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f998 	bl	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e04c      	b.n	8003dc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	6a39      	ldr	r1, [r7, #32]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa02 	bl	800414c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d107      	bne.n	8003d66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e02b      	b.n	8003dc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d105      	bne.n	8003d7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d70:	893b      	ldrh	r3, [r7, #8]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	611a      	str	r2, [r3, #16]
 8003d7a:	e021      	b.n	8003dc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8c:	6a39      	ldr	r1, [r7, #32]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f9dc 	bl	800414c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d107      	bne.n	8003db2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e005      	b.n	8003dc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db6:	893b      	ldrh	r3, [r7, #8]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	00010002 	.word	0x00010002

08003dd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	4608      	mov	r0, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4603      	mov	r3, r0
 8003de0:	817b      	strh	r3, [r7, #10]
 8003de2:	460b      	mov	r3, r1
 8003de4:	813b      	strh	r3, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f8c2 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e30:	d103      	bne.n	8003e3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0aa      	b.n	8003f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e3e:	897b      	ldrh	r3, [r7, #10]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	4952      	ldr	r1, [pc, #328]	; (8003f9c <I2C_RequestMemoryRead+0x1cc>)
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f8fa 	bl	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e097      	b.n	8003f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	6a39      	ldr	r1, [r7, #32]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f964 	bl	800414c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d107      	bne.n	8003ea2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e076      	b.n	8003f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eac:	893b      	ldrh	r3, [r7, #8]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]
 8003eb6:	e021      	b.n	8003efc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eb8:	893b      	ldrh	r3, [r7, #8]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f93e 	bl	800414c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d107      	bne.n	8003eee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e050      	b.n	8003f94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef2:	893b      	ldrh	r3, [r7, #8]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efe:	6a39      	ldr	r1, [r7, #32]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f923 	bl	800414c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d107      	bne.n	8003f24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e035      	b.n	8003f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f82b 	bl	8003fa0 <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00d      	beq.n	8003f6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5e:	d103      	bne.n	8003f68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e013      	b.n	8003f94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f6c:	897b      	ldrh	r3, [r7, #10]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	4906      	ldr	r1, [pc, #24]	; (8003f9c <I2C_RequestMemoryRead+0x1cc>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f863 	bl	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	00010002 	.word	0x00010002

08003fa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb0:	e025      	b.n	8003ffe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d021      	beq.n	8003ffe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fe f8c7 	bl	800214c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d116      	bne.n	8003ffe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e023      	b.n	8004046 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d10d      	bne.n	8004024 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	43da      	mvns	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4013      	ands	r3, r2
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	e00c      	b.n	800403e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	43da      	mvns	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4013      	ands	r3, r2
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	429a      	cmp	r2, r3
 8004042:	d0b6      	beq.n	8003fb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800405c:	e051      	b.n	8004102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406c:	d123      	bne.n	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004086:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0204 	orr.w	r2, r3, #4
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e046      	b.n	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d021      	beq.n	8004102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040be:	f7fe f845 	bl	800214c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d302      	bcc.n	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d116      	bne.n	8004102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e020      	b.n	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d10c      	bne.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	43da      	mvns	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	e00b      	b.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	43da      	mvns	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4013      	ands	r3, r2
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d18d      	bne.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004158:	e02d      	b.n	80041b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f8ce 	bl	80042fc <I2C_IsAcknowledgeFailed>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e02d      	b.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004170:	d021      	beq.n	80041b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004172:	f7fd ffeb 	bl	800214c <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	d302      	bcc.n	8004188 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d116      	bne.n	80041b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f043 0220 	orr.w	r2, r3, #32
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e007      	b.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b80      	cmp	r3, #128	; 0x80
 80041c2:	d1ca      	bne.n	800415a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041da:	e02d      	b.n	8004238 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f88d 	bl	80042fc <I2C_IsAcknowledgeFailed>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e02d      	b.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d021      	beq.n	8004238 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f4:	f7fd ffaa 	bl	800214c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	429a      	cmp	r2, r3
 8004202:	d302      	bcc.n	800420a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e007      	b.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d1ca      	bne.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800425c:	e042      	b.n	80042e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b10      	cmp	r3, #16
 800426a:	d119      	bne.n	80042a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0210 	mvn.w	r2, #16
 8004274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e029      	b.n	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a0:	f7fd ff54 	bl	800214c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d116      	bne.n	80042e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e007      	b.n	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d1b5      	bne.n	800425e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d11b      	bne.n	800434c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800431c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f043 0204 	orr.w	r2, r3, #4
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b20      	cmp	r3, #32
 800436e:	d129      	bne.n	80043c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0210 	bic.w	r2, r2, #16
 8004396:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e000      	b.n	80043c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d12a      	bne.n	8004442 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	; 0x24
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800440c:	89fb      	ldrh	r3, [r7, #14]
 800440e:	f023 030f 	bic.w	r3, r3, #15
 8004412:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	b29a      	uxth	r2, r3
 8004418:	89fb      	ldrh	r3, [r7, #14]
 800441a:	4313      	orrs	r3, r2
 800441c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	89fa      	ldrh	r2, [r7, #14]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004476:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800447c:	f7fd fe66 	bl	800214c <HAL_GetTick>
 8004480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004482:	e009      	b.n	8004498 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004484:	f7fd fe62 	bl	800214c <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004492:	d901      	bls.n	8004498 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e01f      	b.n	80044d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004498:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d1ee      	bne.n	8004484 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ac:	f7fd fe4e 	bl	800214c <HAL_GetTick>
 80044b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044b2:	e009      	b.n	80044c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044b4:	f7fd fe4a 	bl	800214c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c2:	d901      	bls.n	80044c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e007      	b.n	80044d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d4:	d1ee      	bne.n	80044b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40023800 	.word	0x40023800
 80044e4:	420e0040 	.word	0x420e0040
 80044e8:	40007000 	.word	0x40007000
 80044ec:	420e0044 	.word	0x420e0044

080044f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e264      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d075      	beq.n	80045fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800450e:	4ba3      	ldr	r3, [pc, #652]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	2b04      	cmp	r3, #4
 8004518:	d00c      	beq.n	8004534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451a:	4ba0      	ldr	r3, [pc, #640]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004522:	2b08      	cmp	r3, #8
 8004524:	d112      	bne.n	800454c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004526:	4b9d      	ldr	r3, [pc, #628]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004532:	d10b      	bne.n	800454c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	4b99      	ldr	r3, [pc, #612]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d05b      	beq.n	80045f8 <HAL_RCC_OscConfig+0x108>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d157      	bne.n	80045f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e23f      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004554:	d106      	bne.n	8004564 <HAL_RCC_OscConfig+0x74>
 8004556:	4b91      	ldr	r3, [pc, #580]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a90      	ldr	r2, [pc, #576]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e01d      	b.n	80045a0 <HAL_RCC_OscConfig+0xb0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x98>
 800456e:	4b8b      	ldr	r3, [pc, #556]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a8a      	ldr	r2, [pc, #552]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b88      	ldr	r3, [pc, #544]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a87      	ldr	r2, [pc, #540]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xb0>
 8004588:	4b84      	ldr	r3, [pc, #528]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a83      	ldr	r2, [pc, #524]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b81      	ldr	r3, [pc, #516]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a80      	ldr	r2, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800459a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fd fdd0 	bl	800214c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd fdcc 	bl	800214c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e204      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b76      	ldr	r3, [pc, #472]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0xc0>
 80045ce:	e014      	b.n	80045fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd fdbc 	bl	800214c <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd fdb8 	bl	800214c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1f0      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	4b6c      	ldr	r3, [pc, #432]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0xe8>
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d063      	beq.n	80046ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004606:	4b65      	ldr	r3, [pc, #404]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004612:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800461a:	2b08      	cmp	r3, #8
 800461c:	d11c      	bne.n	8004658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800461e:	4b5f      	ldr	r3, [pc, #380]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d116      	bne.n	8004658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	4b5c      	ldr	r3, [pc, #368]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCC_OscConfig+0x152>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e1c4      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4b56      	ldr	r3, [pc, #344]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4952      	ldr	r1, [pc, #328]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004656:	e03a      	b.n	80046ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004660:	4b4f      	ldr	r3, [pc, #316]	; (80047a0 <HAL_RCC_OscConfig+0x2b0>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fd fd71 	bl	800214c <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466e:	f7fd fd6d 	bl	800214c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1a5      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	4b46      	ldr	r3, [pc, #280]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b43      	ldr	r3, [pc, #268]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4940      	ldr	r1, [pc, #256]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
 80046a0:	e015      	b.n	80046ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a2:	4b3f      	ldr	r3, [pc, #252]	; (80047a0 <HAL_RCC_OscConfig+0x2b0>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fd fd50 	bl	800214c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b0:	f7fd fd4c 	bl	800214c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e184      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	4b36      	ldr	r3, [pc, #216]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d030      	beq.n	800473c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e2:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <HAL_RCC_OscConfig+0x2b4>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fd fd30 	bl	800214c <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f0:	f7fd fd2c 	bl	800214c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e164      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x200>
 800470e:	e015      	b.n	800473c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004710:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_RCC_OscConfig+0x2b4>)
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004716:	f7fd fd19 	bl	800214c <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800471e:	f7fd fd15 	bl	800214c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e14d      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b1a      	ldr	r3, [pc, #104]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f0      	bne.n	800471e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80a0 	beq.w	800488a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a0e      	ldr	r2, [pc, #56]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b0c      	ldr	r3, [pc, #48]	; (800479c <HAL_RCC_OscConfig+0x2ac>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <HAL_RCC_OscConfig+0x2b8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d121      	bne.n	80047ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <HAL_RCC_OscConfig+0x2b8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a07      	ldr	r2, [pc, #28]	; (80047a8 <HAL_RCC_OscConfig+0x2b8>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004792:	f7fd fcdb 	bl	800214c <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004798:	e011      	b.n	80047be <HAL_RCC_OscConfig+0x2ce>
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
 80047a0:	42470000 	.word	0x42470000
 80047a4:	42470e80 	.word	0x42470e80
 80047a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ac:	f7fd fcce 	bl	800214c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e106      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <HAL_RCC_OscConfig+0x4e4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d106      	bne.n	80047e0 <HAL_RCC_OscConfig+0x2f0>
 80047d2:	4b81      	ldr	r3, [pc, #516]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a80      	ldr	r2, [pc, #512]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	e01c      	b.n	800481a <HAL_RCC_OscConfig+0x32a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d10c      	bne.n	8004802 <HAL_RCC_OscConfig+0x312>
 80047e8:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	4a7a      	ldr	r2, [pc, #488]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 80047ee:	f043 0304 	orr.w	r3, r3, #4
 80047f2:	6713      	str	r3, [r2, #112]	; 0x70
 80047f4:	4b78      	ldr	r3, [pc, #480]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a77      	ldr	r2, [pc, #476]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004800:	e00b      	b.n	800481a <HAL_RCC_OscConfig+0x32a>
 8004802:	4b75      	ldr	r3, [pc, #468]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a74      	ldr	r2, [pc, #464]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	4b72      	ldr	r3, [pc, #456]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	4a71      	ldr	r2, [pc, #452]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d015      	beq.n	800484e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fd fc93 	bl	800214c <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fd fc8f 	bl	800214c <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0c5      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ee      	beq.n	800482a <HAL_RCC_OscConfig+0x33a>
 800484c:	e014      	b.n	8004878 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484e:	f7fd fc7d 	bl	800214c <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004854:	e00a      	b.n	800486c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fd fc79 	bl	800214c <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f241 3288 	movw	r2, #5000	; 0x1388
 8004864:	4293      	cmp	r3, r2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e0af      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486c:	4b5a      	ldr	r3, [pc, #360]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ee      	bne.n	8004856 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4b56      	ldr	r3, [pc, #344]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a55      	ldr	r2, [pc, #340]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 809b 	beq.w	80049ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004894:	4b50      	ldr	r3, [pc, #320]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d05c      	beq.n	800495a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d141      	bne.n	800492c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a8:	4b4c      	ldr	r3, [pc, #304]	; (80049dc <HAL_RCC_OscConfig+0x4ec>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fd fc4d 	bl	800214c <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fd fc49 	bl	800214c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e081      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c8:	4b43      	ldr	r3, [pc, #268]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f0      	bne.n	80048b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	019b      	lsls	r3, r3, #6
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	3b01      	subs	r3, #1
 80048ee:	041b      	lsls	r3, r3, #16
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	061b      	lsls	r3, r3, #24
 80048f8:	4937      	ldr	r1, [pc, #220]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048fe:	4b37      	ldr	r3, [pc, #220]	; (80049dc <HAL_RCC_OscConfig+0x4ec>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fd fc22 	bl	800214c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fc1e 	bl	800214c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e056      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	4b2e      	ldr	r3, [pc, #184]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x41c>
 800492a:	e04e      	b.n	80049ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492c:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_RCC_OscConfig+0x4ec>)
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004932:	f7fd fc0b 	bl	800214c <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493a:	f7fd fc07 	bl	800214c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e03f      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494c:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f0      	bne.n	800493a <HAL_RCC_OscConfig+0x44a>
 8004958:	e037      	b.n	80049ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e032      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004966:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <HAL_RCC_OscConfig+0x4e8>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d028      	beq.n	80049c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d121      	bne.n	80049c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d11a      	bne.n	80049c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004996:	4013      	ands	r3, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800499c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800499e:	4293      	cmp	r3, r2
 80049a0:	d111      	bne.n	80049c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	3b01      	subs	r3, #1
 80049b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d107      	bne.n	80049c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d001      	beq.n	80049ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40007000 	.word	0x40007000
 80049d8:	40023800 	.word	0x40023800
 80049dc:	42470060 	.word	0x42470060

080049e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0cc      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049f4:	4b68      	ldr	r3, [pc, #416]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d90c      	bls.n	8004a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b65      	ldr	r3, [pc, #404]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b63      	ldr	r3, [pc, #396]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0b8      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d020      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a34:	4b59      	ldr	r3, [pc, #356]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a58      	ldr	r2, [pc, #352]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a4c:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a52      	ldr	r2, [pc, #328]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a58:	4b50      	ldr	r3, [pc, #320]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	494d      	ldr	r1, [pc, #308]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d044      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	4b47      	ldr	r3, [pc, #284]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d119      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9e:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e06f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aae:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e067      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004abe:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4934      	ldr	r1, [pc, #208]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad0:	f7fd fb3c 	bl	800214c <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7fd fb38 	bl	800214c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e04f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aee:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 020c 	and.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1eb      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b00:	4b25      	ldr	r3, [pc, #148]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d20c      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b22      	ldr	r3, [pc, #136]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e032      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4916      	ldr	r1, [pc, #88]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	490e      	ldr	r1, [pc, #56]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b66:	f000 f821 	bl	8004bac <HAL_RCC_GetSysClockFreq>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	490a      	ldr	r1, [pc, #40]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b78:	5ccb      	ldrb	r3, [r1, r3]
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fd f9b4 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40023c00 	.word	0x40023c00
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	08008bb8 	.word	0x08008bb8
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	20000004 	.word	0x20000004

08004bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bac:	b5b0      	push	{r4, r5, r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	6079      	str	r1, [r7, #4]
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	60f9      	str	r1, [r7, #12]
 8004bba:	2100      	movs	r1, #0
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bc2:	4952      	ldr	r1, [pc, #328]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004bc4:	6889      	ldr	r1, [r1, #8]
 8004bc6:	f001 010c 	and.w	r1, r1, #12
 8004bca:	2908      	cmp	r1, #8
 8004bcc:	d00d      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0x3e>
 8004bce:	2908      	cmp	r1, #8
 8004bd0:	f200 8094 	bhi.w	8004cfc <HAL_RCC_GetSysClockFreq+0x150>
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_RCC_GetSysClockFreq+0x32>
 8004bd8:	2904      	cmp	r1, #4
 8004bda:	d003      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x38>
 8004bdc:	e08e      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bde:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x164>)
 8004be0:	60bb      	str	r3, [r7, #8]
       break;
 8004be2:	e08e      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004be4:	4b4b      	ldr	r3, [pc, #300]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x168>)
 8004be6:	60bb      	str	r3, [r7, #8]
      break;
 8004be8:	e08b      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bea:	4948      	ldr	r1, [pc, #288]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004bec:	6849      	ldr	r1, [r1, #4]
 8004bee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004bf2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bf4:	4945      	ldr	r1, [pc, #276]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004bf6:	6849      	ldr	r1, [r1, #4]
 8004bf8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	d024      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c00:	4942      	ldr	r1, [pc, #264]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c02:	6849      	ldr	r1, [r1, #4]
 8004c04:	0989      	lsrs	r1, r1, #6
 8004c06:	4608      	mov	r0, r1
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004c10:	f04f 0500 	mov.w	r5, #0
 8004c14:	ea00 0204 	and.w	r2, r0, r4
 8004c18:	ea01 0305 	and.w	r3, r1, r5
 8004c1c:	493d      	ldr	r1, [pc, #244]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c1e:	fb01 f003 	mul.w	r0, r1, r3
 8004c22:	2100      	movs	r1, #0
 8004c24:	fb01 f102 	mul.w	r1, r1, r2
 8004c28:	1844      	adds	r4, r0, r1
 8004c2a:	493a      	ldr	r1, [pc, #232]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c2c:	fba2 0101 	umull	r0, r1, r2, r1
 8004c30:	1863      	adds	r3, r4, r1
 8004c32:	4619      	mov	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	f7fb ff4e 	bl	8000adc <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e04a      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4a:	4b30      	ldr	r3, [pc, #192]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	461a      	mov	r2, r3
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	ea02 0400 	and.w	r4, r2, r0
 8004c62:	ea03 0501 	and.w	r5, r3, r1
 8004c66:	4620      	mov	r0, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	014b      	lsls	r3, r1, #5
 8004c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c78:	0142      	lsls	r2, r0, #5
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	1b00      	subs	r0, r0, r4
 8004c80:	eb61 0105 	sbc.w	r1, r1, r5
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	018b      	lsls	r3, r1, #6
 8004c8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c92:	0182      	lsls	r2, r0, #6
 8004c94:	1a12      	subs	r2, r2, r0
 8004c96:	eb63 0301 	sbc.w	r3, r3, r1
 8004c9a:	f04f 0000 	mov.w	r0, #0
 8004c9e:	f04f 0100 	mov.w	r1, #0
 8004ca2:	00d9      	lsls	r1, r3, #3
 8004ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ca8:	00d0      	lsls	r0, r2, #3
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	1912      	adds	r2, r2, r4
 8004cb0:	eb45 0303 	adc.w	r3, r5, r3
 8004cb4:	f04f 0000 	mov.w	r0, #0
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	0299      	lsls	r1, r3, #10
 8004cbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cc2:	0290      	lsls	r0, r2, #10
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	f7fb ff02 	bl	8000adc <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4613      	mov	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x160>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	3301      	adds	r3, #1
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	60bb      	str	r3, [r7, #8]
      break;
 8004cfa:	e002      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x164>)
 8004cfe:	60bb      	str	r3, [r7, #8]
      break;
 8004d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d02:	68bb      	ldr	r3, [r7, #8]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	00f42400 	.word	0x00f42400
 8004d14:	017d7840 	.word	0x017d7840

08004d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	20000000 	.word	0x20000000

08004d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d34:	f7ff fff0 	bl	8004d18 <HAL_RCC_GetHCLKFreq>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	0a9b      	lsrs	r3, r3, #10
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	4903      	ldr	r1, [pc, #12]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d46:	5ccb      	ldrb	r3, [r1, r3]
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40023800 	.word	0x40023800
 8004d54:	08008bc8 	.word	0x08008bc8

08004d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d5c:	f7ff ffdc 	bl	8004d18 <HAL_RCC_GetHCLKFreq>
 8004d60:	4602      	mov	r2, r0
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	0b5b      	lsrs	r3, r3, #13
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	4903      	ldr	r1, [pc, #12]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d6e:	5ccb      	ldrb	r3, [r1, r3]
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	08008bc8 	.word	0x08008bc8

08004d80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <HAL_RCC_GetClockConfig+0x5c>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0203 	and.w	r2, r3, #3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <HAL_RCC_GetClockConfig+0x5c>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <HAL_RCC_GetClockConfig+0x5c>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_RCC_GetClockConfig+0x5c>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	08db      	lsrs	r3, r3, #3
 8004dba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <HAL_RCC_GetClockConfig+0x60>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	601a      	str	r2, [r3, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40023c00 	.word	0x40023c00

08004de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e041      	b.n	8004e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f839 	bl	8004e82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f000 f9d8 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d001      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e04e      	b.n	8004f4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a23      	ldr	r2, [pc, #140]	; (8004f5c <HAL_TIM_Base_Start_IT+0xc4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d022      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d01d      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d018      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_TIM_Base_Start_IT+0xcc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d013      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00e      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d009      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <HAL_TIM_Base_Start_IT+0x80>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d111      	bne.n	8004f3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b06      	cmp	r3, #6
 8004f28:	d010      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	e007      	b.n	8004f4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40010400 	.word	0x40010400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40001800 	.word	0x40001800

08004f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0202 	mvn.w	r2, #2
 8004fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8ee 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8e0 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8f1 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d122      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d11b      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0204 	mvn.w	r2, #4
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8c4 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8b6 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8c7 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b08      	cmp	r3, #8
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b08      	cmp	r3, #8
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0208 	mvn.w	r2, #8
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f89a 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f88c 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f89d 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b10      	cmp	r3, #16
 8005088:	d122      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b10      	cmp	r3, #16
 8005096:	d11b      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0210 	mvn.w	r2, #16
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2208      	movs	r2, #8
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f870 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f862 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f873 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0201 	mvn.w	r2, #1
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fdb0 	bl	8001c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b80      	cmp	r3, #128	; 0x80
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f902 	bl	800532c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f838 	bl	80051c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b20      	cmp	r3, #32
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b20      	cmp	r3, #32
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0220 	mvn.w	r2, #32
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8cc 	bl	8005318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a40      	ldr	r2, [pc, #256]	; (80052ec <TIM_Base_SetConfig+0x114>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d00f      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3d      	ldr	r2, [pc, #244]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00b      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a3c      	ldr	r2, [pc, #240]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a3b      	ldr	r2, [pc, #236]	; (80052f8 <TIM_Base_SetConfig+0x120>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <TIM_Base_SetConfig+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d108      	bne.n	800522a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2f      	ldr	r2, [pc, #188]	; (80052ec <TIM_Base_SetConfig+0x114>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d02b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005238:	d027      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <TIM_Base_SetConfig+0x118>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d023      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2b      	ldr	r2, [pc, #172]	; (80052f4 <TIM_Base_SetConfig+0x11c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <TIM_Base_SetConfig+0x120>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a29      	ldr	r2, [pc, #164]	; (80052fc <TIM_Base_SetConfig+0x124>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d017      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a28      	ldr	r2, [pc, #160]	; (8005300 <TIM_Base_SetConfig+0x128>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a27      	ldr	r2, [pc, #156]	; (8005304 <TIM_Base_SetConfig+0x12c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <TIM_Base_SetConfig+0x130>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a25      	ldr	r2, [pc, #148]	; (800530c <TIM_Base_SetConfig+0x134>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a24      	ldr	r2, [pc, #144]	; (8005310 <TIM_Base_SetConfig+0x138>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a23      	ldr	r2, [pc, #140]	; (8005314 <TIM_Base_SetConfig+0x13c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d108      	bne.n	800529c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <TIM_Base_SetConfig+0x114>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0c      	ldr	r2, [pc, #48]	; (80052fc <TIM_Base_SetConfig+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d103      	bne.n	80052d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	615a      	str	r2, [r3, #20]
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00
 80052fc:	40010400 	.word	0x40010400
 8005300:	40014000 	.word	0x40014000
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800
 800530c:	40001800 	.word	0x40001800
 8005310:	40001c00 	.word	0x40001c00
 8005314:	40002000 	.word	0x40002000

08005318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e03f      	b.n	80053d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc fd7c 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f905 	bl	8005594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b08a      	sub	sp, #40	; 0x28
 80053de:	af02      	add	r7, sp, #8
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d17c      	bne.n	80054f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_UART_Transmit+0x2c>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e075      	b.n	80054f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_UART_Transmit+0x3e>
 8005414:	2302      	movs	r3, #2
 8005416:	e06e      	b.n	80054f6 <HAL_UART_Transmit+0x11c>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2221      	movs	r2, #33	; 0x21
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800542e:	f7fc fe8d 	bl	800214c <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	88fa      	ldrh	r2, [r7, #6]
 800543e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005448:	d108      	bne.n	800545c <HAL_UART_Transmit+0x82>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e003      	b.n	8005464 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800546c:	e02a      	b.n	80054c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	2180      	movs	r1, #128	; 0x80
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f840 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e036      	b.n	80054f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10b      	bne.n	80054a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800549c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	3302      	adds	r3, #2
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	e007      	b.n	80054b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	781a      	ldrb	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3301      	adds	r3, #1
 80054b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1cf      	bne.n	800546e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2140      	movs	r1, #64	; 0x40
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f810 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e006      	b.n	80054f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e000      	b.n	80054f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550e:	e02c      	b.n	800556a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d028      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <UART_WaitOnFlagUntilTimeout+0x30>
 800551e:	f7fc fe15 	bl	800214c <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	429a      	cmp	r2, r3
 800552c:	d21d      	bcs.n	800556a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800553c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e00f      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4013      	ands	r3, r2
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	bf0c      	ite	eq
 800557a:	2301      	moveq	r3, #1
 800557c:	2300      	movne	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	429a      	cmp	r2, r3
 8005586:	d0c3      	beq.n	8005510 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	b09f      	sub	sp, #124	; 0x7c
 800559a:	af00      	add	r7, sp, #0
 800559c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800559e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055aa:	68d9      	ldr	r1, [r3, #12]
 80055ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	ea40 0301 	orr.w	r3, r0, r1
 80055b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	431a      	orrs	r2, r3
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80055ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055d8:	f021 010c 	bic.w	r1, r1, #12
 80055dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055e2:	430b      	orrs	r3, r1
 80055e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f2:	6999      	ldr	r1, [r3, #24]
 80055f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	ea40 0301 	orr.w	r3, r0, r1
 80055fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4bc5      	ldr	r3, [pc, #788]	; (8005918 <UART_SetConfig+0x384>)
 8005604:	429a      	cmp	r2, r3
 8005606:	d004      	beq.n	8005612 <UART_SetConfig+0x7e>
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4bc3      	ldr	r3, [pc, #780]	; (800591c <UART_SetConfig+0x388>)
 800560e:	429a      	cmp	r2, r3
 8005610:	d103      	bne.n	800561a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005612:	f7ff fba1 	bl	8004d58 <HAL_RCC_GetPCLK2Freq>
 8005616:	6778      	str	r0, [r7, #116]	; 0x74
 8005618:	e002      	b.n	8005620 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800561a:	f7ff fb89 	bl	8004d30 <HAL_RCC_GetPCLK1Freq>
 800561e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005628:	f040 80b6 	bne.w	8005798 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800562c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800562e:	461c      	mov	r4, r3
 8005630:	f04f 0500 	mov.w	r5, #0
 8005634:	4622      	mov	r2, r4
 8005636:	462b      	mov	r3, r5
 8005638:	1891      	adds	r1, r2, r2
 800563a:	6439      	str	r1, [r7, #64]	; 0x40
 800563c:	415b      	adcs	r3, r3
 800563e:	647b      	str	r3, [r7, #68]	; 0x44
 8005640:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005644:	1912      	adds	r2, r2, r4
 8005646:	eb45 0303 	adc.w	r3, r5, r3
 800564a:	f04f 0000 	mov.w	r0, #0
 800564e:	f04f 0100 	mov.w	r1, #0
 8005652:	00d9      	lsls	r1, r3, #3
 8005654:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005658:	00d0      	lsls	r0, r2, #3
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	1911      	adds	r1, r2, r4
 8005660:	6639      	str	r1, [r7, #96]	; 0x60
 8005662:	416b      	adcs	r3, r5
 8005664:	667b      	str	r3, [r7, #100]	; 0x64
 8005666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	461a      	mov	r2, r3
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	1891      	adds	r1, r2, r2
 8005672:	63b9      	str	r1, [r7, #56]	; 0x38
 8005674:	415b      	adcs	r3, r3
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800567c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005680:	f7fb fa2c 	bl	8000adc <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4ba5      	ldr	r3, [pc, #660]	; (8005920 <UART_SetConfig+0x38c>)
 800568a:	fba3 2302 	umull	r2, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	011e      	lsls	r6, r3, #4
 8005692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005694:	461c      	mov	r4, r3
 8005696:	f04f 0500 	mov.w	r5, #0
 800569a:	4622      	mov	r2, r4
 800569c:	462b      	mov	r3, r5
 800569e:	1891      	adds	r1, r2, r2
 80056a0:	6339      	str	r1, [r7, #48]	; 0x30
 80056a2:	415b      	adcs	r3, r3
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
 80056a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80056aa:	1912      	adds	r2, r2, r4
 80056ac:	eb45 0303 	adc.w	r3, r5, r3
 80056b0:	f04f 0000 	mov.w	r0, #0
 80056b4:	f04f 0100 	mov.w	r1, #0
 80056b8:	00d9      	lsls	r1, r3, #3
 80056ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056be:	00d0      	lsls	r0, r2, #3
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	1911      	adds	r1, r2, r4
 80056c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80056c8:	416b      	adcs	r3, r5
 80056ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	461a      	mov	r2, r3
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	1891      	adds	r1, r2, r2
 80056d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80056da:	415b      	adcs	r3, r3
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056e6:	f7fb f9f9 	bl	8000adc <__aeabi_uldivmod>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4b8c      	ldr	r3, [pc, #560]	; (8005920 <UART_SetConfig+0x38c>)
 80056f0:	fba3 1302 	umull	r1, r3, r3, r2
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	2164      	movs	r1, #100	; 0x64
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	3332      	adds	r3, #50	; 0x32
 8005702:	4a87      	ldr	r2, [pc, #540]	; (8005920 <UART_SetConfig+0x38c>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005710:	441e      	add	r6, r3
 8005712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005714:	4618      	mov	r0, r3
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	1894      	adds	r4, r2, r2
 8005720:	623c      	str	r4, [r7, #32]
 8005722:	415b      	adcs	r3, r3
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800572a:	1812      	adds	r2, r2, r0
 800572c:	eb41 0303 	adc.w	r3, r1, r3
 8005730:	f04f 0400 	mov.w	r4, #0
 8005734:	f04f 0500 	mov.w	r5, #0
 8005738:	00dd      	lsls	r5, r3, #3
 800573a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800573e:	00d4      	lsls	r4, r2, #3
 8005740:	4622      	mov	r2, r4
 8005742:	462b      	mov	r3, r5
 8005744:	1814      	adds	r4, r2, r0
 8005746:	653c      	str	r4, [r7, #80]	; 0x50
 8005748:	414b      	adcs	r3, r1
 800574a:	657b      	str	r3, [r7, #84]	; 0x54
 800574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	461a      	mov	r2, r3
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	1891      	adds	r1, r2, r2
 8005758:	61b9      	str	r1, [r7, #24]
 800575a:	415b      	adcs	r3, r3
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005762:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005766:	f7fb f9b9 	bl	8000adc <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4b6c      	ldr	r3, [pc, #432]	; (8005920 <UART_SetConfig+0x38c>)
 8005770:	fba3 1302 	umull	r1, r3, r3, r2
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	2164      	movs	r1, #100	; 0x64
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	3332      	adds	r3, #50	; 0x32
 8005782:	4a67      	ldr	r2, [pc, #412]	; (8005920 <UART_SetConfig+0x38c>)
 8005784:	fba2 2303 	umull	r2, r3, r2, r3
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	f003 0207 	and.w	r2, r3, #7
 800578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4432      	add	r2, r6
 8005794:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005796:	e0b9      	b.n	800590c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800579a:	461c      	mov	r4, r3
 800579c:	f04f 0500 	mov.w	r5, #0
 80057a0:	4622      	mov	r2, r4
 80057a2:	462b      	mov	r3, r5
 80057a4:	1891      	adds	r1, r2, r2
 80057a6:	6139      	str	r1, [r7, #16]
 80057a8:	415b      	adcs	r3, r3
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057b0:	1912      	adds	r2, r2, r4
 80057b2:	eb45 0303 	adc.w	r3, r5, r3
 80057b6:	f04f 0000 	mov.w	r0, #0
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	00d9      	lsls	r1, r3, #3
 80057c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057c4:	00d0      	lsls	r0, r2, #3
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	eb12 0804 	adds.w	r8, r2, r4
 80057ce:	eb43 0905 	adc.w	r9, r3, r5
 80057d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	008b      	lsls	r3, r1, #2
 80057e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057ea:	0082      	lsls	r2, r0, #2
 80057ec:	4640      	mov	r0, r8
 80057ee:	4649      	mov	r1, r9
 80057f0:	f7fb f974 	bl	8000adc <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4b49      	ldr	r3, [pc, #292]	; (8005920 <UART_SetConfig+0x38c>)
 80057fa:	fba3 2302 	umull	r2, r3, r3, r2
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	011e      	lsls	r6, r3, #4
 8005802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005804:	4618      	mov	r0, r3
 8005806:	f04f 0100 	mov.w	r1, #0
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	1894      	adds	r4, r2, r2
 8005810:	60bc      	str	r4, [r7, #8]
 8005812:	415b      	adcs	r3, r3
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800581a:	1812      	adds	r2, r2, r0
 800581c:	eb41 0303 	adc.w	r3, r1, r3
 8005820:	f04f 0400 	mov.w	r4, #0
 8005824:	f04f 0500 	mov.w	r5, #0
 8005828:	00dd      	lsls	r5, r3, #3
 800582a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800582e:	00d4      	lsls	r4, r2, #3
 8005830:	4622      	mov	r2, r4
 8005832:	462b      	mov	r3, r5
 8005834:	1814      	adds	r4, r2, r0
 8005836:	64bc      	str	r4, [r7, #72]	; 0x48
 8005838:	414b      	adcs	r3, r1
 800583a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800583c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4618      	mov	r0, r3
 8005842:	f04f 0100 	mov.w	r1, #0
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	008b      	lsls	r3, r1, #2
 8005850:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005854:	0082      	lsls	r2, r0, #2
 8005856:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800585a:	f7fb f93f 	bl	8000adc <__aeabi_uldivmod>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <UART_SetConfig+0x38c>)
 8005864:	fba3 1302 	umull	r1, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	2164      	movs	r1, #100	; 0x64
 800586c:	fb01 f303 	mul.w	r3, r1, r3
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	3332      	adds	r3, #50	; 0x32
 8005876:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <UART_SetConfig+0x38c>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005882:	441e      	add	r6, r3
 8005884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005886:	4618      	mov	r0, r3
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	1894      	adds	r4, r2, r2
 8005892:	603c      	str	r4, [r7, #0]
 8005894:	415b      	adcs	r3, r3
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589c:	1812      	adds	r2, r2, r0
 800589e:	eb41 0303 	adc.w	r3, r1, r3
 80058a2:	f04f 0400 	mov.w	r4, #0
 80058a6:	f04f 0500 	mov.w	r5, #0
 80058aa:	00dd      	lsls	r5, r3, #3
 80058ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058b0:	00d4      	lsls	r4, r2, #3
 80058b2:	4622      	mov	r2, r4
 80058b4:	462b      	mov	r3, r5
 80058b6:	eb12 0a00 	adds.w	sl, r2, r0
 80058ba:	eb43 0b01 	adc.w	fp, r3, r1
 80058be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	008b      	lsls	r3, r1, #2
 80058d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058d6:	0082      	lsls	r2, r0, #2
 80058d8:	4650      	mov	r0, sl
 80058da:	4659      	mov	r1, fp
 80058dc:	f7fb f8fe 	bl	8000adc <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <UART_SetConfig+0x38c>)
 80058e6:	fba3 1302 	umull	r1, r3, r3, r2
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	2164      	movs	r1, #100	; 0x64
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	3332      	adds	r3, #50	; 0x32
 80058f8:	4a09      	ldr	r2, [pc, #36]	; (8005920 <UART_SetConfig+0x38c>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	f003 020f 	and.w	r2, r3, #15
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4432      	add	r2, r6
 800590a:	609a      	str	r2, [r3, #8]
}
 800590c:	bf00      	nop
 800590e:	377c      	adds	r7, #124	; 0x7c
 8005910:	46bd      	mov	sp, r7
 8005912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005916:	bf00      	nop
 8005918:	40011000 	.word	0x40011000
 800591c:	40011400 	.word	0x40011400
 8005920:	51eb851f 	.word	0x51eb851f

08005924 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005936:	2b84      	cmp	r3, #132	; 0x84
 8005938:	d005      	beq.n	8005946 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800593a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	3303      	adds	r3, #3
 8005944:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005946:	68fb      	ldr	r3, [r7, #12]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800595a:	f3ef 8305 	mrs	r3, IPSR
 800595e:	607b      	str	r3, [r7, #4]
  return(result);
 8005960:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005962:	2b00      	cmp	r3, #0
 8005964:	bf14      	ite	ne
 8005966:	2301      	movne	r3, #1
 8005968:	2300      	moveq	r3, #0
 800596a:	b2db      	uxtb	r3, r3
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800597c:	f001 f942 	bl	8006c04 <vTaskStartScheduler>
  
  return osOK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	bd80      	pop	{r7, pc}

08005986 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005988:	b089      	sub	sp, #36	; 0x24
 800598a:	af04      	add	r7, sp, #16
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d020      	beq.n	80059da <osThreadCreate+0x54>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01c      	beq.n	80059da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685c      	ldr	r4, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681d      	ldr	r5, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691e      	ldr	r6, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff ffb6 	bl	8005924 <makeFreeRtosPriority>
 80059b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059c2:	9202      	str	r2, [sp, #8]
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	9100      	str	r1, [sp, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4632      	mov	r2, r6
 80059cc:	4629      	mov	r1, r5
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 ff50 	bl	8006874 <xTaskCreateStatic>
 80059d4:	4603      	mov	r3, r0
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e01c      	b.n	8005a14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685c      	ldr	r4, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059e6:	b29e      	uxth	r6, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff ff98 	bl	8005924 <makeFreeRtosPriority>
 80059f4:	4602      	mov	r2, r0
 80059f6:	f107 030c 	add.w	r3, r7, #12
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	9200      	str	r2, [sp, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	4632      	mov	r2, r6
 8005a02:	4629      	mov	r1, r5
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 ff92 	bl	800692e <xTaskCreate>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d001      	beq.n	8005a14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e000      	b.n	8005a16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a14:	68fb      	ldr	r3, [r7, #12]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <osDelay+0x16>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	e000      	b.n	8005a36 <osDelay+0x18>
 8005a34:	2301      	movs	r3, #1
 8005a36:	4618      	mov	r0, r3
 8005a38:	f001 f8b0 	bl	8006b9c <vTaskDelay>
  
  return osOK;
 8005a3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	f000 faae 	bl	8005fbe <xQueueCreateMutexStatic>
 8005a62:	4603      	mov	r3, r0
 8005a64:	e003      	b.n	8005a6e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005a66:	2001      	movs	r0, #1
 8005a68:	f000 fa91 	bl	8005f8e <xQueueCreateMutex>
 8005a6c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <osMutexWait+0x18>
    return osErrorParameter;
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	e03a      	b.n	8005b06 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9a:	d103      	bne.n	8005aa4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e009      	b.n	8005ab8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d006      	beq.n	8005ab8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <osMutexWait+0x40>
      ticks = 1;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005ab8:	f7ff ff4c 	bl	8005954 <inHandlerMode>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d017      	beq.n	8005af2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005ac2:	f107 0308 	add.w	r3, r7, #8
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2100      	movs	r1, #0
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fd2a 	bl	8006524 <xQueueReceiveFromISR>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d001      	beq.n	8005ada <osMutexWait+0x62>
      return osErrorOS;
 8005ad6:	23ff      	movs	r3, #255	; 0xff
 8005ad8:	e015      	b.n	8005b06 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d011      	beq.n	8005b04 <osMutexWait+0x8c>
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <osMutexWait+0x98>)
 8005ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	e008      	b.n	8005b04 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005af2:	68f9      	ldr	r1, [r7, #12]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fc09 	bl	800630c <xQueueSemaphoreTake>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d001      	beq.n	8005b04 <osMutexWait+0x8c>
    return osErrorOS;
 8005b00:	23ff      	movs	r3, #255	; 0xff
 8005b02:	e000      	b.n	8005b06 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005b24:	f7ff ff16 	bl	8005954 <inHandlerMode>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d016      	beq.n	8005b5c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b2e:	f107 0308 	add.w	r3, r7, #8
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fb5b 	bl	80061f0 <xQueueGiveFromISR>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d001      	beq.n	8005b44 <osMutexRelease+0x30>
      return osErrorOS;
 8005b40:	23ff      	movs	r3, #255	; 0xff
 8005b42:	e017      	b.n	8005b74 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d013      	beq.n	8005b72 <osMutexRelease+0x5e>
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <osMutexRelease+0x68>)
 8005b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	e00a      	b.n	8005b72 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2100      	movs	r1, #0
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fa46 	bl	8005ff4 <xQueueGenericSend>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d001      	beq.n	8005b72 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005b6e:	23ff      	movs	r3, #255	; 0xff
 8005b70:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005b72:	68fb      	ldr	r3, [r7, #12]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f103 0208 	add.w	r2, r3, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f04f 32ff 	mov.w	r2, #4294967295
 8005b98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f103 0208 	add.w	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f103 0208 	add.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d103      	bne.n	8005c42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e00c      	b.n	8005c5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3308      	adds	r3, #8
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e002      	b.n	8005c50 <vListInsert+0x2e>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d2f6      	bcs.n	8005c4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6892      	ldr	r2, [r2, #8]
 8005caa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6852      	ldr	r2, [r2, #4]
 8005cb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d103      	bne.n	8005cc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1e5a      	subs	r2, r3, #1
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d12:	f001 fec7 	bl	8007aa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	441a      	add	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	3b01      	subs	r3, #1
 8005d44:	68f9      	ldr	r1, [r7, #12]
 8005d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	22ff      	movs	r2, #255	; 0xff
 8005d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	22ff      	movs	r2, #255	; 0xff
 8005d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d114      	bne.n	8005d92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3310      	adds	r3, #16
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 f987 	bl	8007088 <xTaskRemoveFromEventList>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d012      	beq.n	8005da6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d80:	4b0c      	ldr	r3, [pc, #48]	; (8005db4 <xQueueGenericReset+0xcc>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	e009      	b.n	8005da6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3310      	adds	r3, #16
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fef2 	bl	8005b80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3324      	adds	r3, #36	; 0x24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff feed 	bl	8005b80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005da6:	f001 fead 	bl	8007b04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005daa:	2301      	movs	r3, #1
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08e      	sub	sp, #56	; 0x38
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <xQueueGenericCreateStatic+0x52>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <xQueueGenericCreateStatic+0x56>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <xQueueGenericCreateStatic+0x58>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	623b      	str	r3, [r7, #32]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d102      	bne.n	8005e36 <xQueueGenericCreateStatic+0x7e>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <xQueueGenericCreateStatic+0x82>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <xQueueGenericCreateStatic+0x84>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	61fb      	str	r3, [r7, #28]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e56:	2348      	movs	r3, #72	; 0x48
 8005e58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b48      	cmp	r3, #72	; 0x48
 8005e5e:	d00a      	beq.n	8005e76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	61bb      	str	r3, [r7, #24]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4613      	mov	r3, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f83f 	bl	8005f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3730      	adds	r7, #48	; 0x30
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	613b      	str	r3, [r7, #16]
}
 8005ece:	bf00      	nop
 8005ed0:	e7fe      	b.n	8005ed0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	3348      	adds	r3, #72	; 0x48
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 ff01 	bl	8007ce8 <pvPortMalloc>
 8005ee6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d011      	beq.n	8005f12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	3348      	adds	r3, #72	; 0x48
 8005ef6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f00:	79fa      	ldrb	r2, [r7, #7]
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	4613      	mov	r3, r2
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f805 	bl	8005f1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f12:	69bb      	ldr	r3, [r7, #24]
	}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e002      	b.n	8005f3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	69b8      	ldr	r0, [r7, #24]
 8005f4e:	f7ff fecb 	bl	8005ce8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00e      	beq.n	8005f86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2100      	movs	r1, #0
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f837 	bl	8005ff4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b086      	sub	sp, #24
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	4603      	mov	r3, r0
 8005f96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6939      	ldr	r1, [r7, #16]
 8005fa6:	6978      	ldr	r0, [r7, #20]
 8005fa8:	f7ff ff7e 	bl	8005ea8 <xQueueGenericCreate>
 8005fac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff ffd3 	bl	8005f5a <prvInitialiseMutex>

		return xNewQueue;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
	}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b088      	sub	sp, #32
 8005fc2:	af02      	add	r7, sp, #8
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	6039      	str	r1, [r7, #0]
 8005fc8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	6939      	ldr	r1, [r7, #16]
 8005fdc:	6978      	ldr	r0, [r7, #20]
 8005fde:	f7ff feeb 	bl	8005db8 <xQueueGenericCreateStatic>
 8005fe2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff ffb8 	bl	8005f5a <prvInitialiseMutex>

		return xNewQueue;
 8005fea:	68fb      	ldr	r3, [r7, #12]
	}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08e      	sub	sp, #56	; 0x38
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006002:	2300      	movs	r3, #0
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <xQueueGenericSend+0x32>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d103      	bne.n	8006034 <xQueueGenericSend+0x40>
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <xQueueGenericSend+0x44>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <xQueueGenericSend+0x46>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <xQueueGenericSend+0x60>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d103      	bne.n	8006062 <xQueueGenericSend+0x6e>
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <xQueueGenericSend+0x72>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <xQueueGenericSend+0x74>
 8006066:	2300      	movs	r3, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <xQueueGenericSend+0x8e>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	623b      	str	r3, [r7, #32]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006082:	f001 f9bd 	bl	8007400 <xTaskGetSchedulerState>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <xQueueGenericSend+0x9e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <xQueueGenericSend+0xa2>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueGenericSend+0xa4>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	61fb      	str	r3, [r7, #28]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060b2:	f001 fcf7 	bl	8007aa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060be:	429a      	cmp	r2, r3
 80060c0:	d302      	bcc.n	80060c8 <xQueueGenericSend+0xd4>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d129      	bne.n	800611c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ce:	f000 fac1 	bl	8006654 <prvCopyDataToQueue>
 80060d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	3324      	adds	r3, #36	; 0x24
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 ffd1 	bl	8007088 <xTaskRemoveFromEventList>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d013      	beq.n	8006114 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060ec:	4b3f      	ldr	r3, [pc, #252]	; (80061ec <xQueueGenericSend+0x1f8>)
 80060ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	e00a      	b.n	8006114 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006104:	4b39      	ldr	r3, [pc, #228]	; (80061ec <xQueueGenericSend+0x1f8>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006114:	f001 fcf6 	bl	8007b04 <vPortExitCritical>
				return pdPASS;
 8006118:	2301      	movs	r3, #1
 800611a:	e063      	b.n	80061e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006122:	f001 fcef 	bl	8007b04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006126:	2300      	movs	r3, #0
 8006128:	e05c      	b.n	80061e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800612a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006130:	f107 0314 	add.w	r3, r7, #20
 8006134:	4618      	mov	r0, r3
 8006136:	f001 f809 	bl	800714c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800613a:	2301      	movs	r3, #1
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800613e:	f001 fce1 	bl	8007b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006142:	f000 fdbf 	bl	8006cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006146:	f001 fcad 	bl	8007aa4 <vPortEnterCritical>
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006150:	b25b      	sxtb	r3, r3
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d103      	bne.n	8006160 <xQueueGenericSend+0x16c>
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006166:	b25b      	sxtb	r3, r3
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d103      	bne.n	8006176 <xQueueGenericSend+0x182>
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006176:	f001 fcc5 	bl	8007b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800617a:	1d3a      	adds	r2, r7, #4
 800617c:	f107 0314 	add.w	r3, r7, #20
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fff8 	bl	8007178 <xTaskCheckForTimeOut>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d124      	bne.n	80061d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800618e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006190:	f000 fb58 	bl	8006844 <prvIsQueueFull>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	3310      	adds	r3, #16
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 ff4c 	bl	8007040 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061aa:	f000 fae3 	bl	8006774 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061ae:	f000 fd97 	bl	8006ce0 <xTaskResumeAll>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f47f af7c 	bne.w	80060b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <xQueueGenericSend+0x1f8>)
 80061bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	e772      	b.n	80060b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ce:	f000 fad1 	bl	8006774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061d2:	f000 fd85 	bl	8006ce0 <xTaskResumeAll>
 80061d6:	e76c      	b.n	80060b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061da:	f000 facb 	bl	8006774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061de:	f000 fd7f 	bl	8006ce0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3738      	adds	r7, #56	; 0x38
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08e      	sub	sp, #56	; 0x38
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	623b      	str	r3, [r7, #32]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	61fb      	str	r3, [r7, #28]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <xQueueGiveFromISR+0x58>
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <xQueueGiveFromISR+0x5c>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <xQueueGiveFromISR+0x5e>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	61bb      	str	r3, [r7, #24]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006268:	f001 fcfe 	bl	8007c68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800626c:	f3ef 8211 	mrs	r2, BASEPRI
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	617a      	str	r2, [r7, #20]
 8006282:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006284:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006294:	429a      	cmp	r2, r3
 8006296:	d22b      	bcs.n	80062f0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800629e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d112      	bne.n	80062da <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d016      	beq.n	80062ea <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	3324      	adds	r3, #36	; 0x24
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fee1 	bl	8007088 <xTaskRemoveFromEventList>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2201      	movs	r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	e007      	b.n	80062ea <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062de:	3301      	adds	r3, #1
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	b25a      	sxtb	r2, r3
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80062ea:	2301      	movs	r3, #1
 80062ec:	637b      	str	r3, [r7, #52]	; 0x34
 80062ee:	e001      	b.n	80062f4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	637b      	str	r3, [r7, #52]	; 0x34
 80062f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006302:	4618      	mov	r0, r3
 8006304:	3738      	adds	r7, #56	; 0x38
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	; 0x38
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006316:	2300      	movs	r3, #0
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	623b      	str	r3, [r7, #32]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	61fb      	str	r3, [r7, #28]
}
 8006358:	bf00      	nop
 800635a:	e7fe      	b.n	800635a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800635c:	f001 f850 	bl	8007400 <xTaskGetSchedulerState>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d102      	bne.n	800636c <xQueueSemaphoreTake+0x60>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <xQueueSemaphoreTake+0x64>
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <xQueueSemaphoreTake+0x66>
 8006370:	2300      	movs	r3, #0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	61bb      	str	r3, [r7, #24]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800638c:	f001 fb8a 	bl	8007aa4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	2b00      	cmp	r3, #0
 800639a:	d024      	beq.n	80063e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	1e5a      	subs	r2, r3, #1
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063ac:	f001 f9d0 	bl	8007750 <pvTaskIncrementMutexHeldCount>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00f      	beq.n	80063de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	3310      	adds	r3, #16
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fe60 	bl	8007088 <xTaskRemoveFromEventList>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063ce:	4b54      	ldr	r3, [pc, #336]	; (8006520 <xQueueSemaphoreTake+0x214>)
 80063d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063de:	f001 fb91 	bl	8007b04 <vPortExitCritical>
				return pdPASS;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e097      	b.n	8006516 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d111      	bne.n	8006410 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	617b      	str	r3, [r7, #20]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006408:	f001 fb7c 	bl	8007b04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800640c:	2300      	movs	r3, #0
 800640e:	e082      	b.n	8006516 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fe96 	bl	800714c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006424:	f001 fb6e 	bl	8007b04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006428:	f000 fc4c 	bl	8006cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800642c:	f001 fb3a 	bl	8007aa4 <vPortEnterCritical>
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006436:	b25b      	sxtb	r3, r3
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d103      	bne.n	8006446 <xQueueSemaphoreTake+0x13a>
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800644c:	b25b      	sxtb	r3, r3
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d103      	bne.n	800645c <xQueueSemaphoreTake+0x150>
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800645c:	f001 fb52 	bl	8007b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006460:	463a      	mov	r2, r7
 8006462:	f107 030c 	add.w	r3, r7, #12
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fe85 	bl	8007178 <xTaskCheckForTimeOut>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d132      	bne.n	80064da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006476:	f000 f9cf 	bl	8006818 <prvIsQueueEmpty>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d026      	beq.n	80064ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006488:	f001 fb0c 	bl	8007aa4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 ffd3 	bl	800743c <xTaskPriorityInherit>
 8006496:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006498:	f001 fb34 	bl	8007b04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	3324      	adds	r3, #36	; 0x24
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fdcb 	bl	8007040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ac:	f000 f962 	bl	8006774 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064b0:	f000 fc16 	bl	8006ce0 <xTaskResumeAll>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f47f af68 	bne.w	800638c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064bc:	4b18      	ldr	r3, [pc, #96]	; (8006520 <xQueueSemaphoreTake+0x214>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	e75e      	b.n	800638c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d0:	f000 f950 	bl	8006774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064d4:	f000 fc04 	bl	8006ce0 <xTaskResumeAll>
 80064d8:	e758      	b.n	800638c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064dc:	f000 f94a 	bl	8006774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064e0:	f000 fbfe 	bl	8006ce0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e6:	f000 f997 	bl	8006818 <prvIsQueueEmpty>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f43f af4d 	beq.w	800638c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80064f8:	f001 fad4 	bl	8007aa4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80064fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064fe:	f000 f891 	bl	8006624 <prvGetDisinheritPriorityAfterTimeout>
 8006502:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800650a:	4618      	mov	r0, r3
 800650c:	f001 f892 	bl	8007634 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006510:	f001 faf8 	bl	8007b04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006514:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006516:	4618      	mov	r0, r3
 8006518:	3738      	adds	r7, #56	; 0x38
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08e      	sub	sp, #56	; 0x38
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	623b      	str	r3, [r7, #32]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d103      	bne.n	800655e <xQueueReceiveFromISR+0x3a>
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <xQueueReceiveFromISR+0x3e>
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <xQueueReceiveFromISR+0x40>
 8006562:	2300      	movs	r3, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	61fb      	str	r3, [r7, #28]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800657e:	f001 fb73 	bl	8007c68 <vPortValidateInterruptPriority>
	__asm volatile
 8006582:	f3ef 8211 	mrs	r2, BASEPRI
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	61ba      	str	r2, [r7, #24]
 8006598:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800659a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d02f      	beq.n	800660a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b8:	f000 f8b6 	bl	8006728 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	1e5a      	subs	r2, r3, #1
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065cc:	d112      	bne.n	80065f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d016      	beq.n	8006604 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	3310      	adds	r3, #16
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fd54 	bl	8007088 <xTaskRemoveFromEventList>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00e      	beq.n	8006604 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	e007      	b.n	8006604 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80065f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f8:	3301      	adds	r3, #1
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	b25a      	sxtb	r2, r3
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006604:	2301      	movs	r3, #1
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
 8006608:	e001      	b.n	800660e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f383 8811 	msr	BASEPRI, r3
}
 8006618:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800661c:	4618      	mov	r0, r3
 800661e:	3738      	adds	r7, #56	; 0x38
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d006      	beq.n	8006642 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1c3 0307 	rsb	r3, r3, #7
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e001      	b.n	8006646 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006646:	68fb      	ldr	r3, [r7, #12]
	}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10d      	bne.n	800668e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d14d      	bne.n	8006716 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 ff52 	bl	8007528 <xTaskPriorityDisinherit>
 8006684:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	609a      	str	r2, [r3, #8]
 800668c:	e043      	b.n	8006716 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d119      	bne.n	80066c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6858      	ldr	r0, [r3, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	461a      	mov	r2, r3
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	f001 fd36 	bl	8008110 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	441a      	add	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d32b      	bcc.n	8006716 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	e026      	b.n	8006716 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	68d8      	ldr	r0, [r3, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	461a      	mov	r2, r3
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	f001 fd1c 	bl	8008110 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	425b      	negs	r3, r3
 80066e2:	441a      	add	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d207      	bcs.n	8006704 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	425b      	negs	r3, r3
 80066fe:	441a      	add	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d105      	bne.n	8006716 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3b01      	subs	r3, #1
 8006714:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800671e:	697b      	ldr	r3, [r7, #20]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d018      	beq.n	800676c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	441a      	add	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	429a      	cmp	r2, r3
 8006752:	d303      	bcc.n	800675c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68d9      	ldr	r1, [r3, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	461a      	mov	r2, r3
 8006766:	6838      	ldr	r0, [r7, #0]
 8006768:	f001 fcd2 	bl	8008110 <memcpy>
	}
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800677c:	f001 f992 	bl	8007aa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006786:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006788:	e011      	b.n	80067ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	2b00      	cmp	r3, #0
 8006790:	d012      	beq.n	80067b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3324      	adds	r3, #36	; 0x24
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fc76 	bl	8007088 <xTaskRemoveFromEventList>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067a2:	f000 fd4b 	bl	800723c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dce9      	bgt.n	800678a <prvUnlockQueue+0x16>
 80067b6:	e000      	b.n	80067ba <prvUnlockQueue+0x46>
					break;
 80067b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	22ff      	movs	r2, #255	; 0xff
 80067be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067c2:	f001 f99f 	bl	8007b04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067c6:	f001 f96d 	bl	8007aa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d2:	e011      	b.n	80067f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d012      	beq.n	8006802 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3310      	adds	r3, #16
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fc51 	bl	8007088 <xTaskRemoveFromEventList>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067ec:	f000 fd26 	bl	800723c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	dce9      	bgt.n	80067d4 <prvUnlockQueue+0x60>
 8006800:	e000      	b.n	8006804 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006802:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	22ff      	movs	r2, #255	; 0xff
 8006808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800680c:	f001 f97a 	bl	8007b04 <vPortExitCritical>
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006820:	f001 f940 	bl	8007aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800682c:	2301      	movs	r3, #1
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	e001      	b.n	8006836 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006836:	f001 f965 	bl	8007b04 <vPortExitCritical>

	return xReturn;
 800683a:	68fb      	ldr	r3, [r7, #12]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800684c:	f001 f92a 	bl	8007aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	429a      	cmp	r2, r3
 800685a:	d102      	bne.n	8006862 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e001      	b.n	8006866 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006866:	f001 f94d 	bl	8007b04 <vPortExitCritical>

	return xReturn;
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08e      	sub	sp, #56	; 0x38
 8006878:	af04      	add	r7, sp, #16
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	623b      	str	r3, [r7, #32]
}
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <xTaskCreateStatic+0x46>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	61fb      	str	r3, [r7, #28]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068ba:	2354      	movs	r3, #84	; 0x54
 80068bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b54      	cmp	r3, #84	; 0x54
 80068c2:	d00a      	beq.n	80068da <xTaskCreateStatic+0x66>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	61bb      	str	r3, [r7, #24]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d01e      	beq.n	8006920 <xTaskCreateStatic+0xac>
 80068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01b      	beq.n	8006920 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068fa:	2300      	movs	r3, #0
 80068fc:	9303      	str	r3, [sp, #12]
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	9302      	str	r3, [sp, #8]
 8006902:	f107 0314 	add.w	r3, r7, #20
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f850 	bl	80069b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800691a:	f000 f8d5 	bl	8006ac8 <prvAddNewTaskToReadyList>
 800691e:	e001      	b.n	8006924 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006924:	697b      	ldr	r3, [r7, #20]
	}
 8006926:	4618      	mov	r0, r3
 8006928:	3728      	adds	r7, #40	; 0x28
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800692e:	b580      	push	{r7, lr}
 8006930:	b08c      	sub	sp, #48	; 0x30
 8006932:	af04      	add	r7, sp, #16
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	603b      	str	r3, [r7, #0]
 800693a:	4613      	mov	r3, r2
 800693c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4618      	mov	r0, r3
 8006944:	f001 f9d0 	bl	8007ce8 <pvPortMalloc>
 8006948:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00e      	beq.n	800696e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006950:	2054      	movs	r0, #84	; 0x54
 8006952:	f001 f9c9 	bl	8007ce8 <pvPortMalloc>
 8006956:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
 8006964:	e005      	b.n	8006972 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006966:	6978      	ldr	r0, [r7, #20]
 8006968:	f001 fa8a 	bl	8007e80 <vPortFree>
 800696c:	e001      	b.n	8006972 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d017      	beq.n	80069a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006980:	88fa      	ldrh	r2, [r7, #6]
 8006982:	2300      	movs	r3, #0
 8006984:	9303      	str	r3, [sp, #12]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	9302      	str	r3, [sp, #8]
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f80e 	bl	80069b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800699c:	69f8      	ldr	r0, [r7, #28]
 800699e:	f000 f893 	bl	8006ac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069a2:	2301      	movs	r3, #1
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	e002      	b.n	80069ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069a8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069ae:	69bb      	ldr	r3, [r7, #24]
	}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069d0:	3b01      	subs	r3, #1
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f023 0307 	bic.w	r3, r3, #7
 80069de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <prvInitialiseNewTask+0x48>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	617b      	str	r3, [r7, #20]
}
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01f      	beq.n	8006a46 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	e012      	b.n	8006a32 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	7819      	ldrb	r1, [r3, #0]
 8006a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	4413      	add	r3, r2
 8006a1a:	3334      	adds	r3, #52	; 0x34
 8006a1c:	460a      	mov	r2, r1
 8006a1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d006      	beq.n	8006a3a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	61fb      	str	r3, [r7, #28]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b0f      	cmp	r3, #15
 8006a36:	d9e9      	bls.n	8006a0c <prvInitialiseNewTask+0x54>
 8006a38:	e000      	b.n	8006a3c <prvInitialiseNewTask+0x84>
			{
				break;
 8006a3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a44:	e003      	b.n	8006a4e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	2b06      	cmp	r3, #6
 8006a52:	d901      	bls.n	8006a58 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a54:	2306      	movs	r3, #6
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	2200      	movs	r2, #0
 8006a68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff f8a6 	bl	8005bc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	3318      	adds	r3, #24
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff f8a1 	bl	8005bc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	f1c3 0207 	rsb	r2, r3, #7
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	2200      	movs	r2, #0
 8006a98:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	68f9      	ldr	r1, [r7, #12]
 8006aa6:	69b8      	ldr	r0, [r7, #24]
 8006aa8:	f000 fecc 	bl	8007844 <pxPortInitialiseStack>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006abe:	bf00      	nop
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ad0:	f000 ffe8 	bl	8007aa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ad4:	4b2a      	ldr	r3, [pc, #168]	; (8006b80 <prvAddNewTaskToReadyList+0xb8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	4a29      	ldr	r2, [pc, #164]	; (8006b80 <prvAddNewTaskToReadyList+0xb8>)
 8006adc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ade:	4b29      	ldr	r3, [pc, #164]	; (8006b84 <prvAddNewTaskToReadyList+0xbc>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ae6:	4a27      	ldr	r2, [pc, #156]	; (8006b84 <prvAddNewTaskToReadyList+0xbc>)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006aec:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <prvAddNewTaskToReadyList+0xb8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d110      	bne.n	8006b16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006af4:	f000 fbc6 	bl	8007284 <prvInitialiseTaskLists>
 8006af8:	e00d      	b.n	8006b16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006afa:	4b23      	ldr	r3, [pc, #140]	; (8006b88 <prvAddNewTaskToReadyList+0xc0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d109      	bne.n	8006b16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b02:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <prvAddNewTaskToReadyList+0xbc>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d802      	bhi.n	8006b16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b10:	4a1c      	ldr	r2, [pc, #112]	; (8006b84 <prvAddNewTaskToReadyList+0xbc>)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b16:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <prvAddNewTaskToReadyList+0xc4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <prvAddNewTaskToReadyList+0xc4>)
 8006b1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	2201      	movs	r2, #1
 8006b26:	409a      	lsls	r2, r3
 8006b28:	4b19      	ldr	r3, [pc, #100]	; (8006b90 <prvAddNewTaskToReadyList+0xc8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	4a18      	ldr	r2, [pc, #96]	; (8006b90 <prvAddNewTaskToReadyList+0xc8>)
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <prvAddNewTaskToReadyList+0xcc>)
 8006b40:	441a      	add	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f7ff f846 	bl	8005bda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b4e:	f000 ffd9 	bl	8007b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <prvAddNewTaskToReadyList+0xc0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00e      	beq.n	8006b78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b5a:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <prvAddNewTaskToReadyList+0xbc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d207      	bcs.n	8006b78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <prvAddNewTaskToReadyList+0xd0>)
 8006b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	2000052c 	.word	0x2000052c
 8006b84:	2000042c 	.word	0x2000042c
 8006b88:	20000538 	.word	0x20000538
 8006b8c:	20000548 	.word	0x20000548
 8006b90:	20000534 	.word	0x20000534
 8006b94:	20000430 	.word	0x20000430
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d017      	beq.n	8006bde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <vTaskDelay+0x60>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <vTaskDelay+0x30>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60bb      	str	r3, [r7, #8]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bcc:	f000 f87a 	bl	8006cc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fdd0 	bl	8007778 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bd8:	f000 f882 	bl	8006ce0 <xTaskResumeAll>
 8006bdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d107      	bne.n	8006bf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <vTaskDelay+0x64>)
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20000554 	.word	0x20000554
 8006c00:	e000ed04 	.word	0xe000ed04

08006c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	; 0x28
 8006c08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c12:	463a      	mov	r2, r7
 8006c14:	1d39      	adds	r1, r7, #4
 8006c16:	f107 0308 	add.w	r3, r7, #8
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fa fcda 	bl	80015d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	9202      	str	r2, [sp, #8]
 8006c28:	9301      	str	r3, [sp, #4]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	460a      	mov	r2, r1
 8006c32:	491e      	ldr	r1, [pc, #120]	; (8006cac <vTaskStartScheduler+0xa8>)
 8006c34:	481e      	ldr	r0, [pc, #120]	; (8006cb0 <vTaskStartScheduler+0xac>)
 8006c36:	f7ff fe1d 	bl	8006874 <xTaskCreateStatic>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <vTaskStartScheduler+0xb0>)
 8006c3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c40:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <vTaskStartScheduler+0xb0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	e001      	b.n	8006c52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d116      	bne.n	8006c86 <vTaskStartScheduler+0x82>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	613b      	str	r3, [r7, #16]
}
 8006c6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c6c:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <vTaskStartScheduler+0xb4>)
 8006c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c74:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <vTaskStartScheduler+0xb8>)
 8006c76:	2201      	movs	r2, #1
 8006c78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c7a:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <vTaskStartScheduler+0xbc>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c80:	f000 fe6e 	bl	8007960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c84:	e00e      	b.n	8006ca4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d10a      	bne.n	8006ca4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	60fb      	str	r3, [r7, #12]
}
 8006ca0:	bf00      	nop
 8006ca2:	e7fe      	b.n	8006ca2 <vTaskStartScheduler+0x9e>
}
 8006ca4:	bf00      	nop
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	08008bb0 	.word	0x08008bb0
 8006cb0:	08007255 	.word	0x08007255
 8006cb4:	20000550 	.word	0x20000550
 8006cb8:	2000054c 	.word	0x2000054c
 8006cbc:	20000538 	.word	0x20000538
 8006cc0:	20000530 	.word	0x20000530

08006cc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <vTaskSuspendAll+0x18>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	4a03      	ldr	r2, [pc, #12]	; (8006cdc <vTaskSuspendAll+0x18>)
 8006cd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cd2:	bf00      	nop
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000554 	.word	0x20000554

08006ce0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cee:	4b41      	ldr	r3, [pc, #260]	; (8006df4 <xTaskResumeAll+0x114>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <xTaskResumeAll+0x2c>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	603b      	str	r3, [r7, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d0c:	f000 feca 	bl	8007aa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d10:	4b38      	ldr	r3, [pc, #224]	; (8006df4 <xTaskResumeAll+0x114>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	4a37      	ldr	r2, [pc, #220]	; (8006df4 <xTaskResumeAll+0x114>)
 8006d18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d1a:	4b36      	ldr	r3, [pc, #216]	; (8006df4 <xTaskResumeAll+0x114>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d161      	bne.n	8006de6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d22:	4b35      	ldr	r3, [pc, #212]	; (8006df8 <xTaskResumeAll+0x118>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d05d      	beq.n	8006de6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d2a:	e02e      	b.n	8006d8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2c:	4b33      	ldr	r3, [pc, #204]	; (8006dfc <xTaskResumeAll+0x11c>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3318      	adds	r3, #24
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe ffab 	bl	8005c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe ffa6 	bl	8005c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	4b2b      	ldr	r3, [pc, #172]	; (8006e00 <xTaskResumeAll+0x120>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	4a2a      	ldr	r2, [pc, #168]	; (8006e00 <xTaskResumeAll+0x120>)
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4a27      	ldr	r2, [pc, #156]	; (8006e04 <xTaskResumeAll+0x124>)
 8006d68:	441a      	add	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f7fe ff32 	bl	8005bda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7a:	4b23      	ldr	r3, [pc, #140]	; (8006e08 <xTaskResumeAll+0x128>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d302      	bcc.n	8006d8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d84:	4b21      	ldr	r3, [pc, #132]	; (8006e0c <xTaskResumeAll+0x12c>)
 8006d86:	2201      	movs	r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d8a:	4b1c      	ldr	r3, [pc, #112]	; (8006dfc <xTaskResumeAll+0x11c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1cc      	bne.n	8006d2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d98:	f000 fb12 	bl	80073c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d9c:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <xTaskResumeAll+0x130>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006da8:	f000 f836 	bl	8006e18 <xTaskIncrementTick>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006db2:	4b16      	ldr	r3, [pc, #88]	; (8006e0c <xTaskResumeAll+0x12c>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1f1      	bne.n	8006da8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006dc4:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <xTaskResumeAll+0x130>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dca:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <xTaskResumeAll+0x12c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d009      	beq.n	8006de6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <xTaskResumeAll+0x134>)
 8006dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006de6:	f000 fe8d 	bl	8007b04 <vPortExitCritical>

	return xAlreadyYielded;
 8006dea:	68bb      	ldr	r3, [r7, #8]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	20000554 	.word	0x20000554
 8006df8:	2000052c 	.word	0x2000052c
 8006dfc:	200004ec 	.word	0x200004ec
 8006e00:	20000534 	.word	0x20000534
 8006e04:	20000430 	.word	0x20000430
 8006e08:	2000042c 	.word	0x2000042c
 8006e0c:	20000540 	.word	0x20000540
 8006e10:	2000053c 	.word	0x2000053c
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e22:	4b4e      	ldr	r3, [pc, #312]	; (8006f5c <xTaskIncrementTick+0x144>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 808e 	bne.w	8006f48 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e2c:	4b4c      	ldr	r3, [pc, #304]	; (8006f60 <xTaskIncrementTick+0x148>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e34:	4a4a      	ldr	r2, [pc, #296]	; (8006f60 <xTaskIncrementTick+0x148>)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d120      	bne.n	8006e82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e40:	4b48      	ldr	r3, [pc, #288]	; (8006f64 <xTaskIncrementTick+0x14c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	603b      	str	r3, [r7, #0]
}
 8006e5c:	bf00      	nop
 8006e5e:	e7fe      	b.n	8006e5e <xTaskIncrementTick+0x46>
 8006e60:	4b40      	ldr	r3, [pc, #256]	; (8006f64 <xTaskIncrementTick+0x14c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	4b40      	ldr	r3, [pc, #256]	; (8006f68 <xTaskIncrementTick+0x150>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a3e      	ldr	r2, [pc, #248]	; (8006f64 <xTaskIncrementTick+0x14c>)
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	4a3e      	ldr	r2, [pc, #248]	; (8006f68 <xTaskIncrementTick+0x150>)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	4b3d      	ldr	r3, [pc, #244]	; (8006f6c <xTaskIncrementTick+0x154>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	4a3c      	ldr	r2, [pc, #240]	; (8006f6c <xTaskIncrementTick+0x154>)
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	f000 fa9f 	bl	80073c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e82:	4b3b      	ldr	r3, [pc, #236]	; (8006f70 <xTaskIncrementTick+0x158>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d348      	bcc.n	8006f1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e8c:	4b35      	ldr	r3, [pc, #212]	; (8006f64 <xTaskIncrementTick+0x14c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e96:	4b36      	ldr	r3, [pc, #216]	; (8006f70 <xTaskIncrementTick+0x158>)
 8006e98:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9c:	601a      	str	r2, [r3, #0]
					break;
 8006e9e:	e03e      	b.n	8006f1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea0:	4b30      	ldr	r3, [pc, #192]	; (8006f64 <xTaskIncrementTick+0x14c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d203      	bcs.n	8006ec0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006eb8:	4a2d      	ldr	r2, [pc, #180]	; (8006f70 <xTaskIncrementTick+0x158>)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ebe:	e02e      	b.n	8006f1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe fee5 	bl	8005c94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	3318      	adds	r3, #24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fedc 	bl	8005c94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	409a      	lsls	r2, r3
 8006ee4:	4b23      	ldr	r3, [pc, #140]	; (8006f74 <xTaskIncrementTick+0x15c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	4a22      	ldr	r2, [pc, #136]	; (8006f74 <xTaskIncrementTick+0x15c>)
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4a1f      	ldr	r2, [pc, #124]	; (8006f78 <xTaskIncrementTick+0x160>)
 8006efc:	441a      	add	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f7fe fe68 	bl	8005bda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0e:	4b1b      	ldr	r3, [pc, #108]	; (8006f7c <xTaskIncrementTick+0x164>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3b9      	bcc.n	8006e8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f1c:	e7b6      	b.n	8006e8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f1e:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <xTaskIncrementTick+0x164>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4914      	ldr	r1, [pc, #80]	; (8006f78 <xTaskIncrementTick+0x160>)
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d901      	bls.n	8006f3a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006f36:	2301      	movs	r3, #1
 8006f38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <xTaskIncrementTick+0x168>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	e004      	b.n	8006f52 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f48:	4b0e      	ldr	r3, [pc, #56]	; (8006f84 <xTaskIncrementTick+0x16c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	4a0d      	ldr	r2, [pc, #52]	; (8006f84 <xTaskIncrementTick+0x16c>)
 8006f50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f52:	697b      	ldr	r3, [r7, #20]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20000554 	.word	0x20000554
 8006f60:	20000530 	.word	0x20000530
 8006f64:	200004e4 	.word	0x200004e4
 8006f68:	200004e8 	.word	0x200004e8
 8006f6c:	20000544 	.word	0x20000544
 8006f70:	2000054c 	.word	0x2000054c
 8006f74:	20000534 	.word	0x20000534
 8006f78:	20000430 	.word	0x20000430
 8006f7c:	2000042c 	.word	0x2000042c
 8006f80:	20000540 	.word	0x20000540
 8006f84:	2000053c 	.word	0x2000053c

08006f88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f8e:	4b27      	ldr	r3, [pc, #156]	; (800702c <vTaskSwitchContext+0xa4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f96:	4b26      	ldr	r3, [pc, #152]	; (8007030 <vTaskSwitchContext+0xa8>)
 8006f98:	2201      	movs	r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f9c:	e03f      	b.n	800701e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006f9e:	4b24      	ldr	r3, [pc, #144]	; (8007030 <vTaskSwitchContext+0xa8>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa4:	4b23      	ldr	r3, [pc, #140]	; (8007034 <vTaskSwitchContext+0xac>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	fab3 f383 	clz	r3, r3
 8006fb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fb2:	7afb      	ldrb	r3, [r7, #11]
 8006fb4:	f1c3 031f 	rsb	r3, r3, #31
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	491f      	ldr	r1, [pc, #124]	; (8007038 <vTaskSwitchContext+0xb0>)
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	607b      	str	r3, [r7, #4]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <vTaskSwitchContext+0x5a>
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4a12      	ldr	r2, [pc, #72]	; (8007038 <vTaskSwitchContext+0xb0>)
 8006ff0:	4413      	add	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	3308      	adds	r3, #8
 8007006:	429a      	cmp	r2, r3
 8007008:	d104      	bne.n	8007014 <vTaskSwitchContext+0x8c>
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	605a      	str	r2, [r3, #4]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	4a08      	ldr	r2, [pc, #32]	; (800703c <vTaskSwitchContext+0xb4>)
 800701c:	6013      	str	r3, [r2, #0]
}
 800701e:	bf00      	nop
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000554 	.word	0x20000554
 8007030:	20000540 	.word	0x20000540
 8007034:	20000534 	.word	0x20000534
 8007038:	20000430 	.word	0x20000430
 800703c:	2000042c 	.word	0x2000042c

08007040 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60fb      	str	r3, [r7, #12]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007066:	4b07      	ldr	r3, [pc, #28]	; (8007084 <vTaskPlaceOnEventList+0x44>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3318      	adds	r3, #24
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fe fdd7 	bl	8005c22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007074:	2101      	movs	r1, #1
 8007076:	6838      	ldr	r0, [r7, #0]
 8007078:	f000 fb7e 	bl	8007778 <prvAddCurrentTaskToDelayedList>
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	2000042c 	.word	0x2000042c

08007088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	60fb      	str	r3, [r7, #12]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3318      	adds	r3, #24
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fdeb 	bl	8005c94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070be:	4b1d      	ldr	r3, [pc, #116]	; (8007134 <xTaskRemoveFromEventList+0xac>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d11c      	bne.n	8007100 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fde2 	bl	8005c94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	2201      	movs	r2, #1
 80070d6:	409a      	lsls	r2, r3
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <xTaskRemoveFromEventList+0xb0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4313      	orrs	r3, r2
 80070de:	4a16      	ldr	r2, [pc, #88]	; (8007138 <xTaskRemoveFromEventList+0xb0>)
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4a13      	ldr	r2, [pc, #76]	; (800713c <xTaskRemoveFromEventList+0xb4>)
 80070f0:	441a      	add	r2, r3
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3304      	adds	r3, #4
 80070f6:	4619      	mov	r1, r3
 80070f8:	4610      	mov	r0, r2
 80070fa:	f7fe fd6e 	bl	8005bda <vListInsertEnd>
 80070fe:	e005      	b.n	800710c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	3318      	adds	r3, #24
 8007104:	4619      	mov	r1, r3
 8007106:	480e      	ldr	r0, [pc, #56]	; (8007140 <xTaskRemoveFromEventList+0xb8>)
 8007108:	f7fe fd67 	bl	8005bda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007110:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <xTaskRemoveFromEventList+0xbc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	429a      	cmp	r2, r3
 8007118:	d905      	bls.n	8007126 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800711a:	2301      	movs	r3, #1
 800711c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800711e:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <xTaskRemoveFromEventList+0xc0>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e001      	b.n	800712a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800712a:	697b      	ldr	r3, [r7, #20]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000554 	.word	0x20000554
 8007138:	20000534 	.word	0x20000534
 800713c:	20000430 	.word	0x20000430
 8007140:	200004ec 	.word	0x200004ec
 8007144:	2000042c 	.word	0x2000042c
 8007148:	20000540 	.word	0x20000540

0800714c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <vTaskInternalSetTimeOutState+0x24>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <vTaskInternalSetTimeOutState+0x28>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	605a      	str	r2, [r3, #4]
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	20000544 	.word	0x20000544
 8007174:	20000530 	.word	0x20000530

08007178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	613b      	str	r3, [r7, #16]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	60fb      	str	r3, [r7, #12]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80071ba:	f000 fc73 	bl	8007aa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071be:	4b1d      	ldr	r3, [pc, #116]	; (8007234 <xTaskCheckForTimeOut+0xbc>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d102      	bne.n	80071de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	e023      	b.n	8007226 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b15      	ldr	r3, [pc, #84]	; (8007238 <xTaskCheckForTimeOut+0xc0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d007      	beq.n	80071fa <xTaskCheckForTimeOut+0x82>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d302      	bcc.n	80071fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	e015      	b.n	8007226 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	429a      	cmp	r2, r3
 8007202:	d20b      	bcs.n	800721c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff9b 	bl	800714c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007216:	2300      	movs	r3, #0
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	e004      	b.n	8007226 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007226:	f000 fc6d 	bl	8007b04 <vPortExitCritical>

	return xReturn;
 800722a:	69fb      	ldr	r3, [r7, #28]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000530 	.word	0x20000530
 8007238:	20000544 	.word	0x20000544

0800723c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007240:	4b03      	ldr	r3, [pc, #12]	; (8007250 <vTaskMissedYield+0x14>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]
}
 8007246:	bf00      	nop
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	20000540 	.word	0x20000540

08007254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800725c:	f000 f852 	bl	8007304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007260:	4b06      	ldr	r3, [pc, #24]	; (800727c <prvIdleTask+0x28>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d9f9      	bls.n	800725c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <prvIdleTask+0x2c>)
 800726a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007278:	e7f0      	b.n	800725c <prvIdleTask+0x8>
 800727a:	bf00      	nop
 800727c:	20000430 	.word	0x20000430
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800728a:	2300      	movs	r3, #0
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	e00c      	b.n	80072aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4a12      	ldr	r2, [pc, #72]	; (80072e4 <prvInitialiseTaskLists+0x60>)
 800729c:	4413      	add	r3, r2
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fc6e 	bl	8005b80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3301      	adds	r3, #1
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b06      	cmp	r3, #6
 80072ae:	d9ef      	bls.n	8007290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072b0:	480d      	ldr	r0, [pc, #52]	; (80072e8 <prvInitialiseTaskLists+0x64>)
 80072b2:	f7fe fc65 	bl	8005b80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072b6:	480d      	ldr	r0, [pc, #52]	; (80072ec <prvInitialiseTaskLists+0x68>)
 80072b8:	f7fe fc62 	bl	8005b80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072bc:	480c      	ldr	r0, [pc, #48]	; (80072f0 <prvInitialiseTaskLists+0x6c>)
 80072be:	f7fe fc5f 	bl	8005b80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072c2:	480c      	ldr	r0, [pc, #48]	; (80072f4 <prvInitialiseTaskLists+0x70>)
 80072c4:	f7fe fc5c 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072c8:	480b      	ldr	r0, [pc, #44]	; (80072f8 <prvInitialiseTaskLists+0x74>)
 80072ca:	f7fe fc59 	bl	8005b80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072ce:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <prvInitialiseTaskLists+0x78>)
 80072d0:	4a05      	ldr	r2, [pc, #20]	; (80072e8 <prvInitialiseTaskLists+0x64>)
 80072d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072d4:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <prvInitialiseTaskLists+0x7c>)
 80072d6:	4a05      	ldr	r2, [pc, #20]	; (80072ec <prvInitialiseTaskLists+0x68>)
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000430 	.word	0x20000430
 80072e8:	200004bc 	.word	0x200004bc
 80072ec:	200004d0 	.word	0x200004d0
 80072f0:	200004ec 	.word	0x200004ec
 80072f4:	20000500 	.word	0x20000500
 80072f8:	20000518 	.word	0x20000518
 80072fc:	200004e4 	.word	0x200004e4
 8007300:	200004e8 	.word	0x200004e8

08007304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800730a:	e019      	b.n	8007340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800730c:	f000 fbca 	bl	8007aa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007310:	4b10      	ldr	r3, [pc, #64]	; (8007354 <prvCheckTasksWaitingTermination+0x50>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe fcb9 	bl	8005c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007322:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <prvCheckTasksWaitingTermination+0x54>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3b01      	subs	r3, #1
 8007328:	4a0b      	ldr	r2, [pc, #44]	; (8007358 <prvCheckTasksWaitingTermination+0x54>)
 800732a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800732c:	4b0b      	ldr	r3, [pc, #44]	; (800735c <prvCheckTasksWaitingTermination+0x58>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3b01      	subs	r3, #1
 8007332:	4a0a      	ldr	r2, [pc, #40]	; (800735c <prvCheckTasksWaitingTermination+0x58>)
 8007334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007336:	f000 fbe5 	bl	8007b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f810 	bl	8007360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007340:	4b06      	ldr	r3, [pc, #24]	; (800735c <prvCheckTasksWaitingTermination+0x58>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e1      	bne.n	800730c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000500 	.word	0x20000500
 8007358:	2000052c 	.word	0x2000052c
 800735c:	20000514 	.word	0x20000514

08007360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800736e:	2b00      	cmp	r3, #0
 8007370:	d108      	bne.n	8007384 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fd82 	bl	8007e80 <vPortFree>
				vPortFree( pxTCB );
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fd7f 	bl	8007e80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007382:	e018      	b.n	80073b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800738a:	2b01      	cmp	r3, #1
 800738c:	d103      	bne.n	8007396 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fd76 	bl	8007e80 <vPortFree>
	}
 8007394:	e00f      	b.n	80073b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800739c:	2b02      	cmp	r3, #2
 800739e:	d00a      	beq.n	80073b6 <prvDeleteTCB+0x56>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <prvDeleteTCB+0x54>
	}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <prvResetNextTaskUnblockTime+0x38>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <prvResetNextTaskUnblockTime+0x3c>)
 80073d2:	f04f 32ff 	mov.w	r2, #4294967295
 80073d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073d8:	e008      	b.n	80073ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073da:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <prvResetNextTaskUnblockTime+0x38>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	4a04      	ldr	r2, [pc, #16]	; (80073fc <prvResetNextTaskUnblockTime+0x3c>)
 80073ea:	6013      	str	r3, [r2, #0]
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	200004e4 	.word	0x200004e4
 80073fc:	2000054c 	.word	0x2000054c

08007400 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007406:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <xTaskGetSchedulerState+0x34>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800740e:	2301      	movs	r3, #1
 8007410:	607b      	str	r3, [r7, #4]
 8007412:	e008      	b.n	8007426 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007414:	4b08      	ldr	r3, [pc, #32]	; (8007438 <xTaskGetSchedulerState+0x38>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800741c:	2302      	movs	r3, #2
 800741e:	607b      	str	r3, [r7, #4]
 8007420:	e001      	b.n	8007426 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007422:	2300      	movs	r3, #0
 8007424:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007426:	687b      	ldr	r3, [r7, #4]
	}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	20000538 	.word	0x20000538
 8007438:	20000554 	.word	0x20000554

0800743c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d05e      	beq.n	8007510 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007456:	4b31      	ldr	r3, [pc, #196]	; (800751c <xTaskPriorityInherit+0xe0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	429a      	cmp	r2, r3
 800745e:	d24e      	bcs.n	80074fe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	db06      	blt.n	8007476 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007468:	4b2c      	ldr	r3, [pc, #176]	; (800751c <xTaskPriorityInherit+0xe0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	f1c3 0207 	rsb	r2, r3, #7
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6959      	ldr	r1, [r3, #20]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4a26      	ldr	r2, [pc, #152]	; (8007520 <xTaskPriorityInherit+0xe4>)
 8007488:	4413      	add	r3, r2
 800748a:	4299      	cmp	r1, r3
 800748c:	d12f      	bne.n	80074ee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	3304      	adds	r3, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe fbfe 	bl	8005c94 <uxListRemove>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	2201      	movs	r2, #1
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	43da      	mvns	r2, r3
 80074aa:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <xTaskPriorityInherit+0xe8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4013      	ands	r3, r2
 80074b0:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <xTaskPriorityInherit+0xe8>)
 80074b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074b4:	4b19      	ldr	r3, [pc, #100]	; (800751c <xTaskPriorityInherit+0xe0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	2201      	movs	r2, #1
 80074c4:	409a      	lsls	r2, r3
 80074c6:	4b17      	ldr	r3, [pc, #92]	; (8007524 <xTaskPriorityInherit+0xe8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	4a15      	ldr	r2, [pc, #84]	; (8007524 <xTaskPriorityInherit+0xe8>)
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4a10      	ldr	r2, [pc, #64]	; (8007520 <xTaskPriorityInherit+0xe4>)
 80074de:	441a      	add	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7fe fb77 	bl	8005bda <vListInsertEnd>
 80074ec:	e004      	b.n	80074f8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <xTaskPriorityInherit+0xe0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80074f8:	2301      	movs	r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	e008      	b.n	8007510 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007502:	4b06      	ldr	r3, [pc, #24]	; (800751c <xTaskPriorityInherit+0xe0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	429a      	cmp	r2, r3
 800750a:	d201      	bcs.n	8007510 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800750c:	2301      	movs	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007510:	68fb      	ldr	r3, [r7, #12]
	}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	2000042c 	.word	0x2000042c
 8007520:	20000430 	.word	0x20000430
 8007524:	20000534 	.word	0x20000534

08007528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d06e      	beq.n	800761c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800753e:	4b3a      	ldr	r3, [pc, #232]	; (8007628 <xTaskPriorityDisinherit+0x100>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	429a      	cmp	r2, r3
 8007546:	d00a      	beq.n	800755e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	60fb      	str	r3, [r7, #12]
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	60bb      	str	r3, [r7, #8]
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007580:	1e5a      	subs	r2, r3, #1
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	429a      	cmp	r2, r3
 8007590:	d044      	beq.n	800761c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007596:	2b00      	cmp	r3, #0
 8007598:	d140      	bne.n	800761c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	3304      	adds	r3, #4
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fb78 	bl	8005c94 <uxListRemove>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d115      	bne.n	80075d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ae:	491f      	ldr	r1, [pc, #124]	; (800762c <xTaskPriorityDisinherit+0x104>)
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	440b      	add	r3, r1
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <xTaskPriorityDisinherit+0xae>
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	2201      	movs	r2, #1
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	43da      	mvns	r2, r3
 80075cc:	4b18      	ldr	r3, [pc, #96]	; (8007630 <xTaskPriorityDisinherit+0x108>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4013      	ands	r3, r2
 80075d2:	4a17      	ldr	r2, [pc, #92]	; (8007630 <xTaskPriorityDisinherit+0x108>)
 80075d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	f1c3 0207 	rsb	r2, r3, #7
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	2201      	movs	r2, #1
 80075f0:	409a      	lsls	r2, r3
 80075f2:	4b0f      	ldr	r3, [pc, #60]	; (8007630 <xTaskPriorityDisinherit+0x108>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	4a0d      	ldr	r2, [pc, #52]	; (8007630 <xTaskPriorityDisinherit+0x108>)
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4a08      	ldr	r2, [pc, #32]	; (800762c <xTaskPriorityDisinherit+0x104>)
 800760a:	441a      	add	r2, r3
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	3304      	adds	r3, #4
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f7fe fae1 	bl	8005bda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800761c:	697b      	ldr	r3, [r7, #20]
	}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	2000042c 	.word	0x2000042c
 800762c:	20000430 	.word	0x20000430
 8007630:	20000534 	.word	0x20000534

08007634 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007642:	2301      	movs	r3, #1
 8007644:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d077      	beq.n	800773c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60fb      	str	r3, [r7, #12]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d902      	bls.n	800767a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	e002      	b.n	8007680 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	429a      	cmp	r2, r3
 8007688:	d058      	beq.n	800773c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	429a      	cmp	r2, r3
 8007692:	d153      	bne.n	800773c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007694:	4b2b      	ldr	r3, [pc, #172]	; (8007744 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	429a      	cmp	r2, r3
 800769c:	d10a      	bne.n	80076b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	60bb      	str	r3, [r7, #8]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	db04      	blt.n	80076d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f1c3 0207 	rsb	r2, r3, #7
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	6959      	ldr	r1, [r3, #20]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4a19      	ldr	r2, [pc, #100]	; (8007748 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80076e2:	4413      	add	r3, r2
 80076e4:	4299      	cmp	r1, r3
 80076e6:	d129      	bne.n	800773c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fad1 	bl	8005c94 <uxListRemove>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	2201      	movs	r2, #1
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	43da      	mvns	r2, r3
 8007704:	4b11      	ldr	r3, [pc, #68]	; (800774c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4013      	ands	r3, r2
 800770a:	4a10      	ldr	r2, [pc, #64]	; (800774c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800770c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	2201      	movs	r2, #1
 8007714:	409a      	lsls	r2, r3
 8007716:	4b0d      	ldr	r3, [pc, #52]	; (800774c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4313      	orrs	r3, r2
 800771c:	4a0b      	ldr	r2, [pc, #44]	; (800774c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4a06      	ldr	r2, [pc, #24]	; (8007748 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800772e:	441a      	add	r2, r3
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7fe fa4f 	bl	8005bda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800773c:	bf00      	nop
 800773e:	3720      	adds	r7, #32
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	2000042c 	.word	0x2000042c
 8007748:	20000430 	.word	0x20000430
 800774c:	20000534 	.word	0x20000534

08007750 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007754:	4b07      	ldr	r3, [pc, #28]	; (8007774 <pvTaskIncrementMutexHeldCount+0x24>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d004      	beq.n	8007766 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <pvTaskIncrementMutexHeldCount+0x24>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007762:	3201      	adds	r2, #1
 8007764:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007766:	4b03      	ldr	r3, [pc, #12]	; (8007774 <pvTaskIncrementMutexHeldCount+0x24>)
 8007768:	681b      	ldr	r3, [r3, #0]
	}
 800776a:	4618      	mov	r0, r3
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	2000042c 	.word	0x2000042c

08007778 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007782:	4b29      	ldr	r3, [pc, #164]	; (8007828 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007788:	4b28      	ldr	r3, [pc, #160]	; (800782c <prvAddCurrentTaskToDelayedList+0xb4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3304      	adds	r3, #4
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fa80 	bl	8005c94 <uxListRemove>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10b      	bne.n	80077b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <prvAddCurrentTaskToDelayedList+0xb4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	2201      	movs	r2, #1
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	43da      	mvns	r2, r3
 80077a8:	4b21      	ldr	r3, [pc, #132]	; (8007830 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4013      	ands	r3, r2
 80077ae:	4a20      	ldr	r2, [pc, #128]	; (8007830 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d10a      	bne.n	80077d0 <prvAddCurrentTaskToDelayedList+0x58>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d007      	beq.n	80077d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077c0:	4b1a      	ldr	r3, [pc, #104]	; (800782c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3304      	adds	r3, #4
 80077c6:	4619      	mov	r1, r3
 80077c8:	481a      	ldr	r0, [pc, #104]	; (8007834 <prvAddCurrentTaskToDelayedList+0xbc>)
 80077ca:	f7fe fa06 	bl	8005bda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077ce:	e026      	b.n	800781e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4413      	add	r3, r2
 80077d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077d8:	4b14      	ldr	r3, [pc, #80]	; (800782c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d209      	bcs.n	80077fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077e8:	4b13      	ldr	r3, [pc, #76]	; (8007838 <prvAddCurrentTaskToDelayedList+0xc0>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	4b0f      	ldr	r3, [pc, #60]	; (800782c <prvAddCurrentTaskToDelayedList+0xb4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f7fe fa14 	bl	8005c22 <vListInsert>
}
 80077fa:	e010      	b.n	800781e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fc:	4b0f      	ldr	r3, [pc, #60]	; (800783c <prvAddCurrentTaskToDelayedList+0xc4>)
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	4b0a      	ldr	r3, [pc, #40]	; (800782c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3304      	adds	r3, #4
 8007806:	4619      	mov	r1, r3
 8007808:	4610      	mov	r0, r2
 800780a:	f7fe fa0a 	bl	8005c22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800780e:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	429a      	cmp	r2, r3
 8007816:	d202      	bcs.n	800781e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007818:	4a09      	ldr	r2, [pc, #36]	; (8007840 <prvAddCurrentTaskToDelayedList+0xc8>)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6013      	str	r3, [r2, #0]
}
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000530 	.word	0x20000530
 800782c:	2000042c 	.word	0x2000042c
 8007830:	20000534 	.word	0x20000534
 8007834:	20000518 	.word	0x20000518
 8007838:	200004e8 	.word	0x200004e8
 800783c:	200004e4 	.word	0x200004e4
 8007840:	2000054c 	.word	0x2000054c

08007844 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3b04      	subs	r3, #4
 8007854:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800785c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3b04      	subs	r3, #4
 8007862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f023 0201 	bic.w	r2, r3, #1
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3b04      	subs	r3, #4
 8007872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007874:	4a0c      	ldr	r2, [pc, #48]	; (80078a8 <pxPortInitialiseStack+0x64>)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3b14      	subs	r3, #20
 800787e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3b04      	subs	r3, #4
 800788a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f06f 0202 	mvn.w	r2, #2
 8007892:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3b20      	subs	r3, #32
 8007898:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800789a:	68fb      	ldr	r3, [r7, #12]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	080078ad 	.word	0x080078ad

080078ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078b6:	4b12      	ldr	r3, [pc, #72]	; (8007900 <prvTaskExitError+0x54>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d00a      	beq.n	80078d6 <prvTaskExitError+0x2a>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <prvTaskExitError+0x28>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60bb      	str	r3, [r7, #8]
}
 80078e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078ea:	bf00      	nop
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0fc      	beq.n	80078ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078f2:	bf00      	nop
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	2000000c 	.word	0x2000000c
	...

08007910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <pxCurrentTCBConst2>)
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	f380 8809 	msr	PSP, r0
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	4770      	bx	lr
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst2>:
 8007930:	2000042c 	.word	0x2000042c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007938:	4808      	ldr	r0, [pc, #32]	; (800795c <prvPortStartFirstTask+0x24>)
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	f380 8808 	msr	MSP, r0
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8814 	msr	CONTROL, r0
 800794a:	b662      	cpsie	i
 800794c:	b661      	cpsie	f
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	df00      	svc	0
 8007958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800795a:	bf00      	nop
 800795c:	e000ed08 	.word	0xe000ed08

08007960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007966:	4b46      	ldr	r3, [pc, #280]	; (8007a80 <xPortStartScheduler+0x120>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a46      	ldr	r2, [pc, #280]	; (8007a84 <xPortStartScheduler+0x124>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10a      	bne.n	8007986 <xPortStartScheduler+0x26>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007986:	4b3e      	ldr	r3, [pc, #248]	; (8007a80 <xPortStartScheduler+0x120>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a3f      	ldr	r2, [pc, #252]	; (8007a88 <xPortStartScheduler+0x128>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10a      	bne.n	80079a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079a6:	4b39      	ldr	r3, [pc, #228]	; (8007a8c <xPortStartScheduler+0x12c>)
 80079a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	22ff      	movs	r2, #255	; 0xff
 80079b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	4b31      	ldr	r3, [pc, #196]	; (8007a90 <xPortStartScheduler+0x130>)
 80079cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ce:	4b31      	ldr	r3, [pc, #196]	; (8007a94 <xPortStartScheduler+0x134>)
 80079d0:	2207      	movs	r2, #7
 80079d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079d4:	e009      	b.n	80079ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079d6:	4b2f      	ldr	r3, [pc, #188]	; (8007a94 <xPortStartScheduler+0x134>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3b01      	subs	r3, #1
 80079dc:	4a2d      	ldr	r2, [pc, #180]	; (8007a94 <xPortStartScheduler+0x134>)
 80079de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d0ef      	beq.n	80079d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079f6:	4b27      	ldr	r3, [pc, #156]	; (8007a94 <xPortStartScheduler+0x134>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f1c3 0307 	rsb	r3, r3, #7
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d00a      	beq.n	8007a18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	60bb      	str	r3, [r7, #8]
}
 8007a14:	bf00      	nop
 8007a16:	e7fe      	b.n	8007a16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a18:	4b1e      	ldr	r3, [pc, #120]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a22:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a2a:	4a1a      	ldr	r2, [pc, #104]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a36:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a42:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a14      	ldr	r2, [pc, #80]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a4e:	f000 f8dd 	bl	8007c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a52:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <xPortStartScheduler+0x13c>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a58:	f000 f8fc 	bl	8007c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a5c:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <xPortStartScheduler+0x140>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a0f      	ldr	r2, [pc, #60]	; (8007aa0 <xPortStartScheduler+0x140>)
 8007a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a68:	f7ff ff66 	bl	8007938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a6c:	f7ff fa8c 	bl	8006f88 <vTaskSwitchContext>
	prvTaskExitError();
 8007a70:	f7ff ff1c 	bl	80078ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	e000ed00 	.word	0xe000ed00
 8007a84:	410fc271 	.word	0x410fc271
 8007a88:	410fc270 	.word	0x410fc270
 8007a8c:	e000e400 	.word	0xe000e400
 8007a90:	20000558 	.word	0x20000558
 8007a94:	2000055c 	.word	0x2000055c
 8007a98:	e000ed20 	.word	0xe000ed20
 8007a9c:	2000000c 	.word	0x2000000c
 8007aa0:	e000ef34 	.word	0xe000ef34

08007aa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	607b      	str	r3, [r7, #4]
}
 8007abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007abe:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <vPortEnterCritical+0x58>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	4a0d      	ldr	r2, [pc, #52]	; (8007afc <vPortEnterCritical+0x58>)
 8007ac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <vPortEnterCritical+0x58>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d10f      	bne.n	8007af0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <vPortEnterCritical+0x5c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	603b      	str	r3, [r7, #0]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <vPortEnterCritical+0x4a>
	}
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	2000000c 	.word	0x2000000c
 8007b00:	e000ed04 	.word	0xe000ed04

08007b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b0a:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <vPortExitCritical+0x50>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <vPortExitCritical+0x24>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	607b      	str	r3, [r7, #4]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <vPortExitCritical+0x50>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	4a09      	ldr	r2, [pc, #36]	; (8007b54 <vPortExitCritical+0x50>)
 8007b30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b32:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <vPortExitCritical+0x50>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d105      	bne.n	8007b46 <vPortExitCritical+0x42>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f383 8811 	msr	BASEPRI, r3
}
 8007b44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	2000000c 	.word	0x2000000c
	...

08007b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b60:	f3ef 8009 	mrs	r0, PSP
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <pxCurrentTCBConst>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	f01e 0f10 	tst.w	lr, #16
 8007b70:	bf08      	it	eq
 8007b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	6010      	str	r0, [r2, #0]
 8007b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b84:	f380 8811 	msr	BASEPRI, r0
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f7ff f9fa 	bl	8006f88 <vTaskSwitchContext>
 8007b94:	f04f 0000 	mov.w	r0, #0
 8007b98:	f380 8811 	msr	BASEPRI, r0
 8007b9c:	bc09      	pop	{r0, r3}
 8007b9e:	6819      	ldr	r1, [r3, #0]
 8007ba0:	6808      	ldr	r0, [r1, #0]
 8007ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba6:	f01e 0f10 	tst.w	lr, #16
 8007baa:	bf08      	it	eq
 8007bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bb0:	f380 8809 	msr	PSP, r0
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst>:
 8007bc0:	2000042c 	.word	0x2000042c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	607b      	str	r3, [r7, #4]
}
 8007be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007be2:	f7ff f919 	bl	8006e18 <xTaskIncrementTick>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <SysTick_Handler+0x40>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	f383 8811 	msr	BASEPRI, r3
}
 8007bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c10:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <vPortSetupTimerInterrupt+0x34>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <vPortSetupTimerInterrupt+0x38>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <vPortSetupTimerInterrupt+0x3c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a0a      	ldr	r2, [pc, #40]	; (8007c4c <vPortSetupTimerInterrupt+0x40>)
 8007c22:	fba2 2303 	umull	r2, r3, r2, r3
 8007c26:	099b      	lsrs	r3, r3, #6
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <vPortSetupTimerInterrupt+0x44>)
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c2e:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <vPortSetupTimerInterrupt+0x34>)
 8007c30:	2207      	movs	r2, #7
 8007c32:	601a      	str	r2, [r3, #0]
}
 8007c34:	bf00      	nop
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	e000e010 	.word	0xe000e010
 8007c44:	e000e018 	.word	0xe000e018
 8007c48:	20000000 	.word	0x20000000
 8007c4c:	10624dd3 	.word	0x10624dd3
 8007c50:	e000e014 	.word	0xe000e014

08007c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c64 <vPortEnableVFP+0x10>
 8007c58:	6801      	ldr	r1, [r0, #0]
 8007c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c5e:	6001      	str	r1, [r0, #0]
 8007c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c62:	bf00      	nop
 8007c64:	e000ed88 	.word	0xe000ed88

08007c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c6e:	f3ef 8305 	mrs	r3, IPSR
 8007c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	d914      	bls.n	8007ca4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c7a:	4a17      	ldr	r2, [pc, #92]	; (8007cd8 <vPortValidateInterruptPriority+0x70>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c84:	4b15      	ldr	r3, [pc, #84]	; (8007cdc <vPortValidateInterruptPriority+0x74>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	7afa      	ldrb	r2, [r7, #11]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d20a      	bcs.n	8007ca4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ca4:	4b0e      	ldr	r3, [pc, #56]	; (8007ce0 <vPortValidateInterruptPriority+0x78>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cac:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <vPortValidateInterruptPriority+0x7c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d90a      	bls.n	8007cca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	603b      	str	r3, [r7, #0]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <vPortValidateInterruptPriority+0x60>
	}
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	e000e3f0 	.word	0xe000e3f0
 8007cdc:	20000558 	.word	0x20000558
 8007ce0:	e000ed0c 	.word	0xe000ed0c
 8007ce4:	2000055c 	.word	0x2000055c

08007ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	; 0x28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cf4:	f7fe ffe6 	bl	8006cc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cf8:	4b5b      	ldr	r3, [pc, #364]	; (8007e68 <pvPortMalloc+0x180>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d00:	f000 f920 	bl	8007f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d04:	4b59      	ldr	r3, [pc, #356]	; (8007e6c <pvPortMalloc+0x184>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8093 	bne.w	8007e38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01d      	beq.n	8007d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d18:	2208      	movs	r2, #8
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d014      	beq.n	8007d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f023 0307 	bic.w	r3, r3, #7
 8007d30:	3308      	adds	r3, #8
 8007d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <pvPortMalloc+0x6c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	617b      	str	r3, [r7, #20]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d06e      	beq.n	8007e38 <pvPortMalloc+0x150>
 8007d5a:	4b45      	ldr	r3, [pc, #276]	; (8007e70 <pvPortMalloc+0x188>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d869      	bhi.n	8007e38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d64:	4b43      	ldr	r3, [pc, #268]	; (8007e74 <pvPortMalloc+0x18c>)
 8007d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d68:	4b42      	ldr	r3, [pc, #264]	; (8007e74 <pvPortMalloc+0x18c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d6e:	e004      	b.n	8007d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d903      	bls.n	8007d8c <pvPortMalloc+0xa4>
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1f1      	bne.n	8007d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d8c:	4b36      	ldr	r3, [pc, #216]	; (8007e68 <pvPortMalloc+0x180>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d050      	beq.n	8007e38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	4413      	add	r3, r2
 8007d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	2308      	movs	r3, #8
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d91f      	bls.n	8007df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <pvPortMalloc+0xf8>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	613b      	str	r3, [r7, #16]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007df2:	69b8      	ldr	r0, [r7, #24]
 8007df4:	f000 f908 	bl	8008008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007df8:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <pvPortMalloc+0x188>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	4a1b      	ldr	r2, [pc, #108]	; (8007e70 <pvPortMalloc+0x188>)
 8007e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e06:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <pvPortMalloc+0x188>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <pvPortMalloc+0x190>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d203      	bcs.n	8007e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e12:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <pvPortMalloc+0x188>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <pvPortMalloc+0x190>)
 8007e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <pvPortMalloc+0x184>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e2e:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <pvPortMalloc+0x194>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3301      	adds	r3, #1
 8007e34:	4a11      	ldr	r2, [pc, #68]	; (8007e7c <pvPortMalloc+0x194>)
 8007e36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e38:	f7fe ff52 	bl	8006ce0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <pvPortMalloc+0x174>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60fb      	str	r3, [r7, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <pvPortMalloc+0x172>
	return pvReturn;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3728      	adds	r7, #40	; 0x28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20004168 	.word	0x20004168
 8007e6c:	2000417c 	.word	0x2000417c
 8007e70:	2000416c 	.word	0x2000416c
 8007e74:	20004160 	.word	0x20004160
 8007e78:	20004170 	.word	0x20004170
 8007e7c:	20004174 	.word	0x20004174

08007e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d04d      	beq.n	8007f2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e92:	2308      	movs	r3, #8
 8007e94:	425b      	negs	r3, r3
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4413      	add	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	4b24      	ldr	r3, [pc, #144]	; (8007f38 <vPortFree+0xb8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <vPortFree+0x44>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	60fb      	str	r3, [r7, #12]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <vPortFree+0x62>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	60bb      	str	r3, [r7, #8]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <vPortFree+0xb8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01e      	beq.n	8007f2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d11a      	bne.n	8007f2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	4b0e      	ldr	r3, [pc, #56]	; (8007f38 <vPortFree+0xb8>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	43db      	mvns	r3, r3
 8007f02:	401a      	ands	r2, r3
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f08:	f7fe fedc 	bl	8006cc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <vPortFree+0xbc>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4413      	add	r3, r2
 8007f16:	4a09      	ldr	r2, [pc, #36]	; (8007f3c <vPortFree+0xbc>)
 8007f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f1a:	6938      	ldr	r0, [r7, #16]
 8007f1c:	f000 f874 	bl	8008008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <vPortFree+0xc0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3301      	adds	r3, #1
 8007f26:	4a06      	ldr	r2, [pc, #24]	; (8007f40 <vPortFree+0xc0>)
 8007f28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f2a:	f7fe fed9 	bl	8006ce0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f2e:	bf00      	nop
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	2000417c 	.word	0x2000417c
 8007f3c:	2000416c 	.word	0x2000416c
 8007f40:	20004178 	.word	0x20004178

08007f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f50:	4b27      	ldr	r3, [pc, #156]	; (8007ff0 <prvHeapInit+0xac>)
 8007f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00c      	beq.n	8007f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3307      	adds	r3, #7
 8007f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0307 	bic.w	r3, r3, #7
 8007f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <prvHeapInit+0xac>)
 8007f74:	4413      	add	r3, r2
 8007f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <prvHeapInit+0xb0>)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f82:	4b1c      	ldr	r3, [pc, #112]	; (8007ff4 <prvHeapInit+0xb0>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f90:	2208      	movs	r2, #8
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1a9b      	subs	r3, r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0307 	bic.w	r3, r3, #7
 8007f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2200      	movs	r2, #0
 8007fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fae:	4b12      	ldr	r3, [pc, #72]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	4a0a      	ldr	r2, [pc, #40]	; (8007ffc <prvHeapInit+0xb8>)
 8007fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	4a09      	ldr	r2, [pc, #36]	; (8008000 <prvHeapInit+0xbc>)
 8007fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fdc:	4b09      	ldr	r3, [pc, #36]	; (8008004 <prvHeapInit+0xc0>)
 8007fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fe2:	601a      	str	r2, [r3, #0]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	20000560 	.word	0x20000560
 8007ff4:	20004160 	.word	0x20004160
 8007ff8:	20004168 	.word	0x20004168
 8007ffc:	20004170 	.word	0x20004170
 8008000:	2000416c 	.word	0x2000416c
 8008004:	2000417c 	.word	0x2000417c

08008008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008010:	4b28      	ldr	r3, [pc, #160]	; (80080b4 <prvInsertBlockIntoFreeList+0xac>)
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e002      	b.n	800801c <prvInsertBlockIntoFreeList+0x14>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d8f7      	bhi.n	8008016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	4413      	add	r3, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	429a      	cmp	r2, r3
 8008036:	d108      	bne.n	800804a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	441a      	add	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	441a      	add	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d118      	bne.n	8008090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d00d      	beq.n	8008086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	441a      	add	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	e008      	b.n	8008098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e003      	b.n	8008098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	429a      	cmp	r2, r3
 800809e:	d002      	beq.n	80080a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080a6:	bf00      	nop
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20004160 	.word	0x20004160
 80080b8:	20004168 	.word	0x20004168

080080bc <__errno>:
 80080bc:	4b01      	ldr	r3, [pc, #4]	; (80080c4 <__errno+0x8>)
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20000010 	.word	0x20000010

080080c8 <__libc_init_array>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	4d0d      	ldr	r5, [pc, #52]	; (8008100 <__libc_init_array+0x38>)
 80080cc:	4c0d      	ldr	r4, [pc, #52]	; (8008104 <__libc_init_array+0x3c>)
 80080ce:	1b64      	subs	r4, r4, r5
 80080d0:	10a4      	asrs	r4, r4, #2
 80080d2:	2600      	movs	r6, #0
 80080d4:	42a6      	cmp	r6, r4
 80080d6:	d109      	bne.n	80080ec <__libc_init_array+0x24>
 80080d8:	4d0b      	ldr	r5, [pc, #44]	; (8008108 <__libc_init_array+0x40>)
 80080da:	4c0c      	ldr	r4, [pc, #48]	; (800810c <__libc_init_array+0x44>)
 80080dc:	f000 fc4e 	bl	800897c <_init>
 80080e0:	1b64      	subs	r4, r4, r5
 80080e2:	10a4      	asrs	r4, r4, #2
 80080e4:	2600      	movs	r6, #0
 80080e6:	42a6      	cmp	r6, r4
 80080e8:	d105      	bne.n	80080f6 <__libc_init_array+0x2e>
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f0:	4798      	blx	r3
 80080f2:	3601      	adds	r6, #1
 80080f4:	e7ee      	b.n	80080d4 <__libc_init_array+0xc>
 80080f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080fa:	4798      	blx	r3
 80080fc:	3601      	adds	r6, #1
 80080fe:	e7f2      	b.n	80080e6 <__libc_init_array+0x1e>
 8008100:	08008c14 	.word	0x08008c14
 8008104:	08008c14 	.word	0x08008c14
 8008108:	08008c14 	.word	0x08008c14
 800810c:	08008c18 	.word	0x08008c18

08008110 <memcpy>:
 8008110:	440a      	add	r2, r1
 8008112:	4291      	cmp	r1, r2
 8008114:	f100 33ff 	add.w	r3, r0, #4294967295
 8008118:	d100      	bne.n	800811c <memcpy+0xc>
 800811a:	4770      	bx	lr
 800811c:	b510      	push	{r4, lr}
 800811e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008126:	4291      	cmp	r1, r2
 8008128:	d1f9      	bne.n	800811e <memcpy+0xe>
 800812a:	bd10      	pop	{r4, pc}

0800812c <memset>:
 800812c:	4402      	add	r2, r0
 800812e:	4603      	mov	r3, r0
 8008130:	4293      	cmp	r3, r2
 8008132:	d100      	bne.n	8008136 <memset+0xa>
 8008134:	4770      	bx	lr
 8008136:	f803 1b01 	strb.w	r1, [r3], #1
 800813a:	e7f9      	b.n	8008130 <memset+0x4>

0800813c <siprintf>:
 800813c:	b40e      	push	{r1, r2, r3}
 800813e:	b500      	push	{lr}
 8008140:	b09c      	sub	sp, #112	; 0x70
 8008142:	ab1d      	add	r3, sp, #116	; 0x74
 8008144:	9002      	str	r0, [sp, #8]
 8008146:	9006      	str	r0, [sp, #24]
 8008148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800814c:	4809      	ldr	r0, [pc, #36]	; (8008174 <siprintf+0x38>)
 800814e:	9107      	str	r1, [sp, #28]
 8008150:	9104      	str	r1, [sp, #16]
 8008152:	4909      	ldr	r1, [pc, #36]	; (8008178 <siprintf+0x3c>)
 8008154:	f853 2b04 	ldr.w	r2, [r3], #4
 8008158:	9105      	str	r1, [sp, #20]
 800815a:	6800      	ldr	r0, [r0, #0]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	a902      	add	r1, sp, #8
 8008160:	f000 f868 	bl	8008234 <_svfiprintf_r>
 8008164:	9b02      	ldr	r3, [sp, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	b01c      	add	sp, #112	; 0x70
 800816c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008170:	b003      	add	sp, #12
 8008172:	4770      	bx	lr
 8008174:	20000010 	.word	0x20000010
 8008178:	ffff0208 	.word	0xffff0208

0800817c <__ssputs_r>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	688e      	ldr	r6, [r1, #8]
 8008182:	429e      	cmp	r6, r3
 8008184:	4682      	mov	sl, r0
 8008186:	460c      	mov	r4, r1
 8008188:	4690      	mov	r8, r2
 800818a:	461f      	mov	r7, r3
 800818c:	d838      	bhi.n	8008200 <__ssputs_r+0x84>
 800818e:	898a      	ldrh	r2, [r1, #12]
 8008190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008194:	d032      	beq.n	80081fc <__ssputs_r+0x80>
 8008196:	6825      	ldr	r5, [r4, #0]
 8008198:	6909      	ldr	r1, [r1, #16]
 800819a:	eba5 0901 	sub.w	r9, r5, r1
 800819e:	6965      	ldr	r5, [r4, #20]
 80081a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081a8:	3301      	adds	r3, #1
 80081aa:	444b      	add	r3, r9
 80081ac:	106d      	asrs	r5, r5, #1
 80081ae:	429d      	cmp	r5, r3
 80081b0:	bf38      	it	cc
 80081b2:	461d      	movcc	r5, r3
 80081b4:	0553      	lsls	r3, r2, #21
 80081b6:	d531      	bpl.n	800821c <__ssputs_r+0xa0>
 80081b8:	4629      	mov	r1, r5
 80081ba:	f000 fb39 	bl	8008830 <_malloc_r>
 80081be:	4606      	mov	r6, r0
 80081c0:	b950      	cbnz	r0, 80081d8 <__ssputs_r+0x5c>
 80081c2:	230c      	movs	r3, #12
 80081c4:	f8ca 3000 	str.w	r3, [sl]
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d8:	6921      	ldr	r1, [r4, #16]
 80081da:	464a      	mov	r2, r9
 80081dc:	f7ff ff98 	bl	8008110 <memcpy>
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	6126      	str	r6, [r4, #16]
 80081ee:	6165      	str	r5, [r4, #20]
 80081f0:	444e      	add	r6, r9
 80081f2:	eba5 0509 	sub.w	r5, r5, r9
 80081f6:	6026      	str	r6, [r4, #0]
 80081f8:	60a5      	str	r5, [r4, #8]
 80081fa:	463e      	mov	r6, r7
 80081fc:	42be      	cmp	r6, r7
 80081fe:	d900      	bls.n	8008202 <__ssputs_r+0x86>
 8008200:	463e      	mov	r6, r7
 8008202:	4632      	mov	r2, r6
 8008204:	6820      	ldr	r0, [r4, #0]
 8008206:	4641      	mov	r1, r8
 8008208:	f000 faa8 	bl	800875c <memmove>
 800820c:	68a3      	ldr	r3, [r4, #8]
 800820e:	6822      	ldr	r2, [r4, #0]
 8008210:	1b9b      	subs	r3, r3, r6
 8008212:	4432      	add	r2, r6
 8008214:	60a3      	str	r3, [r4, #8]
 8008216:	6022      	str	r2, [r4, #0]
 8008218:	2000      	movs	r0, #0
 800821a:	e7db      	b.n	80081d4 <__ssputs_r+0x58>
 800821c:	462a      	mov	r2, r5
 800821e:	f000 fb61 	bl	80088e4 <_realloc_r>
 8008222:	4606      	mov	r6, r0
 8008224:	2800      	cmp	r0, #0
 8008226:	d1e1      	bne.n	80081ec <__ssputs_r+0x70>
 8008228:	6921      	ldr	r1, [r4, #16]
 800822a:	4650      	mov	r0, sl
 800822c:	f000 fab0 	bl	8008790 <_free_r>
 8008230:	e7c7      	b.n	80081c2 <__ssputs_r+0x46>
	...

08008234 <_svfiprintf_r>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	4698      	mov	r8, r3
 800823a:	898b      	ldrh	r3, [r1, #12]
 800823c:	061b      	lsls	r3, r3, #24
 800823e:	b09d      	sub	sp, #116	; 0x74
 8008240:	4607      	mov	r7, r0
 8008242:	460d      	mov	r5, r1
 8008244:	4614      	mov	r4, r2
 8008246:	d50e      	bpl.n	8008266 <_svfiprintf_r+0x32>
 8008248:	690b      	ldr	r3, [r1, #16]
 800824a:	b963      	cbnz	r3, 8008266 <_svfiprintf_r+0x32>
 800824c:	2140      	movs	r1, #64	; 0x40
 800824e:	f000 faef 	bl	8008830 <_malloc_r>
 8008252:	6028      	str	r0, [r5, #0]
 8008254:	6128      	str	r0, [r5, #16]
 8008256:	b920      	cbnz	r0, 8008262 <_svfiprintf_r+0x2e>
 8008258:	230c      	movs	r3, #12
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	e0d1      	b.n	8008406 <_svfiprintf_r+0x1d2>
 8008262:	2340      	movs	r3, #64	; 0x40
 8008264:	616b      	str	r3, [r5, #20]
 8008266:	2300      	movs	r3, #0
 8008268:	9309      	str	r3, [sp, #36]	; 0x24
 800826a:	2320      	movs	r3, #32
 800826c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008270:	f8cd 800c 	str.w	r8, [sp, #12]
 8008274:	2330      	movs	r3, #48	; 0x30
 8008276:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008420 <_svfiprintf_r+0x1ec>
 800827a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800827e:	f04f 0901 	mov.w	r9, #1
 8008282:	4623      	mov	r3, r4
 8008284:	469a      	mov	sl, r3
 8008286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800828a:	b10a      	cbz	r2, 8008290 <_svfiprintf_r+0x5c>
 800828c:	2a25      	cmp	r2, #37	; 0x25
 800828e:	d1f9      	bne.n	8008284 <_svfiprintf_r+0x50>
 8008290:	ebba 0b04 	subs.w	fp, sl, r4
 8008294:	d00b      	beq.n	80082ae <_svfiprintf_r+0x7a>
 8008296:	465b      	mov	r3, fp
 8008298:	4622      	mov	r2, r4
 800829a:	4629      	mov	r1, r5
 800829c:	4638      	mov	r0, r7
 800829e:	f7ff ff6d 	bl	800817c <__ssputs_r>
 80082a2:	3001      	adds	r0, #1
 80082a4:	f000 80aa 	beq.w	80083fc <_svfiprintf_r+0x1c8>
 80082a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082aa:	445a      	add	r2, fp
 80082ac:	9209      	str	r2, [sp, #36]	; 0x24
 80082ae:	f89a 3000 	ldrb.w	r3, [sl]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80a2 	beq.w	80083fc <_svfiprintf_r+0x1c8>
 80082b8:	2300      	movs	r3, #0
 80082ba:	f04f 32ff 	mov.w	r2, #4294967295
 80082be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082c2:	f10a 0a01 	add.w	sl, sl, #1
 80082c6:	9304      	str	r3, [sp, #16]
 80082c8:	9307      	str	r3, [sp, #28]
 80082ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082ce:	931a      	str	r3, [sp, #104]	; 0x68
 80082d0:	4654      	mov	r4, sl
 80082d2:	2205      	movs	r2, #5
 80082d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d8:	4851      	ldr	r0, [pc, #324]	; (8008420 <_svfiprintf_r+0x1ec>)
 80082da:	f7f7 ff91 	bl	8000200 <memchr>
 80082de:	9a04      	ldr	r2, [sp, #16]
 80082e0:	b9d8      	cbnz	r0, 800831a <_svfiprintf_r+0xe6>
 80082e2:	06d0      	lsls	r0, r2, #27
 80082e4:	bf44      	itt	mi
 80082e6:	2320      	movmi	r3, #32
 80082e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ec:	0711      	lsls	r1, r2, #28
 80082ee:	bf44      	itt	mi
 80082f0:	232b      	movmi	r3, #43	; 0x2b
 80082f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082f6:	f89a 3000 	ldrb.w	r3, [sl]
 80082fa:	2b2a      	cmp	r3, #42	; 0x2a
 80082fc:	d015      	beq.n	800832a <_svfiprintf_r+0xf6>
 80082fe:	9a07      	ldr	r2, [sp, #28]
 8008300:	4654      	mov	r4, sl
 8008302:	2000      	movs	r0, #0
 8008304:	f04f 0c0a 	mov.w	ip, #10
 8008308:	4621      	mov	r1, r4
 800830a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800830e:	3b30      	subs	r3, #48	; 0x30
 8008310:	2b09      	cmp	r3, #9
 8008312:	d94e      	bls.n	80083b2 <_svfiprintf_r+0x17e>
 8008314:	b1b0      	cbz	r0, 8008344 <_svfiprintf_r+0x110>
 8008316:	9207      	str	r2, [sp, #28]
 8008318:	e014      	b.n	8008344 <_svfiprintf_r+0x110>
 800831a:	eba0 0308 	sub.w	r3, r0, r8
 800831e:	fa09 f303 	lsl.w	r3, r9, r3
 8008322:	4313      	orrs	r3, r2
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	46a2      	mov	sl, r4
 8008328:	e7d2      	b.n	80082d0 <_svfiprintf_r+0x9c>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	1d19      	adds	r1, r3, #4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	9103      	str	r1, [sp, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	bfbb      	ittet	lt
 8008336:	425b      	neglt	r3, r3
 8008338:	f042 0202 	orrlt.w	r2, r2, #2
 800833c:	9307      	strge	r3, [sp, #28]
 800833e:	9307      	strlt	r3, [sp, #28]
 8008340:	bfb8      	it	lt
 8008342:	9204      	strlt	r2, [sp, #16]
 8008344:	7823      	ldrb	r3, [r4, #0]
 8008346:	2b2e      	cmp	r3, #46	; 0x2e
 8008348:	d10c      	bne.n	8008364 <_svfiprintf_r+0x130>
 800834a:	7863      	ldrb	r3, [r4, #1]
 800834c:	2b2a      	cmp	r3, #42	; 0x2a
 800834e:	d135      	bne.n	80083bc <_svfiprintf_r+0x188>
 8008350:	9b03      	ldr	r3, [sp, #12]
 8008352:	1d1a      	adds	r2, r3, #4
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	9203      	str	r2, [sp, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	bfb8      	it	lt
 800835c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008360:	3402      	adds	r4, #2
 8008362:	9305      	str	r3, [sp, #20]
 8008364:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008430 <_svfiprintf_r+0x1fc>
 8008368:	7821      	ldrb	r1, [r4, #0]
 800836a:	2203      	movs	r2, #3
 800836c:	4650      	mov	r0, sl
 800836e:	f7f7 ff47 	bl	8000200 <memchr>
 8008372:	b140      	cbz	r0, 8008386 <_svfiprintf_r+0x152>
 8008374:	2340      	movs	r3, #64	; 0x40
 8008376:	eba0 000a 	sub.w	r0, r0, sl
 800837a:	fa03 f000 	lsl.w	r0, r3, r0
 800837e:	9b04      	ldr	r3, [sp, #16]
 8008380:	4303      	orrs	r3, r0
 8008382:	3401      	adds	r4, #1
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838a:	4826      	ldr	r0, [pc, #152]	; (8008424 <_svfiprintf_r+0x1f0>)
 800838c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008390:	2206      	movs	r2, #6
 8008392:	f7f7 ff35 	bl	8000200 <memchr>
 8008396:	2800      	cmp	r0, #0
 8008398:	d038      	beq.n	800840c <_svfiprintf_r+0x1d8>
 800839a:	4b23      	ldr	r3, [pc, #140]	; (8008428 <_svfiprintf_r+0x1f4>)
 800839c:	bb1b      	cbnz	r3, 80083e6 <_svfiprintf_r+0x1b2>
 800839e:	9b03      	ldr	r3, [sp, #12]
 80083a0:	3307      	adds	r3, #7
 80083a2:	f023 0307 	bic.w	r3, r3, #7
 80083a6:	3308      	adds	r3, #8
 80083a8:	9303      	str	r3, [sp, #12]
 80083aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ac:	4433      	add	r3, r6
 80083ae:	9309      	str	r3, [sp, #36]	; 0x24
 80083b0:	e767      	b.n	8008282 <_svfiprintf_r+0x4e>
 80083b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083b6:	460c      	mov	r4, r1
 80083b8:	2001      	movs	r0, #1
 80083ba:	e7a5      	b.n	8008308 <_svfiprintf_r+0xd4>
 80083bc:	2300      	movs	r3, #0
 80083be:	3401      	adds	r4, #1
 80083c0:	9305      	str	r3, [sp, #20]
 80083c2:	4619      	mov	r1, r3
 80083c4:	f04f 0c0a 	mov.w	ip, #10
 80083c8:	4620      	mov	r0, r4
 80083ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ce:	3a30      	subs	r2, #48	; 0x30
 80083d0:	2a09      	cmp	r2, #9
 80083d2:	d903      	bls.n	80083dc <_svfiprintf_r+0x1a8>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0c5      	beq.n	8008364 <_svfiprintf_r+0x130>
 80083d8:	9105      	str	r1, [sp, #20]
 80083da:	e7c3      	b.n	8008364 <_svfiprintf_r+0x130>
 80083dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80083e0:	4604      	mov	r4, r0
 80083e2:	2301      	movs	r3, #1
 80083e4:	e7f0      	b.n	80083c8 <_svfiprintf_r+0x194>
 80083e6:	ab03      	add	r3, sp, #12
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	462a      	mov	r2, r5
 80083ec:	4b0f      	ldr	r3, [pc, #60]	; (800842c <_svfiprintf_r+0x1f8>)
 80083ee:	a904      	add	r1, sp, #16
 80083f0:	4638      	mov	r0, r7
 80083f2:	f3af 8000 	nop.w
 80083f6:	1c42      	adds	r2, r0, #1
 80083f8:	4606      	mov	r6, r0
 80083fa:	d1d6      	bne.n	80083aa <_svfiprintf_r+0x176>
 80083fc:	89ab      	ldrh	r3, [r5, #12]
 80083fe:	065b      	lsls	r3, r3, #25
 8008400:	f53f af2c 	bmi.w	800825c <_svfiprintf_r+0x28>
 8008404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008406:	b01d      	add	sp, #116	; 0x74
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	ab03      	add	r3, sp, #12
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	462a      	mov	r2, r5
 8008412:	4b06      	ldr	r3, [pc, #24]	; (800842c <_svfiprintf_r+0x1f8>)
 8008414:	a904      	add	r1, sp, #16
 8008416:	4638      	mov	r0, r7
 8008418:	f000 f87a 	bl	8008510 <_printf_i>
 800841c:	e7eb      	b.n	80083f6 <_svfiprintf_r+0x1c2>
 800841e:	bf00      	nop
 8008420:	08008bd8 	.word	0x08008bd8
 8008424:	08008be2 	.word	0x08008be2
 8008428:	00000000 	.word	0x00000000
 800842c:	0800817d 	.word	0x0800817d
 8008430:	08008bde 	.word	0x08008bde

08008434 <_printf_common>:
 8008434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	4616      	mov	r6, r2
 800843a:	4699      	mov	r9, r3
 800843c:	688a      	ldr	r2, [r1, #8]
 800843e:	690b      	ldr	r3, [r1, #16]
 8008440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008444:	4293      	cmp	r3, r2
 8008446:	bfb8      	it	lt
 8008448:	4613      	movlt	r3, r2
 800844a:	6033      	str	r3, [r6, #0]
 800844c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008450:	4607      	mov	r7, r0
 8008452:	460c      	mov	r4, r1
 8008454:	b10a      	cbz	r2, 800845a <_printf_common+0x26>
 8008456:	3301      	adds	r3, #1
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	0699      	lsls	r1, r3, #26
 800845e:	bf42      	ittt	mi
 8008460:	6833      	ldrmi	r3, [r6, #0]
 8008462:	3302      	addmi	r3, #2
 8008464:	6033      	strmi	r3, [r6, #0]
 8008466:	6825      	ldr	r5, [r4, #0]
 8008468:	f015 0506 	ands.w	r5, r5, #6
 800846c:	d106      	bne.n	800847c <_printf_common+0x48>
 800846e:	f104 0a19 	add.w	sl, r4, #25
 8008472:	68e3      	ldr	r3, [r4, #12]
 8008474:	6832      	ldr	r2, [r6, #0]
 8008476:	1a9b      	subs	r3, r3, r2
 8008478:	42ab      	cmp	r3, r5
 800847a:	dc26      	bgt.n	80084ca <_printf_common+0x96>
 800847c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008480:	1e13      	subs	r3, r2, #0
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	bf18      	it	ne
 8008486:	2301      	movne	r3, #1
 8008488:	0692      	lsls	r2, r2, #26
 800848a:	d42b      	bmi.n	80084e4 <_printf_common+0xb0>
 800848c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008490:	4649      	mov	r1, r9
 8008492:	4638      	mov	r0, r7
 8008494:	47c0      	blx	r8
 8008496:	3001      	adds	r0, #1
 8008498:	d01e      	beq.n	80084d8 <_printf_common+0xa4>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	68e5      	ldr	r5, [r4, #12]
 800849e:	6832      	ldr	r2, [r6, #0]
 80084a0:	f003 0306 	and.w	r3, r3, #6
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	bf08      	it	eq
 80084a8:	1aad      	subeq	r5, r5, r2
 80084aa:	68a3      	ldr	r3, [r4, #8]
 80084ac:	6922      	ldr	r2, [r4, #16]
 80084ae:	bf0c      	ite	eq
 80084b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084b4:	2500      	movne	r5, #0
 80084b6:	4293      	cmp	r3, r2
 80084b8:	bfc4      	itt	gt
 80084ba:	1a9b      	subgt	r3, r3, r2
 80084bc:	18ed      	addgt	r5, r5, r3
 80084be:	2600      	movs	r6, #0
 80084c0:	341a      	adds	r4, #26
 80084c2:	42b5      	cmp	r5, r6
 80084c4:	d11a      	bne.n	80084fc <_printf_common+0xc8>
 80084c6:	2000      	movs	r0, #0
 80084c8:	e008      	b.n	80084dc <_printf_common+0xa8>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4652      	mov	r2, sl
 80084ce:	4649      	mov	r1, r9
 80084d0:	4638      	mov	r0, r7
 80084d2:	47c0      	blx	r8
 80084d4:	3001      	adds	r0, #1
 80084d6:	d103      	bne.n	80084e0 <_printf_common+0xac>
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e0:	3501      	adds	r5, #1
 80084e2:	e7c6      	b.n	8008472 <_printf_common+0x3e>
 80084e4:	18e1      	adds	r1, r4, r3
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	2030      	movs	r0, #48	; 0x30
 80084ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084ee:	4422      	add	r2, r4
 80084f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084f8:	3302      	adds	r3, #2
 80084fa:	e7c7      	b.n	800848c <_printf_common+0x58>
 80084fc:	2301      	movs	r3, #1
 80084fe:	4622      	mov	r2, r4
 8008500:	4649      	mov	r1, r9
 8008502:	4638      	mov	r0, r7
 8008504:	47c0      	blx	r8
 8008506:	3001      	adds	r0, #1
 8008508:	d0e6      	beq.n	80084d8 <_printf_common+0xa4>
 800850a:	3601      	adds	r6, #1
 800850c:	e7d9      	b.n	80084c2 <_printf_common+0x8e>
	...

08008510 <_printf_i>:
 8008510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008514:	460c      	mov	r4, r1
 8008516:	4691      	mov	r9, r2
 8008518:	7e27      	ldrb	r7, [r4, #24]
 800851a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800851c:	2f78      	cmp	r7, #120	; 0x78
 800851e:	4680      	mov	r8, r0
 8008520:	469a      	mov	sl, r3
 8008522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008526:	d807      	bhi.n	8008538 <_printf_i+0x28>
 8008528:	2f62      	cmp	r7, #98	; 0x62
 800852a:	d80a      	bhi.n	8008542 <_printf_i+0x32>
 800852c:	2f00      	cmp	r7, #0
 800852e:	f000 80d8 	beq.w	80086e2 <_printf_i+0x1d2>
 8008532:	2f58      	cmp	r7, #88	; 0x58
 8008534:	f000 80a3 	beq.w	800867e <_printf_i+0x16e>
 8008538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800853c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008540:	e03a      	b.n	80085b8 <_printf_i+0xa8>
 8008542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008546:	2b15      	cmp	r3, #21
 8008548:	d8f6      	bhi.n	8008538 <_printf_i+0x28>
 800854a:	a001      	add	r0, pc, #4	; (adr r0, 8008550 <_printf_i+0x40>)
 800854c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008550:	080085a9 	.word	0x080085a9
 8008554:	080085bd 	.word	0x080085bd
 8008558:	08008539 	.word	0x08008539
 800855c:	08008539 	.word	0x08008539
 8008560:	08008539 	.word	0x08008539
 8008564:	08008539 	.word	0x08008539
 8008568:	080085bd 	.word	0x080085bd
 800856c:	08008539 	.word	0x08008539
 8008570:	08008539 	.word	0x08008539
 8008574:	08008539 	.word	0x08008539
 8008578:	08008539 	.word	0x08008539
 800857c:	080086c9 	.word	0x080086c9
 8008580:	080085ed 	.word	0x080085ed
 8008584:	080086ab 	.word	0x080086ab
 8008588:	08008539 	.word	0x08008539
 800858c:	08008539 	.word	0x08008539
 8008590:	080086eb 	.word	0x080086eb
 8008594:	08008539 	.word	0x08008539
 8008598:	080085ed 	.word	0x080085ed
 800859c:	08008539 	.word	0x08008539
 80085a0:	08008539 	.word	0x08008539
 80085a4:	080086b3 	.word	0x080086b3
 80085a8:	680b      	ldr	r3, [r1, #0]
 80085aa:	1d1a      	adds	r2, r3, #4
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	600a      	str	r2, [r1, #0]
 80085b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085b8:	2301      	movs	r3, #1
 80085ba:	e0a3      	b.n	8008704 <_printf_i+0x1f4>
 80085bc:	6825      	ldr	r5, [r4, #0]
 80085be:	6808      	ldr	r0, [r1, #0]
 80085c0:	062e      	lsls	r6, r5, #24
 80085c2:	f100 0304 	add.w	r3, r0, #4
 80085c6:	d50a      	bpl.n	80085de <_printf_i+0xce>
 80085c8:	6805      	ldr	r5, [r0, #0]
 80085ca:	600b      	str	r3, [r1, #0]
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	da03      	bge.n	80085d8 <_printf_i+0xc8>
 80085d0:	232d      	movs	r3, #45	; 0x2d
 80085d2:	426d      	negs	r5, r5
 80085d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085d8:	485e      	ldr	r0, [pc, #376]	; (8008754 <_printf_i+0x244>)
 80085da:	230a      	movs	r3, #10
 80085dc:	e019      	b.n	8008612 <_printf_i+0x102>
 80085de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80085e2:	6805      	ldr	r5, [r0, #0]
 80085e4:	600b      	str	r3, [r1, #0]
 80085e6:	bf18      	it	ne
 80085e8:	b22d      	sxthne	r5, r5
 80085ea:	e7ef      	b.n	80085cc <_printf_i+0xbc>
 80085ec:	680b      	ldr	r3, [r1, #0]
 80085ee:	6825      	ldr	r5, [r4, #0]
 80085f0:	1d18      	adds	r0, r3, #4
 80085f2:	6008      	str	r0, [r1, #0]
 80085f4:	0628      	lsls	r0, r5, #24
 80085f6:	d501      	bpl.n	80085fc <_printf_i+0xec>
 80085f8:	681d      	ldr	r5, [r3, #0]
 80085fa:	e002      	b.n	8008602 <_printf_i+0xf2>
 80085fc:	0669      	lsls	r1, r5, #25
 80085fe:	d5fb      	bpl.n	80085f8 <_printf_i+0xe8>
 8008600:	881d      	ldrh	r5, [r3, #0]
 8008602:	4854      	ldr	r0, [pc, #336]	; (8008754 <_printf_i+0x244>)
 8008604:	2f6f      	cmp	r7, #111	; 0x6f
 8008606:	bf0c      	ite	eq
 8008608:	2308      	moveq	r3, #8
 800860a:	230a      	movne	r3, #10
 800860c:	2100      	movs	r1, #0
 800860e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008612:	6866      	ldr	r6, [r4, #4]
 8008614:	60a6      	str	r6, [r4, #8]
 8008616:	2e00      	cmp	r6, #0
 8008618:	bfa2      	ittt	ge
 800861a:	6821      	ldrge	r1, [r4, #0]
 800861c:	f021 0104 	bicge.w	r1, r1, #4
 8008620:	6021      	strge	r1, [r4, #0]
 8008622:	b90d      	cbnz	r5, 8008628 <_printf_i+0x118>
 8008624:	2e00      	cmp	r6, #0
 8008626:	d04d      	beq.n	80086c4 <_printf_i+0x1b4>
 8008628:	4616      	mov	r6, r2
 800862a:	fbb5 f1f3 	udiv	r1, r5, r3
 800862e:	fb03 5711 	mls	r7, r3, r1, r5
 8008632:	5dc7      	ldrb	r7, [r0, r7]
 8008634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008638:	462f      	mov	r7, r5
 800863a:	42bb      	cmp	r3, r7
 800863c:	460d      	mov	r5, r1
 800863e:	d9f4      	bls.n	800862a <_printf_i+0x11a>
 8008640:	2b08      	cmp	r3, #8
 8008642:	d10b      	bne.n	800865c <_printf_i+0x14c>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	07df      	lsls	r7, r3, #31
 8008648:	d508      	bpl.n	800865c <_printf_i+0x14c>
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	6861      	ldr	r1, [r4, #4]
 800864e:	4299      	cmp	r1, r3
 8008650:	bfde      	ittt	le
 8008652:	2330      	movle	r3, #48	; 0x30
 8008654:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008658:	f106 36ff 	addle.w	r6, r6, #4294967295
 800865c:	1b92      	subs	r2, r2, r6
 800865e:	6122      	str	r2, [r4, #16]
 8008660:	f8cd a000 	str.w	sl, [sp]
 8008664:	464b      	mov	r3, r9
 8008666:	aa03      	add	r2, sp, #12
 8008668:	4621      	mov	r1, r4
 800866a:	4640      	mov	r0, r8
 800866c:	f7ff fee2 	bl	8008434 <_printf_common>
 8008670:	3001      	adds	r0, #1
 8008672:	d14c      	bne.n	800870e <_printf_i+0x1fe>
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	b004      	add	sp, #16
 800867a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867e:	4835      	ldr	r0, [pc, #212]	; (8008754 <_printf_i+0x244>)
 8008680:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	680e      	ldr	r6, [r1, #0]
 8008688:	061f      	lsls	r7, r3, #24
 800868a:	f856 5b04 	ldr.w	r5, [r6], #4
 800868e:	600e      	str	r6, [r1, #0]
 8008690:	d514      	bpl.n	80086bc <_printf_i+0x1ac>
 8008692:	07d9      	lsls	r1, r3, #31
 8008694:	bf44      	itt	mi
 8008696:	f043 0320 	orrmi.w	r3, r3, #32
 800869a:	6023      	strmi	r3, [r4, #0]
 800869c:	b91d      	cbnz	r5, 80086a6 <_printf_i+0x196>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	f023 0320 	bic.w	r3, r3, #32
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	2310      	movs	r3, #16
 80086a8:	e7b0      	b.n	800860c <_printf_i+0xfc>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	f043 0320 	orr.w	r3, r3, #32
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	2378      	movs	r3, #120	; 0x78
 80086b4:	4828      	ldr	r0, [pc, #160]	; (8008758 <_printf_i+0x248>)
 80086b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086ba:	e7e3      	b.n	8008684 <_printf_i+0x174>
 80086bc:	065e      	lsls	r6, r3, #25
 80086be:	bf48      	it	mi
 80086c0:	b2ad      	uxthmi	r5, r5
 80086c2:	e7e6      	b.n	8008692 <_printf_i+0x182>
 80086c4:	4616      	mov	r6, r2
 80086c6:	e7bb      	b.n	8008640 <_printf_i+0x130>
 80086c8:	680b      	ldr	r3, [r1, #0]
 80086ca:	6826      	ldr	r6, [r4, #0]
 80086cc:	6960      	ldr	r0, [r4, #20]
 80086ce:	1d1d      	adds	r5, r3, #4
 80086d0:	600d      	str	r5, [r1, #0]
 80086d2:	0635      	lsls	r5, r6, #24
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	d501      	bpl.n	80086dc <_printf_i+0x1cc>
 80086d8:	6018      	str	r0, [r3, #0]
 80086da:	e002      	b.n	80086e2 <_printf_i+0x1d2>
 80086dc:	0671      	lsls	r1, r6, #25
 80086de:	d5fb      	bpl.n	80086d8 <_printf_i+0x1c8>
 80086e0:	8018      	strh	r0, [r3, #0]
 80086e2:	2300      	movs	r3, #0
 80086e4:	6123      	str	r3, [r4, #16]
 80086e6:	4616      	mov	r6, r2
 80086e8:	e7ba      	b.n	8008660 <_printf_i+0x150>
 80086ea:	680b      	ldr	r3, [r1, #0]
 80086ec:	1d1a      	adds	r2, r3, #4
 80086ee:	600a      	str	r2, [r1, #0]
 80086f0:	681e      	ldr	r6, [r3, #0]
 80086f2:	6862      	ldr	r2, [r4, #4]
 80086f4:	2100      	movs	r1, #0
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7f7 fd82 	bl	8000200 <memchr>
 80086fc:	b108      	cbz	r0, 8008702 <_printf_i+0x1f2>
 80086fe:	1b80      	subs	r0, r0, r6
 8008700:	6060      	str	r0, [r4, #4]
 8008702:	6863      	ldr	r3, [r4, #4]
 8008704:	6123      	str	r3, [r4, #16]
 8008706:	2300      	movs	r3, #0
 8008708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800870c:	e7a8      	b.n	8008660 <_printf_i+0x150>
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	4632      	mov	r2, r6
 8008712:	4649      	mov	r1, r9
 8008714:	4640      	mov	r0, r8
 8008716:	47d0      	blx	sl
 8008718:	3001      	adds	r0, #1
 800871a:	d0ab      	beq.n	8008674 <_printf_i+0x164>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	079b      	lsls	r3, r3, #30
 8008720:	d413      	bmi.n	800874a <_printf_i+0x23a>
 8008722:	68e0      	ldr	r0, [r4, #12]
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	4298      	cmp	r0, r3
 8008728:	bfb8      	it	lt
 800872a:	4618      	movlt	r0, r3
 800872c:	e7a4      	b.n	8008678 <_printf_i+0x168>
 800872e:	2301      	movs	r3, #1
 8008730:	4632      	mov	r2, r6
 8008732:	4649      	mov	r1, r9
 8008734:	4640      	mov	r0, r8
 8008736:	47d0      	blx	sl
 8008738:	3001      	adds	r0, #1
 800873a:	d09b      	beq.n	8008674 <_printf_i+0x164>
 800873c:	3501      	adds	r5, #1
 800873e:	68e3      	ldr	r3, [r4, #12]
 8008740:	9903      	ldr	r1, [sp, #12]
 8008742:	1a5b      	subs	r3, r3, r1
 8008744:	42ab      	cmp	r3, r5
 8008746:	dcf2      	bgt.n	800872e <_printf_i+0x21e>
 8008748:	e7eb      	b.n	8008722 <_printf_i+0x212>
 800874a:	2500      	movs	r5, #0
 800874c:	f104 0619 	add.w	r6, r4, #25
 8008750:	e7f5      	b.n	800873e <_printf_i+0x22e>
 8008752:	bf00      	nop
 8008754:	08008be9 	.word	0x08008be9
 8008758:	08008bfa 	.word	0x08008bfa

0800875c <memmove>:
 800875c:	4288      	cmp	r0, r1
 800875e:	b510      	push	{r4, lr}
 8008760:	eb01 0402 	add.w	r4, r1, r2
 8008764:	d902      	bls.n	800876c <memmove+0x10>
 8008766:	4284      	cmp	r4, r0
 8008768:	4623      	mov	r3, r4
 800876a:	d807      	bhi.n	800877c <memmove+0x20>
 800876c:	1e43      	subs	r3, r0, #1
 800876e:	42a1      	cmp	r1, r4
 8008770:	d008      	beq.n	8008784 <memmove+0x28>
 8008772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800877a:	e7f8      	b.n	800876e <memmove+0x12>
 800877c:	4402      	add	r2, r0
 800877e:	4601      	mov	r1, r0
 8008780:	428a      	cmp	r2, r1
 8008782:	d100      	bne.n	8008786 <memmove+0x2a>
 8008784:	bd10      	pop	{r4, pc}
 8008786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800878a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800878e:	e7f7      	b.n	8008780 <memmove+0x24>

08008790 <_free_r>:
 8008790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008792:	2900      	cmp	r1, #0
 8008794:	d048      	beq.n	8008828 <_free_r+0x98>
 8008796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800879a:	9001      	str	r0, [sp, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	f1a1 0404 	sub.w	r4, r1, #4
 80087a2:	bfb8      	it	lt
 80087a4:	18e4      	addlt	r4, r4, r3
 80087a6:	f000 f8d3 	bl	8008950 <__malloc_lock>
 80087aa:	4a20      	ldr	r2, [pc, #128]	; (800882c <_free_r+0x9c>)
 80087ac:	9801      	ldr	r0, [sp, #4]
 80087ae:	6813      	ldr	r3, [r2, #0]
 80087b0:	4615      	mov	r5, r2
 80087b2:	b933      	cbnz	r3, 80087c2 <_free_r+0x32>
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	6014      	str	r4, [r2, #0]
 80087b8:	b003      	add	sp, #12
 80087ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087be:	f000 b8cd 	b.w	800895c <__malloc_unlock>
 80087c2:	42a3      	cmp	r3, r4
 80087c4:	d90b      	bls.n	80087de <_free_r+0x4e>
 80087c6:	6821      	ldr	r1, [r4, #0]
 80087c8:	1862      	adds	r2, r4, r1
 80087ca:	4293      	cmp	r3, r2
 80087cc:	bf04      	itt	eq
 80087ce:	681a      	ldreq	r2, [r3, #0]
 80087d0:	685b      	ldreq	r3, [r3, #4]
 80087d2:	6063      	str	r3, [r4, #4]
 80087d4:	bf04      	itt	eq
 80087d6:	1852      	addeq	r2, r2, r1
 80087d8:	6022      	streq	r2, [r4, #0]
 80087da:	602c      	str	r4, [r5, #0]
 80087dc:	e7ec      	b.n	80087b8 <_free_r+0x28>
 80087de:	461a      	mov	r2, r3
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	b10b      	cbz	r3, 80087e8 <_free_r+0x58>
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	d9fa      	bls.n	80087de <_free_r+0x4e>
 80087e8:	6811      	ldr	r1, [r2, #0]
 80087ea:	1855      	adds	r5, r2, r1
 80087ec:	42a5      	cmp	r5, r4
 80087ee:	d10b      	bne.n	8008808 <_free_r+0x78>
 80087f0:	6824      	ldr	r4, [r4, #0]
 80087f2:	4421      	add	r1, r4
 80087f4:	1854      	adds	r4, r2, r1
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	d1dd      	bne.n	80087b8 <_free_r+0x28>
 80087fc:	681c      	ldr	r4, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	6053      	str	r3, [r2, #4]
 8008802:	4421      	add	r1, r4
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	e7d7      	b.n	80087b8 <_free_r+0x28>
 8008808:	d902      	bls.n	8008810 <_free_r+0x80>
 800880a:	230c      	movs	r3, #12
 800880c:	6003      	str	r3, [r0, #0]
 800880e:	e7d3      	b.n	80087b8 <_free_r+0x28>
 8008810:	6825      	ldr	r5, [r4, #0]
 8008812:	1961      	adds	r1, r4, r5
 8008814:	428b      	cmp	r3, r1
 8008816:	bf04      	itt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	bf04      	itt	eq
 8008820:	1949      	addeq	r1, r1, r5
 8008822:	6021      	streq	r1, [r4, #0]
 8008824:	6054      	str	r4, [r2, #4]
 8008826:	e7c7      	b.n	80087b8 <_free_r+0x28>
 8008828:	b003      	add	sp, #12
 800882a:	bd30      	pop	{r4, r5, pc}
 800882c:	20004180 	.word	0x20004180

08008830 <_malloc_r>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	1ccd      	adds	r5, r1, #3
 8008834:	f025 0503 	bic.w	r5, r5, #3
 8008838:	3508      	adds	r5, #8
 800883a:	2d0c      	cmp	r5, #12
 800883c:	bf38      	it	cc
 800883e:	250c      	movcc	r5, #12
 8008840:	2d00      	cmp	r5, #0
 8008842:	4606      	mov	r6, r0
 8008844:	db01      	blt.n	800884a <_malloc_r+0x1a>
 8008846:	42a9      	cmp	r1, r5
 8008848:	d903      	bls.n	8008852 <_malloc_r+0x22>
 800884a:	230c      	movs	r3, #12
 800884c:	6033      	str	r3, [r6, #0]
 800884e:	2000      	movs	r0, #0
 8008850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008852:	f000 f87d 	bl	8008950 <__malloc_lock>
 8008856:	4921      	ldr	r1, [pc, #132]	; (80088dc <_malloc_r+0xac>)
 8008858:	680a      	ldr	r2, [r1, #0]
 800885a:	4614      	mov	r4, r2
 800885c:	b99c      	cbnz	r4, 8008886 <_malloc_r+0x56>
 800885e:	4f20      	ldr	r7, [pc, #128]	; (80088e0 <_malloc_r+0xb0>)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	b923      	cbnz	r3, 800886e <_malloc_r+0x3e>
 8008864:	4621      	mov	r1, r4
 8008866:	4630      	mov	r0, r6
 8008868:	f000 f862 	bl	8008930 <_sbrk_r>
 800886c:	6038      	str	r0, [r7, #0]
 800886e:	4629      	mov	r1, r5
 8008870:	4630      	mov	r0, r6
 8008872:	f000 f85d 	bl	8008930 <_sbrk_r>
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	d123      	bne.n	80088c2 <_malloc_r+0x92>
 800887a:	230c      	movs	r3, #12
 800887c:	6033      	str	r3, [r6, #0]
 800887e:	4630      	mov	r0, r6
 8008880:	f000 f86c 	bl	800895c <__malloc_unlock>
 8008884:	e7e3      	b.n	800884e <_malloc_r+0x1e>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	1b5b      	subs	r3, r3, r5
 800888a:	d417      	bmi.n	80088bc <_malloc_r+0x8c>
 800888c:	2b0b      	cmp	r3, #11
 800888e:	d903      	bls.n	8008898 <_malloc_r+0x68>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	441c      	add	r4, r3
 8008894:	6025      	str	r5, [r4, #0]
 8008896:	e004      	b.n	80088a2 <_malloc_r+0x72>
 8008898:	6863      	ldr	r3, [r4, #4]
 800889a:	42a2      	cmp	r2, r4
 800889c:	bf0c      	ite	eq
 800889e:	600b      	streq	r3, [r1, #0]
 80088a0:	6053      	strne	r3, [r2, #4]
 80088a2:	4630      	mov	r0, r6
 80088a4:	f000 f85a 	bl	800895c <__malloc_unlock>
 80088a8:	f104 000b 	add.w	r0, r4, #11
 80088ac:	1d23      	adds	r3, r4, #4
 80088ae:	f020 0007 	bic.w	r0, r0, #7
 80088b2:	1ac2      	subs	r2, r0, r3
 80088b4:	d0cc      	beq.n	8008850 <_malloc_r+0x20>
 80088b6:	1a1b      	subs	r3, r3, r0
 80088b8:	50a3      	str	r3, [r4, r2]
 80088ba:	e7c9      	b.n	8008850 <_malloc_r+0x20>
 80088bc:	4622      	mov	r2, r4
 80088be:	6864      	ldr	r4, [r4, #4]
 80088c0:	e7cc      	b.n	800885c <_malloc_r+0x2c>
 80088c2:	1cc4      	adds	r4, r0, #3
 80088c4:	f024 0403 	bic.w	r4, r4, #3
 80088c8:	42a0      	cmp	r0, r4
 80088ca:	d0e3      	beq.n	8008894 <_malloc_r+0x64>
 80088cc:	1a21      	subs	r1, r4, r0
 80088ce:	4630      	mov	r0, r6
 80088d0:	f000 f82e 	bl	8008930 <_sbrk_r>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d1dd      	bne.n	8008894 <_malloc_r+0x64>
 80088d8:	e7cf      	b.n	800887a <_malloc_r+0x4a>
 80088da:	bf00      	nop
 80088dc:	20004180 	.word	0x20004180
 80088e0:	20004184 	.word	0x20004184

080088e4 <_realloc_r>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	4607      	mov	r7, r0
 80088e8:	4614      	mov	r4, r2
 80088ea:	460e      	mov	r6, r1
 80088ec:	b921      	cbnz	r1, 80088f8 <_realloc_r+0x14>
 80088ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088f2:	4611      	mov	r1, r2
 80088f4:	f7ff bf9c 	b.w	8008830 <_malloc_r>
 80088f8:	b922      	cbnz	r2, 8008904 <_realloc_r+0x20>
 80088fa:	f7ff ff49 	bl	8008790 <_free_r>
 80088fe:	4625      	mov	r5, r4
 8008900:	4628      	mov	r0, r5
 8008902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008904:	f000 f830 	bl	8008968 <_malloc_usable_size_r>
 8008908:	42a0      	cmp	r0, r4
 800890a:	d20f      	bcs.n	800892c <_realloc_r+0x48>
 800890c:	4621      	mov	r1, r4
 800890e:	4638      	mov	r0, r7
 8008910:	f7ff ff8e 	bl	8008830 <_malloc_r>
 8008914:	4605      	mov	r5, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d0f2      	beq.n	8008900 <_realloc_r+0x1c>
 800891a:	4631      	mov	r1, r6
 800891c:	4622      	mov	r2, r4
 800891e:	f7ff fbf7 	bl	8008110 <memcpy>
 8008922:	4631      	mov	r1, r6
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff ff33 	bl	8008790 <_free_r>
 800892a:	e7e9      	b.n	8008900 <_realloc_r+0x1c>
 800892c:	4635      	mov	r5, r6
 800892e:	e7e7      	b.n	8008900 <_realloc_r+0x1c>

08008930 <_sbrk_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d06      	ldr	r5, [pc, #24]	; (800894c <_sbrk_r+0x1c>)
 8008934:	2300      	movs	r3, #0
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	602b      	str	r3, [r5, #0]
 800893c:	f7f9 fb5e 	bl	8001ffc <_sbrk>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_sbrk_r+0x1a>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_sbrk_r+0x1a>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	2000438c 	.word	0x2000438c

08008950 <__malloc_lock>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__malloc_lock+0x8>)
 8008952:	f000 b811 	b.w	8008978 <__retarget_lock_acquire_recursive>
 8008956:	bf00      	nop
 8008958:	20004394 	.word	0x20004394

0800895c <__malloc_unlock>:
 800895c:	4801      	ldr	r0, [pc, #4]	; (8008964 <__malloc_unlock+0x8>)
 800895e:	f000 b80c 	b.w	800897a <__retarget_lock_release_recursive>
 8008962:	bf00      	nop
 8008964:	20004394 	.word	0x20004394

08008968 <_malloc_usable_size_r>:
 8008968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800896c:	1f18      	subs	r0, r3, #4
 800896e:	2b00      	cmp	r3, #0
 8008970:	bfbc      	itt	lt
 8008972:	580b      	ldrlt	r3, [r1, r0]
 8008974:	18c0      	addlt	r0, r0, r3
 8008976:	4770      	bx	lr

08008978 <__retarget_lock_acquire_recursive>:
 8008978:	4770      	bx	lr

0800897a <__retarget_lock_release_recursive>:
 800897a:	4770      	bx	lr

0800897c <_init>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr

08008988 <_fini>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	bf00      	nop
 800898c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898e:	bc08      	pop	{r3}
 8008990:	469e      	mov	lr, r3
 8008992:	4770      	bx	lr
